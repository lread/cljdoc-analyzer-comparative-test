found results/old/analysis-out/cljdoc-edn/orchestra/orchestra/2018.11.07-1/cljdoc.edn
found results/new/analysis-out/cljdoc-edn/orchestra/orchestra/2018.11.07-1/cljdoc.edn
[1;31m{[0m[1;33m:analysis[0m [1;31m{[0m[1;35m"clj"[0m [1;31m[[0m[1;31m{[0m[1;33m:name[0m orchestra-cljs.spec.test,
[1;33m                    :publics[0m [1;31m([0m[1;31m{[0m[1;33m:arglists[0m [1;31m([0m[1;31m[][0m [1;31m[[0mxs[1;31m][0m [1;31m[[0msym-or-syms opts[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Instruments the vars named by sym-or-syms, a symbol or collection\nof symbols, or all instrumentable vars if sym-or-syms is not\nspecified. If a symbol identifies a namespace then all symbols in that\nnamespace will be enumerated.\n\nIf a var has an :args fn-spec, sets the var's root binding to a\nfn that checks arg conformance (throwing an exception on failure)\nbefore delegating to the original fn.\n\nThe opts map can be used to override registered specs, and/or to\nreplace fn implementations entirely. Opts for symbols not included\nin sym-or-syms are ignored. This facilitates sharing a common\noptions map across many different calls to instrument.\n\nThe opts map may have the following keys:\n\n:spec     a map from var-name symbols to override specs\n:stub     a set of var-name symbols to be replaced by stubs\n:gen      a map from spec names to generator overrides\n:replace  a map from var-name symbols to replacement fns\n\n:spec overrides registered fn-specs with specs your provide. Use\n:spec overrides to provide specs for libraries that do not have\nthem, or to constrain your own use of a fn to a subset of its\nspec'ed contract.\n\n:stub replaces a fn with a stub that checks :args, then uses the\n:ret spec to generate a return value.\n\n:gen overrides are used only for :stub generation.\n\n:replace replaces a fn with a fn that checks args conformance, then\ninvokes the fn you provide, enabling arbitrary stubbing and mocking.\n\n:spec can be used in combination with :stub or :replace.\n\nReturns a collection of syms naming the vars instrumented."[0m,
[1;33m                               :file[0m [1;35m"orchestra_cljs/spec/test.cljc"[0m,
[1;33m                               :line[0m [36m81[0m,
[1;33m                               :name[0m instrument,
[1;33m                               :type[0m [1;33m:macro[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0m[1;31m[[0mquote s[1;31m][0m opts[1;31m][0m[1;31m)[0m,
[1;33m                               :file[0m [1;35m"orchestra_cljs/spec/test.cljc"[0m,
[1;33m                               :line[0m [36m48[0m,
[1;33m                               :name[0m instrument-1,
[1;33m                               :type[0m [1;33m:macro[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[][0m [1;31m[[0msym-or-syms[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Undoes instrument on the vars named by sym-or-syms, specified\nas in instrument. With no args, unstruments all instrumented vars.\nReturns a collection of syms naming the vars unstrumented."[0m,
[1;33m                               :file[0m [1;35m"orchestra_cljs/spec/test.cljc"[0m,
[1;33m                               :line[0m [36m141[0m,
[1;33m                               :name[0m unstrument,
[1;33m                               :type[0m [1;33m:macro[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0m[1;31m[[0mquote s[1;31m][0m[1;31m][0m[1;31m)[0m,
[1;33m                               :file[0m [1;35m"orchestra_cljs/spec/test.cljc"[0m,
[1;33m                               :line[0m [36m57[0m,
[1;33m                               :name[0m unstrument-1,
[1;33m                               :type[0m [1;33m:macro[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0m& body[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Disables instrument's checking of calls, within a scope.\n"[0m,
[1;33m                               :file[0m [1;35m"orchestra_cljs/spec/test.cljc"[0m,
[1;33m                               :line[0m [36m42[0m,
[1;33m                               :name[0m with-instrument-disabled,
[1;33m                               :type[0m [1;33m:macro[0m[1;31m}[0m[1;31m)[0m[1;31m}[0m
[1;31m                   {[0m[1;33m:name[0m orchestra.core,
[1;33m                    :publics[0m [1;31m([0m[1;31m{[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0m& args[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Defines a function and the associated spec.\n\nExample usage:\n(defn-spec str->kw keyword?\n  [s string?]\n   (keyword s))\n\nMultiple arities are also supported:\n(defn-spec inc' number?\n  ([a number?]\n   (inc' a 1))\n  ([a number?, n number?]\n   (+ a n)))"[0m,
[1;33m                               :file[0m [1;35m"orchestra/core.cljc"[0m,
[1;33m                               :line[0m [36m4[0m,
[1;33m                               :name[0m defn-spec,
[1;33m                               :type[0m [1;33m:macro[0m[1;31m}[0m[1;31m)[0m[1;31m}[0m
[1;31m                   {[0m[1;33m:name[0m orchestra.detail,
[1;33m                    :publics[0m [1;31m([0m[1;31m{[0m[1;33m:dynamic[0m [1;36mtrue[0m,
[1;33m                               :file[0m [1;35m"orchestra/detail.cljc"[0m,
[1;33m                               :line[0m [36m64[0m,
[1;33m                               :name[0m *cljs?*,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0midx arg[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Converts are argument to a keyword. Arguments may use destructuring, so they\nmay not be a symbol. In that case, just fill in something helpful."[0m,
[1;33m                               :file[0m [1;35m"orchestra/detail.cljc"[0m,
[1;33m                               :line[0m [36m125[0m,
[1;33m                               :name[0m arg->kw,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mconformed-arities exploded-arities[1;31m][0m[1;31m)[0m,
[1;33m                               :file[0m [1;35m"orchestra/detail.cljc"[0m,
[1;33m                               :line[0m [36m141[0m,
[1;33m                               :name[0m build-args-spec,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0marity-arg-names arity-specs[1;31m][0m[1;31m)[0m,
[1;33m                               :file[0m [1;35m"orchestra/detail.cljc"[0m,
[1;33m                               :line[0m [36m133[0m,
[1;33m                               :name[0m build-cat,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0m& args[1;31m][0m[1;31m)[0m,
[1;33m                               :file[0m [1;35m"orchestra/detail.cljc"[0m,
[1;33m                               :line[0m [36m178[0m,
[1;33m                               :name[0m defn-spec-helper,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0marity[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Strips the specs from the arity's args and gets it ready for consumption.\nDoes the job of s/unform, since s/unform doesn't do its job well."[0m,
[1;33m                               :file[0m [1;35m"orchestra/detail.cljc"[0m,
[1;33m                               :line[0m [36m92[0m,
[1;33m                               :name[0m explode-arity,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0m& args[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Takes in the variadic values of a defn-spec and returns a map of the\nvarious parts. Handles multiple arities and optional doc strings."[0m,
[1;33m                               :file[0m [1;35m"orchestra/detail.cljc"[0m,
[1;33m                               :line[0m [36m158[0m,
[1;33m                               :name[0m explode-def,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0marity[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Returns a sequence of specs, based on the arity's args.\n"[0m,
[1;33m                               :file[0m [1;35m"orchestra/detail.cljc"[0m,
[1;33m                               :line[0m [36m109[0m,
[1;33m                               :name[0m extract-arg-specs,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[][0m[1;31m)[0m,
[1;33m                               :file[0m [1;35m"orchestra/detail.cljc"[0m,
[1;33m                               :line[0m [36m66[0m,
[1;33m                               :name[0m get-global-defn,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0marg-count[1;31m][0m[1;31m)[0m,
[1;33m                               :file[0m [1;35m"orchestra/detail.cljc"[0m,
[1;33m                               :line[0m [36m137[0m,
[1;33m                               :name[0m name-arity,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0m[1;31m{[0m[1;33m:keys[0m [1;31m[[0m[1;33m:orchestra.detail/exploded-args[0m
[1;33m                                                   :orchestra.detail/exploded-body[0m[1;31m][0m[1;31m}[0m[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Turns an exploded arity into something which defn can consume.\n"[0m,
[1;33m                               :file[0m [1;35m"orchestra/detail.cljc"[0m,
[1;33m                               :line[0m [36m104[0m,
[1;33m                               :name[0m render-arity,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0m[1;31m[[0mkind value[1;31m][0m[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Doing the job of unform, since it turns destructured sequences into lists.\n'cause it's silly."[0m,
[1;33m                               :file[0m [1;35m"orchestra/detail.cljc"[0m,
[1;33m                               :line[0m [36m83[0m,
[1;33m                               :name[0m render-binding,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mfn-name[1;31m][0m[1;31m)[0m,
[1;33m                               :file[0m [1;35m"orchestra/detail.cljc"[0m,
[1;33m                               :line[0m [36m69[0m,
[1;33m                               :name[0m spec-fn,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m[1;31m)[0m[1;31m}[0m
[1;31m                   {[0m[1;33m:name[0m orchestra.spec.test,
[1;33m                    :publics[0m [1;31m([0m[1;31m{[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mx[1;31m][0m[1;31m)[0m,
[1;33m                               :file[0m [1;35m"orchestra/spec/test.clj"[0m,
[1;33m                               :line[0m [36m17[0m,
[1;33m                               :name[0m ->sym,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[][0m [1;31m[[0msym-or-syms[1;31m][0m [1;31m[[0msym-or-syms opts[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Instruments the vars named by sym-or-syms, a symbol or collection\nof symbols, or all instrumentable vars if sym-or-syms is not\nspecified.\n\nIf a var has an :args fn-spec, sets the var's root binding to a\nfn that checks arg conformance (throwing an exception on failure)\nbefore delegating to the original fn.\n\nThe opts map can be used to override registered specs, and/or to\nreplace fn implementations entirely. Opts for symbols not included\nin sym-or-syms are ignored. This facilitates sharing a common\noptions map across many different calls to instrument.\n\nThe opts map may have the following keys:\n\n  :spec     a map from var-name symbols to override specs\n  :stub     a set of var-name symbols to be replaced by stubs\n  :gen      a map from spec names to generator overrides\n  :replace  a map from var-name symbols to replacement fns\n\n:spec overrides registered fn-specs with specs your provide. Use\n:spec overrides to provide specs for libraries that do not have\nthem, or to constrain your own use of a fn to a subset of its\nspec'ed contract.\n\n:stub replaces a fn with a stub that checks :args, then uses the\n:ret spec to generate a return value.\n\n:gen overrides are used only for :stub generation.\n\n:replace replaces a fn with a fn that checks args conformance, then\ninvokes the fn you provide, enabling arbitrary stubbing and mocking.\n\n:spec can be used in combination with :stub or :replace.\n\nReturns a collection of syms naming the vars instrumented."[0m,
[1;33m                               :file[0m [1;35m"orchestra/spec/test.clj"[0m,
[1;33m                               :line[0m [36m189[0m,
[1;33m                               :name[0m instrument,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[][0m [1;31m[[0mopts[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Given an opts map as per instrument, returns the set of syms\nthat can be instrumented."[0m,
[1;33m                               :file[0m [1;35m"orchestra/spec/test.clj"[0m,
[1;33m                               :line[0m [36m178[0m,
[1;33m                               :name[0m instrumentable-syms,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[][0m [1;31m[[0msym-or-syms[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Undoes instrument on the vars named by sym-or-syms, specified\nas in instrument. With no args, unstruments all instrumented vars.\nReturns a collection of syms naming the vars unstrumented."[0m,
[1;33m                               :file[0m [1;35m"orchestra/spec/test.clj"[0m,
[1;33m                               :line[0m [36m238[0m,
[1;33m                               :name[0m unstrument,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0m& body[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Disables instrument's checking of calls, within a scope.\n"[0m,
[1;33m                               :file[0m [1;35m"orchestra/spec/test.clj"[0m,
[1;33m                               :line[0m [36m43[0m,
[1;33m                               :name[0m with-instrument-disabled,
[1;33m                               :type[0m [1;33m:macro[0m[1;31m}[0m[1;31m)[0m[1;31m}[0m[1;31m][0m,
[1;35m            "cljs"[0m [1;31m[[0m[1;31m{[0m[1;33m:name[0m orchestra-cljs.spec.test,
[1;33m                     :publics[0m [1;31m[[0m[30;41m-{:arglists ([] [xs] [sym-or-syms opts]),
                                 :doc "Instruments the vars named by sym-or-syms, a symbol or collection\nof symbols, or all instrumentable vars if sym-or-syms is not\nspecified. If a symbol identifies a namespace then all symbols in that\nnamespace will be enumerated.\n\nIf a var has an :args fn-spec, sets the var's root binding to a\nfn that checks arg conformance (throwing an exception on failure)\nbefore delegating to the original fn.\n\nThe opts map can be used to override registered specs, and/or to\nreplace fn implementations entirely. Opts for symbols not included\nin sym-or-syms are ignored. This facilitates sharing a common\noptions map across many different calls to instrument.\n\nThe opts map may have the following keys:\n\n:spec     a map from var-name symbols to override specs\n:stub     a set of var-name symbols to be replaced by stubs\n:gen      a map from spec names to generator overrides\n:replace  a map from var-name symbols to replacement fns\n\n:spec overrides registered fn-specs with specs your provide. Use\n:spec overrides to provide specs for libraries that do not have\nthem, or to constrain your own use of a fn to a subset of its\nspec'ed contract.\n\n:stub replaces a fn with a stub that checks :args, then uses the\n:ret spec to generate a return value.\n\n:gen overrides are used only for :stub generation.\n\n:replace replaces a fn with a fn that checks args conformance, then\ninvokes the fn you provide, enabling arbitrary stubbing and mocking.\n\n:spec can be used in combination with :stub or :replace.\n\nReturns a collection of syms naming the vars instrumented.",
                                 :file "/var/folders/8g/glv37m8n73gf4x0fqy5whqjc0000gn/T/cljdoc-orchestra-2018.11.07-17613119870463695882/contents/orchestra_cljs/spec/test.cljc",
                                 :line 81,
                                 :name instrument,
                                 :type :macro}[0m
[30;41m                               -{:arglists ([[quote s] opts]),
                                 :file "/var/folders/8g/glv37m8n73gf4x0fqy5whqjc0000gn/T/cljdoc-orchestra-2018.11.07-17613119870463695882/contents/orchestra_cljs/spec/test.cljc",
                                 :line 48,
                                 :name instrument-1,
                                 :type :macro}[0m
[30;41m                               -{:arglists ([] [sym-or-syms]),
                                 :doc "Undoes instrument on the vars named by sym-or-syms, specified\nas in instrument. With no args, unstruments all instrumented vars.\nReturns a collection of syms naming the vars unstrumented.",
                                 :file "/var/folders/8g/glv37m8n73gf4x0fqy5whqjc0000gn/T/cljdoc-orchestra-2018.11.07-17613119870463695882/contents/orchestra_cljs/spec/test.cljc",
                                 :line 141,
                                 :name unstrument,
                                 :type :macro}[0m
[30;41m                               -{:arglists ([[quote s]]),
                                 :file "/var/folders/8g/glv37m8n73gf4x0fqy5whqjc0000gn/T/cljdoc-orchestra-2018.11.07-17613119870463695882/contents/orchestra_cljs/spec/test.cljc",
                                 :line 57,
                                 :name unstrument-1,
                                 :type :macro}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0m[30;41m-&[0m [30;42m+f[0m [30;41m-body[0m [30;42m+coll[0m[1;31m][0m[1;31m][0m,
[1;33m                                :file[0m [30;41m-"/var/folders/8g/glv37m8n73gf4x0fqy5whqjc0000gn/T/cljdoc-orchestra-2018.11.07-17613119870463695882/contents/orchestra_cljs/spec/test.cljc"[0m
[30;42m                                      +"orchestra_cljs/spec/test.cljs"[0m,
[1;33m                                :line[0m [30;41m-42[0m [30;42m+21[0m,
[1;33m                                :name[0m [30;41m-with-instrument-disabled[0m [30;42m+distinct-by[0m,
[1;33m                                :type[0m [30;41m-:macro[0m [30;42m+:var[0m,
[30;41m                                -:doc[0m [30;41m"Disables instrument's checking of calls, within a scope.\n"[0m[1;31m}[0m
[30;42m                               +{:arglists ([]),
                                 :file "orchestra_cljs/spec/test.cljs",
                                 :line 65,
                                 :name get-env,
                                 :type :var}[0m
[30;42m                               +{:arglists ([]),
                                 :file "orchestra_cljs/spec/test.cljs",
                                 :line 50,
                                 :name get-host-port,
                                 :type :var}[0m
[30;42m                               +{:arglists ([]),
                                 :file "orchestra_cljs/spec/test.cljs",
                                 :line 56,
                                 :name get-ua-product,
                                 :type :var}[0m
[30;42m                               +{:arglists ([] [xs] [sym-or-syms opts]),
                                 :doc "Instruments the vars named by sym-or-syms, a symbol or collection\nof symbols, or all instrumentable vars if sym-or-syms is not\nspecified. If a symbol identifies a namespace then all symbols in that\nnamespace will be enumerated.\n\nIf a var has an :args fn-spec, sets the var's root binding to a\nfn that checks arg conformance (throwing an exception on failure)\nbefore delegating to the original fn.\n\nThe opts map can be used to override registered specs, and/or to\nreplace fn implementations entirely. Opts for symbols not included\nin sym-or-syms are ignored. This facilitates sharing a common\noptions map across many different calls to instrument.\n\nThe opts map may have the following keys:\n\n:spec     a map from var-name symbols to override specs\n:stub     a set of var-name symbols to be replaced by stubs\n:gen      a map from spec names to generator overrides\n:replace  a map from var-name symbols to replacement fns\n\n:spec overrides registered fn-specs with specs your provide. Use\n:spec overrides to provide specs for libraries that do not have\nthem, or to constrain your own use of a fn to a subset of its\nspec'ed contract.\n\n:stub replaces a fn with a stub that checks :args, then uses the\n:ret spec to generate a return value.\n\n:gen overrides are used only for :stub generation.\n\n:replace replaces a fn with a fn that checks args conformance, then\ninvokes the fn you provide, enabling arbitrary stubbing and mocking.\n\n:spec can be used in combination with :stub or :replace.\n\nReturns a collection of syms naming the vars instrumented.",
                                 :file "orchestra_cljs/spec/test.cljc",
                                 :line 81,
                                 :name instrument,
                                 :type :macro}[0m
[30;42m                               +{:arglists ([[quote s] opts]),
                                 :file "orchestra_cljs/spec/test.cljc",
                                 :line 48,
                                 :name instrument-1,
                                 :type :macro}[0m
[30;42m                               +{:arglists ([s v opts]),
                                 :file "orchestra_cljs/spec/test.cljs",
                                 :line 141,
                                 :name instrument-1*,
                                 :type :var}[0m
[30;42m                               +{:arglists ([] [opts]),
                                 :doc "Given an opts map as per instrument, returns the set of syms\nthat can be instrumented.",
                                 :file "orchestra_cljs/spec/test.cljs",
                                 :line 167,
                                 :name instrumentable-syms,
                                 :type :var}[0m
[30;42m                               +{:arglists ([] [sym-or-syms]),
                                 :doc "Undoes instrument on the vars named by sym-or-syms, specified\nas in instrument. With no args, unstruments all instrumented vars.\nReturns a collection of syms naming the vars unstrumented.",
                                 :file "orchestra_cljs/spec/test.cljc",
                                 :line 141,
                                 :name unstrument,
                                 :type :macro}[0m
[30;42m                               +{:arglists ([[quote s]]),
                                 :file "orchestra_cljs/spec/test.cljc",
                                 :line 57,
                                 :name unstrument-1,
                                 :type :macro}[0m
[30;42m                               +{:arglists ([s v]),
                                 :file "orchestra_cljs/spec/test.cljs",
                                 :line 154,
                                 :name unstrument-1*,
                                 :type :var}[0m
[30;42m                               +{:arglists ([& body]),
                                 :doc "Disables instrument's checking of calls, within a scope.\n",
                                 :file "orchestra_cljs/spec/test.cljc",
                                 :line 42,
                                 :name with-instrument-disabled,
                                 :type :macro}[0m[1;31m][0m[1;31m}[0m
[1;31m                    {[0m[1;33m:name[0m orchestra.core,
[1;33m                     :publics[0m [1;31m[[0m[1;31m{[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0m& args[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Defines a function and the associated spec.\n\nExample usage:\n(defn-spec str->kw keyword?\n  [s string?]\n   (keyword s))\n\nMultiple arities are also supported:\n(defn-spec inc' number?\n  ([a number?]\n   (inc' a 1))\n  ([a number?, n number?]\n   (+ a n)))"[0m,
[1;33m                                :file[0m [30;41m-"/var/folders/8g/glv37m8n73gf4x0fqy5whqjc0000gn/T/cljdoc-orchestra-2018.11.07-17613119870463695882/contents/orchestra/core.cljc"[0m
[30;42m                                      +"orchestra/core.cljc"[0m,
[1;33m                                :line[0m [36m4[0m,
[1;33m                                :name[0m defn-spec,
[1;33m                                :type[0m [1;33m:macro[0m[1;31m}[0m[1;31m][0m[1;31m}[0m
[1;31m                    {[0m[1;33m:name[0m orchestra.detail,
[1;33m                     :publics[0m [1;31m([0m[1;31m{[0m[1;33m:dynamic[0m [1;36mtrue[0m,
[1;33m                                :file[0m [1;35m"orchestra/detail.cljc"[0m,
[1;33m                                :line[0m [36m64[0m,
[1;33m                                :name[0m *cljs?*,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0midx arg[1;31m][0m[1;31m)[0m,
[1;33m                                :doc[0m [1;35m"Converts are argument to a keyword. Arguments may use destructuring, so they\nmay not be a symbol. In that case, just fill in something helpful."[0m,
[1;33m                                :file[0m [1;35m"orchestra/detail.cljc"[0m,
[1;33m                                :line[0m [36m125[0m,
[1;33m                                :name[0m arg->kw,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mconformed-arities exploded-arities[1;31m][0m[1;31m)[0m,
[1;33m                                :file[0m [1;35m"orchestra/detail.cljc"[0m,
[1;33m                                :line[0m [36m141[0m,
[1;33m                                :name[0m build-args-spec,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0marity-arg-names arity-specs[1;31m][0m[1;31m)[0m,
[1;33m                                :file[0m [1;35m"orchestra/detail.cljc"[0m,
[1;33m                                :line[0m [36m133[0m,
[1;33m                                :name[0m build-cat,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0m& args[1;31m][0m[1;31m)[0m,
[1;33m                                :file[0m [1;35m"orchestra/detail.cljc"[0m,
[1;33m                                :line[0m [36m178[0m,
[1;33m                                :name[0m defn-spec-helper,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0marity[1;31m][0m[1;31m)[0m,
[1;33m                                :doc[0m [1;35m"Strips the specs from the arity's args and gets it ready for consumption.\nDoes the job of s/unform, since s/unform doesn't do its job well."[0m,
[1;33m                                :file[0m [1;35m"orchestra/detail.cljc"[0m,
[1;33m                                :line[0m [36m92[0m,
[1;33m                                :name[0m explode-arity,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0m& args[1;31m][0m[1;31m)[0m,
[1;33m                                :doc[0m [1;35m"Takes in the variadic values of a defn-spec and returns a map of the\nvarious parts. Handles multiple arities and optional doc strings."[0m,
[1;33m                                :file[0m [1;35m"orchestra/detail.cljc"[0m,
[1;33m                                :line[0m [36m158[0m,
[1;33m                                :name[0m explode-def,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0marity[1;31m][0m[1;31m)[0m,
[1;33m                                :doc[0m [1;35m"Returns a sequence of specs, based on the arity's args.\n"[0m,
[1;33m                                :file[0m [1;35m"orchestra/detail.cljc"[0m,
[1;33m                                :line[0m [36m109[0m,
[1;33m                                :name[0m extract-arg-specs,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[][0m[1;31m)[0m,
[1;33m                                :file[0m [1;35m"orchestra/detail.cljc"[0m,
[1;33m                                :line[0m [36m66[0m,
[1;33m                                :name[0m get-global-defn,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0marg-count[1;31m][0m[1;31m)[0m,
[1;33m                                :file[0m [1;35m"orchestra/detail.cljc"[0m,
[1;33m                                :line[0m [36m137[0m,
[1;33m                                :name[0m name-arity,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0m[1;31m{[0m[1;33m:keys[0m [1;31m[[0m[1;33m:orchestra.detail/exploded-args[0m
[1;33m                                                    :orchestra.detail/exploded-body[0m[1;31m][0m[1;31m}[0m[1;31m][0m[1;31m)[0m,
[1;33m                                :doc[0m [1;35m"Turns an exploded arity into something which defn can consume.\n"[0m,
[1;33m                                :file[0m [1;35m"orchestra/detail.cljc"[0m,
[1;33m                                :line[0m [36m104[0m,
[1;33m                                :name[0m render-arity,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0m[1;31m[[0mkind value[1;31m][0m[1;31m][0m[1;31m)[0m,
[1;33m                                :doc[0m [1;35m"Doing the job of unform, since it turns destructured sequences into lists.\n'cause it's silly."[0m,
[1;33m                                :file[0m [1;35m"orchestra/detail.cljc"[0m,
[1;33m                                :line[0m [36m83[0m,
[1;33m                                :name[0m render-binding,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mfn-name[1;31m][0m[1;31m)[0m,
[1;33m                                :file[0m [1;35m"orchestra/detail.cljc"[0m,
[1;33m                                :line[0m [36m69[0m,
[1;33m                                :name[0m spec-fn,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m[1;31m)[0m[1;31m}[0m[1;31m][0m[1;31m}[0m,
[1;33m :artifact-id[0m [1;35m"orchestra"[0m,
[1;33m :group-id[0m [1;35m"orchestra"[0m,
[1;33m :pom-str[0m [1;35m"<?xml version=\"1.0\" encoding=\"UTF-8\"?><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>orchestra</groupId>\n  <artifactId>orchestra</artifactId>\n  <packaging>jar</packaging>\n  <version>2018.11.07-1</version>\n  <name>orchestra</name>\n  <description>Complete instrumentation for clojure.spec</description>\n  <url>https://github.com/jeaye/orchestra</url>\n  <licenses>\n    <license>\n      <name>Eclipse Public License</name>\n      <url>http://www.eclipse.org/legal/epl-v10.html</url>\n    </license>\n  </licenses>\n  <scm>\n    <url>https://github.com/jeaye/orchestra</url>\n    <connection>scm:git:git://github.com/jeaye/orchestra.git</connection>\n    <developerConnection>scm:git:ssh://git@github.com/jeaye/orchestra.git</developerConnection>\n    <tag>bd51ccac3e56c88cd4f516076df5ef1f2a500671</tag>\n  </scm>\n  <build>\n    <sourceDirectory>src/clj</sourceDirectory>\n    <testSourceDirectory>test</testSourceDirectory>\n    <resources>\n      <resource>\n        <directory>resources</directory>\n      </resource>\n    </resources>\n    <testResources>\n      <testResource>\n        <directory>resources</directory>\n      </testResource>\n    </testResources>\n    <directory>target</directory>\n    <outputDirectory>target/classes</outputDirectory>\n    <plugins>\n      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>build-helper-maven-plugin</artifactId>\n        <version>1.7</version>\n        <executions>\n          <execution>\n            <id>add-source</id>\n            <phase>generate-sources</phase>\n            <goals>\n              <goal>add-source</goal>\n            </goals>\n            <configuration>\n              <sources>\n                <source>src/cljc</source>\n                <source>src/cljs</source>\n              </sources>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n  <repositories>\n    <repository>\n      <id>central</id>\n      <url>https://repo1.maven.org/maven2/</url>\n      <snapshots>\n        <enabled>false</enabled>\n      </snapshots>\n      <releases>\n        <enabled>true</enabled>\n      </releases>\n    </repository>\n    <repository>\n      <id>clojars</id>\n      <url>https://repo.clojars.org/</url>\n      <snapshots>\n        <enabled>true</enabled>\n      </snapshots>\n      <releases>\n        <enabled>true</enabled>\n      </releases>\n    </repository>\n  </repositories>\n  <dependencyManagement>\n    <dependencies/>\n  </dependencyManagement>\n  <dependencies>\n    <dependency>\n      <groupId>org.clojure</groupId>\n      <artifactId>clojure</artifactId>\n      <version>1.9.0</version>\n      <scope>provided</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.clojure</groupId>\n      <artifactId>clojurescript</artifactId>\n      <version>1.10.439</version>\n      <scope>provided</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.clojure</groupId>\n      <artifactId>spec.alpha</artifactId>\n      <version>0.2.176</version>\n      <scope>provided</scope>\n    </dependency>\n    <dependency>\n      <groupId>lein-doo</groupId>\n      <artifactId>lein-doo</artifactId>\n      <version>0.1.10</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n</project>\n\n<!-- This file was autogenerated by Leiningen.\n  Please do not edit it directly; instead edit project.clj and regenerate it.\n  It should not be considered canonical data. For more information see\n  https://github.com/technomancy/leiningen -->\n"[0m,
[1;33m :version[0m [1;35m"2018.11.07-1"[0m[1;31m}[0m
