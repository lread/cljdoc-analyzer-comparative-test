{:group-id "lilactown", :artifact-id "hx", :version "0.5.2", :analysis {"clj" ({:name hx.hiccup, :publics ({:name array?, :file "hx/hiccup.cljc", :line 48, :arglists ([x]), :type :var} {:name ex, :file "hx/hiccup.cljc", :line 51, :arglists ([s]), :type :var} {:name extend-tag, :file "hx/hiccup.cljc", :line 12, :arglists ([tag impl]), :type :var} {:name IElement, :file "hx/hiccup.cljc", :line 5, :type :protocol, :members ({:name -as-element, :arglists ([el config]), :doc "Converts to an element\n", :type :var})} {:name make-element, :file "hx/hiccup.cljc", :line 38, :arglists ([config el args]), :type :var} {:name parse, :file "hx/hiccup.cljc", :line 43, :arglists ([config hiccup]), :type :var} {:name parse-tag, :file "hx/hiccup.cljc", :line 32, :arglists ([el]), :type :var} {:name tag->impl, :file "hx/hiccup.cljc", :line 15, :arglists ([tag]), :type :var} {:name tag-registry, :file "hx/hiccup.cljc", :line 10, :type :var})} {:name hx.hooks.alpha, :publics ({:name useSmartEffect, :file "hx/hooks/alpha.clj", :line 19, :arglists ([& body]), :type :macro} {:name useSmartLayoutEffect, :file "hx/hooks/alpha.clj", :line 25, :arglists ([& body]), :type :macro} {:name useSmartMemo, :file "hx/hooks/alpha.clj", :line 31, :arglists ([& body]), :type :macro})} {:name hx.react, :publics ({:name defcomponent, :file "hx/react.clj", :line 3, :arglists ([display-name constructor & body]), :type :macro} {:name defnc, :file "hx/react.clj", :line 57, :arglists ([display-name props-bindings & body]), :type :macro} {:name fnc, :file "hx/react.clj", :line 54, :arglists ([display-name props-bindings & body]), :type :macro} {:name shallow-render, :file "hx/react.clj", :line 71, :arglists ([& body]), :type :macro})} {:name hx.utils, :publics ({:name *perf-debug?*, :file "hx/utils.clj", :line 3, :dynamic true, :type :var} {:name measure-perf, :file "hx/utils.clj", :line 5, :arglists ([tag form]), :type :macro})}), "cljs" ({:name frame.core, :publics ({:name <-dispatcher, :file "frame/core.cljs", :line 97, :arglists ([]), :type :var} {:name <-frame, :file "frame/core.cljs", :line 101, :arglists ([]), :type :var} {:name <-reg-event, :file "frame/core.cljs", :line 91, :arglists ([id h]), :type :var} {:name <-reg-sub, :file "frame/core.cljs", :line 61, :arglists ([id h]), :type :var} {:name <-sub, :file "frame/core.cljs", :line 67, :arglists ([id]), :type :var} {:name frame-context, :file "frame/core.cljs", :line 38, :type :var} {:name Provider, :file "frame/core.cljs", :line 40, :type :var})} {:name hx.hiccup, :publics ({:name ex, :file "hx/hiccup.cljc", :line 51, :arglists ([s]), :type :var} {:name extend-tag, :file "hx/hiccup.cljc", :line 12, :arglists ([tag impl]), :type :var} {:name IElement, :file "hx/hiccup.cljc", :line 5, :type :protocol, :members ({:name -as-element, :arglists ([el config]), :doc "Converts to an element\n", :type :var})} {:name make-element, :file "hx/hiccup.cljc", :line 38, :arglists ([config el args]), :type :var} {:name parse, :file "hx/hiccup.cljc", :line 43, :arglists ([config hiccup]), :type :var} {:name parse-tag, :file "hx/hiccup.cljc", :line 32, :arglists ([el]), :type :var} {:name tag->impl, :file "hx/hiccup.cljc", :line 15, :arglists ([tag]), :type :var} {:name tag-registry, :file "hx/hiccup.cljc", :line 10, :type :var})} {:name hx.hooks, :publics ({:name <-callback, :file "hx/hooks.cljs", :line 246, :deprecated "Use useCallback", :type :var} {:name <-context, :file "hx/hooks.cljs", :line 238, :doc "Just react/useContext\n", :deprecated "Use useContext", :type :var} {:name <-debug-value, :file "hx/hooks.cljs", :line 250, :doc "Just react/useDebugValue\n", :deprecated "Use useDebugValue", :type :var} {:name <-deref, :file "hx/hooks.cljs", :line 202, :arglists ([a]), :doc "Takes an atom. Returns the currently derefed value of the atom, and re-renders\nthe component on change.", :deprecated "Use useState", :type :var} {:name <-effect, :file "hx/hooks.cljs", :line 230, :deprecated "Use useEffect", :type :var} {:name <-imperative-handle, :file "hx/hooks.cljs", :line 248, :deprecated "Use useImperativeHandle", :type :var} {:name <-layout-effect, :file "hx/hooks.cljs", :line 254, :deprecated "Use useLayoutEffect", :type :var} {:name <-memo, :file "hx/hooks.cljs", :line 242, :doc "Just react/useMemo\n", :deprecated "Use useMemo", :type :var} {:name <-reducer, :file "hx/hooks.cljs", :line 232, :doc "Just react/useReducer.\n", :deprecated "Use useReducer", :type :var} {:name <-ref, :file "hx/hooks.cljs", :line 200, :deprecated "Use useIRef", :type :var} {:name <-state, :file "hx/hooks.cljs", :line 198, :deprecated "Use useState", :type :var} {:name <-value, :file "hx/hooks.cljs", :line 236, :deprecated "Use useValue", :type :var} {:name Atomified, :file "hx/hooks.cljs", :line 5, :type :var} {:name useCallback, :file "hx/hooks.cljs", :line 170, :arglists ([f] [f deps]), :doc "Just react/useCallback\n", :type :var} {:name useContext, :file "hx/hooks.cljs", :line 162, :doc "Just react/useContext\n", :type :var} {:name useDebugValue, :file "hx/hooks.cljs", :line 189, :doc "Just react/useDebugValue\n", :type :var} {:name useEffect, :file "hx/hooks.cljs", :line 155, :arglists ([f] [f deps]), :doc "Just react/useEffect\n", :type :var} {:name useImperativeHandle, :file "hx/hooks.cljs", :line 175, :arglists ([ref create-handle] [ref create-handle deps]), :doc "Just react/useImperativeHandle\n", :type :var} {:name useIRef, :file "hx/hooks.cljs", :line 80, :arglists ([initial]), :doc "Takes an initial value. Returns an atom that will _NOT_ re-render component\non change.", :type :var} {:name useLayoutEffect, :file "hx/hooks.cljs", :line 183, :arglists ([f] [f deps]), :doc "Just react/useLayoutEffect\n", :type :var} {:name useMemo, :file "hx/hooks.cljs", :line 166, :doc "Just react/useMemo\n", :type :var} {:name useReducer, :file "hx/hooks.cljs", :line 102, :arglists ([reducer init-state] [reducer init-state init]), :doc "Just react/useReducer.\n", :type :var} {:name useState, :file "hx/hooks.cljs", :line 31, :arglists ([initial] [initial eq?]), :doc "Like `React.useState`, but the update function returned can be used similar\nto `swap!`.\n\nExample:\n```\n(let [[state set-state] (useState {:count 0})]\n ;; ...\n (set-state update :count inc))\n```\n\nIf `eq?` is passed in, will use that function to determine whether to update\nthe React state. If it returns `true`, it will keep the old state, `false` it\nwill render with new state.", :type :var} {:name useValue, :file "hx/hooks.cljs", :line 128, :arglists ([x]), :doc "Caches `x`. When a new `x` is passed in, returns new `x` only if it is\nnot structurally equal to the previous `x`.\n\nUseful for optimizing `<-effect` et. al. when you have two values that might\nbe structurally equal by referentially different.", :type :var})} {:name hx.hooks.alpha, :publics ({:name states, :file "hx/hooks/alpha.cljs", :line 5, :type :var} {:name useReducerOnce, :file "hx/hooks/alpha.cljs", :line 29, :arglists ([reducer initial k]), :doc "Like useReducer, but maintains your state across hot-reloads. `k` is a globally\nunique key to ensure you always get the same state back.\n\nExample: `(useReducerOnce reducer initial ::counter)`", :type :var} {:name useSmartEffect, :file "hx/hooks/alpha.clj", :line 19, :arglists ([& body]), :type :macro} {:name useSmartLayoutEffect, :file "hx/hooks/alpha.clj", :line 25, :arglists ([& body]), :type :macro} {:name useSmartMemo, :file "hx/hooks/alpha.clj", :line 31, :arglists ([& body]), :type :macro} {:name useStateOnce, :file "hx/hooks/alpha.cljs", :line 7, :arglists ([initial k]), :doc "Like useState, but maintains your state across hot-reloads. `k` is a globally\nunique key to ensure you always get the same state back.\n\nExample: `(useStateOnce 0 ::counter)`", :type :var})} {:name hx.react, :publics ({:name $, :file "hx/react.cljs", :line 103, :arglists ([el & args]), :type :var} {:name assign-methods, :file "hx/react.cljs", :line 105, :arglists ([class method-map]), :type :var} {:name create-class, :file "hx/react.cljs", :line 112, :arglists ([super-class init-fn static-properties method-names]), :type :var} {:name create-component, :file "hx/react.cljs", :line 127, :arglists ([init-fn static-properties method-names]), :type :var} {:name create-context, :file "hx/react.cljs", :line 133, :doc "Just react/createContext\n", :type :var} {:name create-element, :file "hx/react.cljs", :line 25, :arglists ([config el args]), :type :var} {:name create-pure-component, :file "hx/react.cljs", :line 130, :arglists ([init-fn static-properties method-names]), :type :var} {:name defcomponent, :file "hx/react.clj", :line 3, :arglists ([display-name constructor & body]), :type :macro} {:name defnc, :file "hx/react.clj", :line 57, :arglists ([display-name props-bindings & body]), :type :macro} {:name f, :file "hx/react.cljs", :line 82, :arglists ([form]), :type :var} {:name factory, :file "hx/react.cljs", :line 137, :arglists ([component]), :doc "Takes a React component, and creates a function that returns\na new React element", :type :var} {:name fnc, :file "hx/react.clj", :line 54, :arglists ([display-name props-bindings & body]), :type :macro} {:name fragment, :file "hx/react.cljs", :line 90, :type :var} {:name parse-body, :file "hx/react.cljs", :line 85, :arglists ([body]), :type :var} {:name props->clj, :file "hx/react.cljs", :line 8, :type :var} {:name props=, :file "hx/react.cljs", :line 143, :arglists ([& {:keys [only except]}]), :doc "Takes two props objects, and returns true or false whether they are\nstructurally equal. Use with react/memo.", :type :var} {:name Provider, :file "hx/react.cljs", :line 94, :type :var} {:name react-hiccup-config, :file "hx/react.cljs", :line 77, :type :var} {:name shallow-render, :file "hx/react.clj", :line 71, :arglists ([& body]), :type :macro})} {:name hx.utils, :publics ({:name clj->props, :file "hx/utils.cljs", :line 104, :arglists ([props] [props native?]), :doc "Shallowly converts props map to a JS obj. Handles certain special cases:\n\n1. `:class` -> \"className\", and joins collections together as a string\n2. `:for` -> \"htmlFor\"\n3. `:style` -> deeply converts this prop to a JS obj\n\nBy default, converts kebab-case keys to camelCase strings. pass in `false`\nas a second arg to disable this.", :type :var} {:name keyword->str, :file "hx/utils.cljs", :line 5, :arglists ([k]), :type :var} {:name props->clj, :file "hx/utils.cljs", :line 14, :arglists ([props]), :type :var})})}, :pom-str "<?xml version=\"1.0\" encoding=\"UTF-8\"?><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>lilactown</groupId>\n  <artifactId>hx</artifactId>\n  <packaging>jar</packaging>\n  <version>0.5.2</version>\n  <name>hx</name>\n  <description>An easy to use, decomplected hiccup compiler for ClojureScript &amp; React.</description>\n  <url>https://github.com/Lokeh/hx</url>\n  <licenses>\n    <license>\n      <name>Eclipse Public License</name>\n      <url>http://www.eclipse.org/legal/epl-v10.html</url>\n    </license>\n  </licenses>\n  <scm>\n    <url>https://github.com/Lokeh/hx</url>\n    <connection>scm:git:git://github.com/Lokeh/hx.git</connection>\n    <developerConnection>scm:git:ssh://git@github.com/Lokeh/hx.git</developerConnection>\n    <tag>79e2b8f69ad72a037f74e15894598f9a762d5a30</tag>\n  </scm>\n  <build>\n    <sourceDirectory>src</sourceDirectory>\n    <testSourceDirectory>test</testSourceDirectory>\n    <resources>\n      <resource>\n        <directory>resources</directory>\n      </resource>\n    </resources>\n    <testResources>\n      <testResource>\n        <directory>resources</directory>\n      </testResource>\n    </testResources>\n    <directory>target</directory>\n    <outputDirectory>target/classes</outputDirectory>\n    <plugins/>\n  </build>\n  <repositories>\n    <repository>\n      <id>central</id>\n      <url>https://repo1.maven.org/maven2/</url>\n      <snapshots>\n        <enabled>false</enabled>\n      </snapshots>\n      <releases>\n        <enabled>true</enabled>\n      </releases>\n    </repository>\n    <repository>\n      <id>clojars</id>\n      <url>https://repo.clojars.org/</url>\n      <snapshots>\n        <enabled>true</enabled>\n      </snapshots>\n      <releases>\n        <enabled>true</enabled>\n      </releases>\n    </repository>\n  </repositories>\n  <dependencyManagement>\n    <dependencies/>\n  </dependencyManagement>\n  <dependencies/>\n</project>\n\n<!-- This file was autogenerated by Leiningen.\n  Please do not edit it directly; instead edit project.clj and regenerate it.\n  It should not be considered canonical data. For more information see\n  https://github.com/technomancy/leiningen -->\n"}