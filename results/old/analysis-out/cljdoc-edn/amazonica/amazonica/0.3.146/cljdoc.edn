{:group-id "amazonica", :artifact-id "amazonica", :version "0.3.146", :codox {"clj" [{:name amazonica.aws.secretsmanager, :publics ({:name cancel-rotate-secret, :arglists ([cancel-rotate-secret-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-secret, :arglists ([create-secret-request]), :type :var, :members ()} {:name delete-resource-policy, :arglists ([delete-resource-policy-request]), :type :var, :members ()} {:name delete-secret, :arglists ([delete-secret-request]), :type :var, :members ()} {:name describe-secret, :arglists ([describe-secret-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-random-password, :arglists ([get-random-password-request]), :type :var, :members ()} {:name get-resource-policy, :arglists ([get-resource-policy-request]), :type :var, :members ()} {:name get-secret-value, :arglists ([get-secret-value-request]), :type :var, :members ()} {:name list-secret-version-ids, :arglists ([list-secret-version-ids-request]), :type :var, :members ()} {:name list-secrets, :arglists ([list-secrets-request]), :type :var, :members ()} {:name put-resource-policy, :arglists ([put-resource-policy-request]), :type :var, :members ()} {:name put-secret-value, :arglists ([put-secret-value-request]), :type :var, :members ()} {:name restore-secret, :arglists ([restore-secret-request]), :type :var, :members ()} {:name rotate-secret, :arglists ([rotate-secret-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-secret, :arglists ([update-secret-request]), :type :var, :members ()} {:name update-secret-version-stage, :arglists ([update-secret-version-stage-request]), :type :var, :members ()})} {:name amazonica.aws.route53domains, :publics ({:name check-domain-availability, :arglists ([check-domain-availability-request]), :type :var, :members ()} {:name check-domain-transferability, :arglists ([check-domain-transferability-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name delete-tags-for-domain, :arglists ([delete-tags-for-domain-request]), :type :var, :members ()} {:name disable-domain-auto-renew, :arglists ([disable-domain-auto-renew-request]), :type :var, :members ()} {:name disable-domain-transfer-lock, :arglists ([disable-domain-transfer-lock-request]), :type :var, :members ()} {:name enable-domain-auto-renew, :arglists ([enable-domain-auto-renew-request]), :type :var, :members ()} {:name enable-domain-transfer-lock, :arglists ([enable-domain-transfer-lock-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-contact-reachability-status, :arglists ([get-contact-reachability-status-request]), :type :var, :members ()} {:name get-domain-detail, :arglists ([get-domain-detail-request]), :type :var, :members ()} {:name get-domain-suggestions, :arglists ([get-domain-suggestions-request]), :type :var, :members ()} {:name get-operation-detail, :arglists ([get-operation-detail-request]), :type :var, :members ()} {:name list-domains, :arglists ([] [list-domains-request]), :type :var, :members ()} {:name list-operations, :arglists ([] [list-operations-request]), :type :var, :members ()} {:name list-tags-for-domain, :arglists ([list-tags-for-domain-request]), :type :var, :members ()} {:name register-domain, :arglists ([register-domain-request]), :type :var, :members ()} {:name renew-domain, :arglists ([renew-domain-request]), :type :var, :members ()} {:name resend-contact-reachability-email, :arglists ([resend-contact-reachability-email-request]), :type :var, :members ()} {:name retrieve-domain-auth-code, :arglists ([retrieve-domain-auth-code-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name transfer-domain, :arglists ([transfer-domain-request]), :type :var, :members ()} {:name update-domain-contact, :arglists ([update-domain-contact-request]), :type :var, :members ()} {:name update-domain-contact-privacy, :arglists ([update-domain-contact-privacy-request]), :type :var, :members ()} {:name update-domain-nameservers, :arglists ([update-domain-nameservers-request]), :type :var, :members ()} {:name update-tags-for-domain, :arglists ([update-tags-for-domain-request]), :type :var, :members ()} {:name view-billing, :arglists ([view-billing-request]), :type :var, :members ()})} {:name amazonica.aws.applicationautoscaling, :publics ({:name client-class, :type :var, :members ()} {:name delete-scaling-policy, :arglists ([delete-scaling-policy-request]), :type :var, :members ()} {:name delete-scheduled-action, :arglists ([delete-scheduled-action-request]), :type :var, :members ()} {:name deregister-scalable-target, :arglists ([deregister-scalable-target-request]), :type :var, :members ()} {:name describe-scalable-targets, :arglists ([describe-scalable-targets-request]), :type :var, :members ()} {:name describe-scaling-activities, :arglists ([describe-scaling-activities-request]), :type :var, :members ()} {:name describe-scaling-policies, :arglists ([describe-scaling-policies-request]), :type :var, :members ()} {:name describe-scheduled-actions, :arglists ([describe-scheduled-actions-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name put-scaling-policy, :arglists ([put-scaling-policy-request]), :type :var, :members ()} {:name put-scheduled-action, :arglists ([put-scheduled-action-request]), :type :var, :members ()} {:name register-scalable-target, :arglists ([register-scalable-target-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()})} {:name amazonica.aws.codestar, :publics ({:name associate-team-member, :arglists ([associate-team-member-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-project, :arglists ([create-project-request]), :type :var, :members ()} {:name create-user-profile, :arglists ([create-user-profile-request]), :type :var, :members ()} {:name delete-project, :arglists ([delete-project-request]), :type :var, :members ()} {:name delete-user-profile, :arglists ([delete-user-profile-request]), :type :var, :members ()} {:name describe-project, :arglists ([describe-project-request]), :type :var, :members ()} {:name describe-user-profile, :arglists ([describe-user-profile-request]), :type :var, :members ()} {:name disassociate-team-member, :arglists ([disassociate-team-member-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name list-projects, :arglists ([list-projects-request]), :type :var, :members ()} {:name list-resources, :arglists ([list-resources-request]), :type :var, :members ()} {:name list-tags-for-project, :arglists ([list-tags-for-project-request]), :type :var, :members ()} {:name list-team-members, :arglists ([list-team-members-request]), :type :var, :members ()} {:name list-user-profiles, :arglists ([list-user-profiles-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name tag-project, :arglists ([tag-project-request]), :type :var, :members ()} {:name untag-project, :arglists ([untag-project-request]), :type :var, :members ()} {:name update-project, :arglists ([update-project-request]), :type :var, :members ()} {:name update-team-member, :arglists ([update-team-member-request]), :type :var, :members ()} {:name update-user-profile, :arglists ([update-user-profile-request]), :type :var, :members ()})} {:name amazonica.aws.organizations, :publics ({:name accept-handshake, :arglists ([accept-handshake-request]), :type :var, :members ()} {:name attach-policy, :arglists ([attach-policy-request]), :type :var, :members ()} {:name cancel-handshake, :arglists ([cancel-handshake-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-account, :arglists ([create-account-request]), :type :var, :members ()} {:name create-gov-cloud-account, :arglists ([create-gov-cloud-account-request]), :type :var, :members ()} {:name create-organization, :arglists ([create-organization-request]), :type :var, :members ()} {:name create-organizational-unit, :arglists ([create-organizational-unit-request]), :type :var, :members ()} {:name create-policy, :arglists ([create-policy-request]), :type :var, :members ()} {:name decline-handshake, :arglists ([decline-handshake-request]), :type :var, :members ()} {:name delete-organization, :arglists ([delete-organization-request]), :type :var, :members ()} {:name delete-organizational-unit, :arglists ([delete-organizational-unit-request]), :type :var, :members ()} {:name delete-policy, :arglists ([delete-policy-request]), :type :var, :members ()} {:name describe-account, :arglists ([describe-account-request]), :type :var, :members ()} {:name describe-create-account-status, :arglists ([describe-create-account-status-request]), :type :var, :members ()} {:name describe-handshake, :arglists ([describe-handshake-request]), :type :var, :members ()} {:name describe-organization, :arglists ([describe-organization-request]), :type :var, :members ()} {:name describe-organizational-unit, :arglists ([describe-organizational-unit-request]), :type :var, :members ()} {:name describe-policy, :arglists ([describe-policy-request]), :type :var, :members ()} {:name detach-policy, :arglists ([detach-policy-request]), :type :var, :members ()} {:name disable-aws-service-access, :arglists ([disable-awsservice-access-request]), :type :var, :members ()} {:name disable-awsservice-access, :arglists ([disable-awsservice-access-request]), :type :var, :members ()} {:name disable-policy-type, :arglists ([disable-policy-type-request]), :type :var, :members ()} {:name enable-all-features, :arglists ([enable-all-features-request]), :type :var, :members ()} {:name enable-aws-service-access, :arglists ([enable-awsservice-access-request]), :type :var, :members ()} {:name enable-awsservice-access, :arglists ([enable-awsservice-access-request]), :type :var, :members ()} {:name enable-policy-type, :arglists ([enable-policy-type-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name invite-account-to-organization, :arglists ([invite-account-to-organization-request]), :type :var, :members ()} {:name leave-organization, :arglists ([leave-organization-request]), :type :var, :members ()} {:name list-accounts, :arglists ([list-accounts-request]), :type :var, :members ()} {:name list-accounts-for-parent, :arglists ([list-accounts-for-parent-request]), :type :var, :members ()} {:name list-aws-service-access-for-organization, :arglists ([list-awsservice-access-for-organization-request]), :type :var, :members ()} {:name list-awsservice-access-for-organization, :arglists ([list-awsservice-access-for-organization-request]), :type :var, :members ()} {:name list-children, :arglists ([list-children-request]), :type :var, :members ()} {:name list-create-account-status, :arglists ([list-create-account-status-request]), :type :var, :members ()} {:name list-handshakes-for-account, :arglists ([list-handshakes-for-account-request]), :type :var, :members ()} {:name list-handshakes-for-organization, :arglists ([list-handshakes-for-organization-request]), :type :var, :members ()} {:name list-organizational-units-for-parent, :arglists ([list-organizational-units-for-parent-request]), :type :var, :members ()} {:name list-parents, :arglists ([list-parents-request]), :type :var, :members ()} {:name list-policies, :arglists ([list-policies-request]), :type :var, :members ()} {:name list-policies-for-target, :arglists ([list-policies-for-target-request]), :type :var, :members ()} {:name list-roots, :arglists ([list-roots-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name list-targets-for-policy, :arglists ([list-targets-for-policy-request]), :type :var, :members ()} {:name move-account, :arglists ([move-account-request]), :type :var, :members ()} {:name remove-account-from-organization, :arglists ([remove-account-from-organization-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-organizational-unit, :arglists ([update-organizational-unit-request]), :type :var, :members ()} {:name update-policy, :arglists ([update-policy-request]), :type :var, :members ()})} {:name amazonica.aws.mediaconvert, :publics ({:name associate-certificate, :arglists ([associate-certificate-request]), :type :var, :members ()} {:name cancel-job, :arglists ([cancel-job-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-job, :arglists ([create-job-request]), :type :var, :members ()} {:name create-job-template, :arglists ([create-job-template-request]), :type :var, :members ()} {:name create-preset, :arglists ([create-preset-request]), :type :var, :members ()} {:name create-queue, :arglists ([create-queue-request]), :type :var, :members ()} {:name delete-job-template, :arglists ([delete-job-template-request]), :type :var, :members ()} {:name delete-preset, :arglists ([delete-preset-request]), :type :var, :members ()} {:name delete-queue, :arglists ([delete-queue-request]), :type :var, :members ()} {:name describe-endpoints, :arglists ([describe-endpoints-request]), :type :var, :members ()} {:name disassociate-certificate, :arglists ([disassociate-certificate-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-job, :arglists ([get-job-request]), :type :var, :members ()} {:name get-job-template, :arglists ([get-job-template-request]), :type :var, :members ()} {:name get-preset, :arglists ([get-preset-request]), :type :var, :members ()} {:name get-queue, :arglists ([get-queue-request]), :type :var, :members ()} {:name list-job-templates, :arglists ([list-job-templates-request]), :type :var, :members ()} {:name list-jobs, :arglists ([list-jobs-request]), :type :var, :members ()} {:name list-presets, :arglists ([list-presets-request]), :type :var, :members ()} {:name list-queues, :arglists ([list-queues-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-job-template, :arglists ([update-job-template-request]), :type :var, :members ()} {:name update-preset, :arglists ([update-preset-request]), :type :var, :members ()} {:name update-queue, :arglists ([update-queue-request]), :type :var, :members ()})} {:name amazonica.aws.elasticfilesystem, :publics ({:name client-class, :type :var, :members ()} {:name create-file-system, :arglists ([create-file-system-request]), :type :var, :members ()} {:name create-mount-target, :arglists ([create-mount-target-request]), :type :var, :members ()} {:name create-tags, :arglists ([create-tags-request]), :type :var, :members ()} {:name delete-file-system, :arglists ([delete-file-system-request]), :type :var, :members ()} {:name delete-mount-target, :arglists ([delete-mount-target-request]), :type :var, :members ()} {:name delete-tags, :arglists ([delete-tags-request]), :type :var, :members ()} {:name describe-file-systems, :arglists ([] [describe-file-systems-request]), :type :var, :members ()} {:name describe-lifecycle-configuration, :arglists ([describe-lifecycle-configuration-request]), :type :var, :members ()} {:name describe-mount-target-security-groups, :arglists ([describe-mount-target-security-groups-request]), :type :var, :members ()} {:name describe-mount-targets, :arglists ([describe-mount-targets-request]), :type :var, :members ()} {:name describe-tags, :arglists ([describe-tags-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name modify-mount-target-security-groups, :arglists ([modify-mount-target-security-groups-request]), :type :var, :members ()} {:name put-lifecycle-configuration, :arglists ([put-lifecycle-configuration-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name update-file-system, :arglists ([update-file-system-request]), :type :var, :members ()})} {:name amazonica.aws.simpledb, :publics ({:name batch-delete-attributes, :arglists ([batch-delete-attributes-request]), :type :var, :members ()} {:name batch-put-attributes, :arglists ([batch-put-attributes-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-domain, :arglists ([create-domain-request]), :type :var, :members ()} {:name delete-attributes, :arglists ([delete-attributes-request]), :type :var, :members ()} {:name delete-domain, :arglists ([delete-domain-request]), :type :var, :members ()} {:name domain-metadata, :arglists ([domain-metadata-request]), :type :var, :members ()} {:name get-attributes, :arglists ([get-attributes-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name list-domains, :arglists ([] [list-domains-request]), :type :var, :members ()} {:name put-attributes, :arglists ([put-attributes-request]), :type :var, :members ()} {:name select, :arglists ([select-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()})} {:name amazonica.aws.servermigration, :publics ({:name client-class, :type :var, :members ()} {:name create-app, :arglists ([create-app-request]), :type :var, :members ()} {:name create-replication-job, :arglists ([create-replication-job-request]), :type :var, :members ()} {:name delete-app, :arglists ([delete-app-request]), :type :var, :members ()} {:name delete-app-launch-configuration, :arglists ([delete-app-launch-configuration-request]), :type :var, :members ()} {:name delete-app-replication-configuration, :arglists ([delete-app-replication-configuration-request]), :type :var, :members ()} {:name delete-replication-job, :arglists ([delete-replication-job-request]), :type :var, :members ()} {:name delete-server-catalog, :arglists ([delete-server-catalog-request]), :type :var, :members ()} {:name disassociate-connector, :arglists ([disassociate-connector-request]), :type :var, :members ()} {:name generate-change-set, :arglists ([generate-change-set-request]), :type :var, :members ()} {:name generate-template, :arglists ([generate-template-request]), :type :var, :members ()} {:name get-app, :arglists ([get-app-request]), :type :var, :members ()} {:name get-app-launch-configuration, :arglists ([get-app-launch-configuration-request]), :type :var, :members ()} {:name get-app-replication-configuration, :arglists ([get-app-replication-configuration-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-connectors, :arglists ([get-connectors-request]), :type :var, :members ()} {:name get-replication-jobs, :arglists ([get-replication-jobs-request]), :type :var, :members ()} {:name get-replication-runs, :arglists ([get-replication-runs-request]), :type :var, :members ()} {:name get-servers, :arglists ([get-servers-request]), :type :var, :members ()} {:name import-server-catalog, :arglists ([import-server-catalog-request]), :type :var, :members ()} {:name launch-app, :arglists ([launch-app-request]), :type :var, :members ()} {:name list-apps, :arglists ([list-apps-request]), :type :var, :members ()} {:name put-app-launch-configuration, :arglists ([put-app-launch-configuration-request]), :type :var, :members ()} {:name put-app-replication-configuration, :arglists ([put-app-replication-configuration-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name start-app-replication, :arglists ([start-app-replication-request]), :type :var, :members ()} {:name start-on-demand-replication-run, :arglists ([start-on-demand-replication-run-request]), :type :var, :members ()} {:name stop-app-replication, :arglists ([stop-app-replication-request]), :type :var, :members ()} {:name terminate-app, :arglists ([terminate-app-request]), :type :var, :members ()} {:name update-app, :arglists ([update-app-request]), :type :var, :members ()} {:name update-replication-job, :arglists ([update-replication-job-request]), :type :var, :members ()})} {:name amazonica.aws.pinpoint, :publics ({:name client-class, :type :var, :members ()} {:name create-app, :arglists ([create-app-request]), :type :var, :members ()} {:name create-campaign, :arglists ([create-campaign-request]), :type :var, :members ()} {:name create-export-job, :arglists ([create-export-job-request]), :type :var, :members ()} {:name create-import-job, :arglists ([create-import-job-request]), :type :var, :members ()} {:name create-segment, :arglists ([create-segment-request]), :type :var, :members ()} {:name delete-adm-channel, :arglists ([delete-adm-channel-request]), :type :var, :members ()} {:name delete-apns-channel, :arglists ([delete-apns-channel-request]), :type :var, :members ()} {:name delete-apns-sandbox-channel, :arglists ([delete-apns-sandbox-channel-request]), :type :var, :members ()} {:name delete-apns-voip-channel, :arglists ([delete-apns-voip-channel-request]), :type :var, :members ()} {:name delete-apns-voip-sandbox-channel, :arglists ([delete-apns-voip-sandbox-channel-request]), :type :var, :members ()} {:name delete-app, :arglists ([delete-app-request]), :type :var, :members ()} {:name delete-baidu-channel, :arglists ([delete-baidu-channel-request]), :type :var, :members ()} {:name delete-campaign, :arglists ([delete-campaign-request]), :type :var, :members ()} {:name delete-email-channel, :arglists ([delete-email-channel-request]), :type :var, :members ()} {:name delete-endpoint, :arglists ([delete-endpoint-request]), :type :var, :members ()} {:name delete-event-stream, :arglists ([delete-event-stream-request]), :type :var, :members ()} {:name delete-gcm-channel, :arglists ([delete-gcm-channel-request]), :type :var, :members ()} {:name delete-segment, :arglists ([delete-segment-request]), :type :var, :members ()} {:name delete-sms-channel, :arglists ([delete-sms-channel-request]), :type :var, :members ()} {:name delete-user-endpoints, :arglists ([delete-user-endpoints-request]), :type :var, :members ()} {:name delete-voice-channel, :arglists ([delete-voice-channel-request]), :type :var, :members ()} {:name get-adm-channel, :arglists ([get-adm-channel-request]), :type :var, :members ()} {:name get-apns-channel, :arglists ([get-apns-channel-request]), :type :var, :members ()} {:name get-apns-sandbox-channel, :arglists ([get-apns-sandbox-channel-request]), :type :var, :members ()} {:name get-apns-voip-channel, :arglists ([get-apns-voip-channel-request]), :type :var, :members ()} {:name get-apns-voip-sandbox-channel, :arglists ([get-apns-voip-sandbox-channel-request]), :type :var, :members ()} {:name get-app, :arglists ([get-app-request]), :type :var, :members ()} {:name get-application-date-range-kpi, :arglists ([get-application-date-range-kpi-request]), :type :var, :members ()} {:name get-application-settings, :arglists ([get-application-settings-request]), :type :var, :members ()} {:name get-apps, :arglists ([get-apps-request]), :type :var, :members ()} {:name get-baidu-channel, :arglists ([get-baidu-channel-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-campaign, :arglists ([get-campaign-request]), :type :var, :members ()} {:name get-campaign-activities, :arglists ([get-campaign-activities-request]), :type :var, :members ()} {:name get-campaign-date-range-kpi, :arglists ([get-campaign-date-range-kpi-request]), :type :var, :members ()} {:name get-campaign-version, :arglists ([get-campaign-version-request]), :type :var, :members ()} {:name get-campaign-versions, :arglists ([get-campaign-versions-request]), :type :var, :members ()} {:name get-campaigns, :arglists ([get-campaigns-request]), :type :var, :members ()} {:name get-channels, :arglists ([get-channels-request]), :type :var, :members ()} {:name get-email-channel, :arglists ([get-email-channel-request]), :type :var, :members ()} {:name get-endpoint, :arglists ([get-endpoint-request]), :type :var, :members ()} {:name get-event-stream, :arglists ([get-event-stream-request]), :type :var, :members ()} {:name get-export-job, :arglists ([get-export-job-request]), :type :var, :members ()} {:name get-export-jobs, :arglists ([get-export-jobs-request]), :type :var, :members ()} {:name get-gcm-channel, :arglists ([get-gcm-channel-request]), :type :var, :members ()} {:name get-import-job, :arglists ([get-import-job-request]), :type :var, :members ()} {:name get-import-jobs, :arglists ([get-import-jobs-request]), :type :var, :members ()} {:name get-segment, :arglists ([get-segment-request]), :type :var, :members ()} {:name get-segment-export-jobs, :arglists ([get-segment-export-jobs-request]), :type :var, :members ()} {:name get-segment-import-jobs, :arglists ([get-segment-import-jobs-request]), :type :var, :members ()} {:name get-segment-version, :arglists ([get-segment-version-request]), :type :var, :members ()} {:name get-segment-versions, :arglists ([get-segment-versions-request]), :type :var, :members ()} {:name get-segments, :arglists ([get-segments-request]), :type :var, :members ()} {:name get-sms-channel, :arglists ([get-sms-channel-request]), :type :var, :members ()} {:name get-user-endpoints, :arglists ([get-user-endpoints-request]), :type :var, :members ()} {:name get-voice-channel, :arglists ([get-voice-channel-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name phone-number-validate, :arglists ([phone-number-validate-request]), :type :var, :members ()} {:name put-event-stream, :arglists ([put-event-stream-request]), :type :var, :members ()} {:name put-events, :arglists ([put-events-request]), :type :var, :members ()} {:name remove-attributes, :arglists ([remove-attributes-request]), :type :var, :members ()} {:name send-messages, :arglists ([send-messages-request]), :type :var, :members ()} {:name send-users-messages, :arglists ([send-users-messages-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-adm-channel, :arglists ([update-adm-channel-request]), :type :var, :members ()} {:name update-apns-channel, :arglists ([update-apns-channel-request]), :type :var, :members ()} {:name update-apns-sandbox-channel, :arglists ([update-apns-sandbox-channel-request]), :type :var, :members ()} {:name update-apns-voip-channel, :arglists ([update-apns-voip-channel-request]), :type :var, :members ()} {:name update-apns-voip-sandbox-channel, :arglists ([update-apns-voip-sandbox-channel-request]), :type :var, :members ()} {:name update-application-settings, :arglists ([update-application-settings-request]), :type :var, :members ()} {:name update-baidu-channel, :arglists ([update-baidu-channel-request]), :type :var, :members ()} {:name update-campaign, :arglists ([update-campaign-request]), :type :var, :members ()} {:name update-email-channel, :arglists ([update-email-channel-request]), :type :var, :members ()} {:name update-endpoint, :arglists ([update-endpoint-request]), :type :var, :members ()} {:name update-endpoints-batch, :arglists ([update-endpoints-batch-request]), :type :var, :members ()} {:name update-gcm-channel, :arglists ([update-gcm-channel-request]), :type :var, :members ()} {:name update-segment, :arglists ([update-segment-request]), :type :var, :members ()} {:name update-sms-channel, :arglists ([update-sms-channel-request]), :type :var, :members ()} {:name update-voice-channel, :arglists ([update-voice-channel-request]), :type :var, :members ()})} {:name amazonica.aws.sagemaker-runtime, :publics ({:name client-class, :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name invoke-endpoint, :arglists ([invoke-endpoint-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()})} {:name amazonica.aws.importexport, :publics ({:name cancel-job, :arglists ([cancel-job-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-job, :arglists ([create-job-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-shipping-label, :arglists ([get-shipping-label-request]), :type :var, :members ()} {:name get-status, :arglists ([get-status-request]), :type :var, :members ()} {:name list-jobs, :arglists ([] [list-jobs-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name update-job, :arglists ([update-job-request]), :type :var, :members ()})} {:name amazonica.aws.databasemigrationservice, :publics ({:name add-tags-to-resource, :arglists ([add-tags-to-resource-request]), :type :var, :members ()} {:name apply-pending-maintenance-action, :arglists ([apply-pending-maintenance-action-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-endpoint, :arglists ([create-endpoint-request]), :type :var, :members ()} {:name create-event-subscription, :arglists ([create-event-subscription-request]), :type :var, :members ()} {:name create-replication-instance, :arglists ([create-replication-instance-request]), :type :var, :members ()} {:name create-replication-subnet-group, :arglists ([create-replication-subnet-group-request]), :type :var, :members ()} {:name create-replication-task, :arglists ([create-replication-task-request]), :type :var, :members ()} {:name delete-certificate, :arglists ([delete-certificate-request]), :type :var, :members ()} {:name delete-endpoint, :arglists ([delete-endpoint-request]), :type :var, :members ()} {:name delete-event-subscription, :arglists ([delete-event-subscription-request]), :type :var, :members ()} {:name delete-replication-instance, :arglists ([delete-replication-instance-request]), :type :var, :members ()} {:name delete-replication-subnet-group, :arglists ([delete-replication-subnet-group-request]), :type :var, :members ()} {:name delete-replication-task, :arglists ([delete-replication-task-request]), :type :var, :members ()} {:name describe-account-attributes, :arglists ([describe-account-attributes-request]), :type :var, :members ()} {:name describe-certificates, :arglists ([describe-certificates-request]), :type :var, :members ()} {:name describe-connections, :arglists ([describe-connections-request]), :type :var, :members ()} {:name describe-endpoint-types, :arglists ([describe-endpoint-types-request]), :type :var, :members ()} {:name describe-endpoints, :arglists ([describe-endpoints-request]), :type :var, :members ()} {:name describe-event-categories, :arglists ([describe-event-categories-request]), :type :var, :members ()} {:name describe-event-subscriptions, :arglists ([describe-event-subscriptions-request]), :type :var, :members ()} {:name describe-events, :arglists ([describe-events-request]), :type :var, :members ()} {:name describe-orderable-replication-instances, :arglists ([describe-orderable-replication-instances-request]), :type :var, :members ()} {:name describe-pending-maintenance-actions, :arglists ([describe-pending-maintenance-actions-request]), :type :var, :members ()} {:name describe-refresh-schemas-status, :arglists ([describe-refresh-schemas-status-request]), :type :var, :members ()} {:name describe-replication-instance-task-logs, :arglists ([describe-replication-instance-task-logs-request]), :type :var, :members ()} {:name describe-replication-instances, :arglists ([describe-replication-instances-request]), :type :var, :members ()} {:name describe-replication-subnet-groups, :arglists ([describe-replication-subnet-groups-request]), :type :var, :members ()} {:name describe-replication-task-assessment-results, :arglists ([describe-replication-task-assessment-results-request]), :type :var, :members ()} {:name describe-replication-tasks, :arglists ([describe-replication-tasks-request]), :type :var, :members ()} {:name describe-schemas, :arglists ([describe-schemas-request]), :type :var, :members ()} {:name describe-table-statistics, :arglists ([describe-table-statistics-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name import-certificate, :arglists ([import-certificate-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name modify-endpoint, :arglists ([modify-endpoint-request]), :type :var, :members ()} {:name modify-event-subscription, :arglists ([modify-event-subscription-request]), :type :var, :members ()} {:name modify-replication-instance, :arglists ([modify-replication-instance-request]), :type :var, :members ()} {:name modify-replication-subnet-group, :arglists ([modify-replication-subnet-group-request]), :type :var, :members ()} {:name modify-replication-task, :arglists ([modify-replication-task-request]), :type :var, :members ()} {:name reboot-replication-instance, :arglists ([reboot-replication-instance-request]), :type :var, :members ()} {:name refresh-schemas, :arglists ([refresh-schemas-request]), :type :var, :members ()} {:name reload-tables, :arglists ([reload-tables-request]), :type :var, :members ()} {:name remove-tags-from-resource, :arglists ([remove-tags-from-resource-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name shutdown, :arglists ([]), :type :var, :members ()} {:name start-replication-task, :arglists ([start-replication-task-request]), :type :var, :members ()} {:name start-replication-task-assessment, :arglists ([start-replication-task-assessment-request]), :type :var, :members ()} {:name stop-replication-task, :arglists ([stop-replication-task-request]), :type :var, :members ()} {:name test-connection, :arglists ([test-connection-request]), :type :var, :members ()} {:name waiters, :arglists ([]), :type :var, :members ()})} {:name amazonica.aws.lambda, :publics ({:name add-layer-version-permission, :arglists ([add-layer-version-permission-request]), :type :var, :members ()} {:name add-permission, :arglists ([add-permission-request]), :type :var, :members ()} {:name byte-buffer-zip-file, :file "amazonica/aws/lambda.clj", :line 8, :arglists ([function-name body]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-alias, :arglists ([create-alias-request]), :type :var, :members ()} {:name create-event-source-mapping, :arglists ([create-event-source-mapping-request]), :type :var, :members ()} {:name create-function, :arglists ([create-function-request]), :type :var, :members ()} {:name delete-alias, :arglists ([delete-alias-request]), :type :var, :members ()} {:name delete-event-source-mapping, :arglists ([delete-event-source-mapping-request]), :type :var, :members ()} {:name delete-function, :arglists ([delete-function-request]), :type :var, :members ()} {:name delete-function-concurrency, :arglists ([delete-function-concurrency-request]), :type :var, :members ()} {:name delete-layer-version, :arglists ([delete-layer-version-request]), :type :var, :members ()} {:name function-name, :file "amazonica/aws/lambda.clj", :line 17, :arglists ([node-fn]), :type :var, :members ()} {:name get-account-settings, :arglists ([get-account-settings-request]), :type :var, :members ()} {:name get-alias, :arglists ([get-alias-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-event-source-mapping, :arglists ([get-event-source-mapping-request]), :type :var, :members ()} {:name get-function, :arglists ([get-function-request]), :type :var, :members ()} {:name get-function-configuration, :arglists ([get-function-configuration-request]), :type :var, :members ()} {:name get-layer-version, :arglists ([get-layer-version-request]), :type :var, :members ()} {:name get-layer-version-by-arn, :arglists ([get-layer-version-by-arn-request]), :type :var, :members ()} {:name get-layer-version-policy, :arglists ([get-layer-version-policy-request]), :type :var, :members ()} {:name get-policy, :arglists ([get-policy-request]), :type :var, :members ()} {:name invoke, :arglists ([invoke-request]), :type :var, :members ()} {:name invoke-async, :arglists ([invoke-async-request]), :type :var, :members ()} {:name list-aliases, :arglists ([list-aliases-request]), :type :var, :members ()} {:name list-event-source-mappings, :arglists ([] [list-event-source-mappings-request]), :type :var, :members ()} {:name list-functions, :arglists ([] [list-functions-request]), :type :var, :members ()} {:name list-layer-versions, :arglists ([list-layer-versions-request]), :type :var, :members ()} {:name list-layers, :arglists ([list-layers-request]), :type :var, :members ()} {:name list-tags, :arglists ([list-tags-request]), :type :var, :members ()} {:name list-versions-by-function, :arglists ([list-versions-by-function-request]), :type :var, :members ()} {:name publish-layer-version, :arglists ([publish-layer-version-request]), :type :var, :members ()} {:name publish-version, :arglists ([publish-version-request]), :type :var, :members ()} {:name put-function-concurrency, :arglists ([put-function-concurrency-request]), :type :var, :members ()} {:name remove-layer-version-permission, :arglists ([remove-layer-version-permission-request]), :type :var, :members ()} {:name remove-permission, :arglists ([remove-permission-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name shutdown, :arglists ([]), :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-alias, :arglists ([update-alias-request]), :type :var, :members ()} {:name update-event-source-mapping, :arglists ([update-event-source-mapping-request]), :type :var, :members ()} {:name update-function-code, :arglists ([update-function-code-request]), :type :var, :members ()} {:name update-function-configuration, :arglists ([update-function-configuration-request]), :type :var, :members ()} {:name waiters, :arglists ([]), :type :var, :members ()})} {:name amazonica.aws.devicefarm, :publics ({:name client-class, :type :var, :members ()} {:name create-device-pool, :arglists ([create-device-pool-request]), :type :var, :members ()} {:name create-instance-profile, :arglists ([create-instance-profile-request]), :type :var, :members ()} {:name create-network-profile, :arglists ([create-network-profile-request]), :type :var, :members ()} {:name create-project, :arglists ([create-project-request]), :type :var, :members ()} {:name create-remote-access-session, :arglists ([create-remote-access-session-request]), :type :var, :members ()} {:name create-upload, :arglists ([create-upload-request]), :type :var, :members ()} {:name create-vpce-configuration, :arglists ([create-vpceconfiguration-request]), :type :var, :members ()} {:name create-vpceconfiguration, :arglists ([create-vpceconfiguration-request]), :type :var, :members ()} {:name delete-device-pool, :arglists ([delete-device-pool-request]), :type :var, :members ()} {:name delete-instance-profile, :arglists ([delete-instance-profile-request]), :type :var, :members ()} {:name delete-network-profile, :arglists ([delete-network-profile-request]), :type :var, :members ()} {:name delete-project, :arglists ([delete-project-request]), :type :var, :members ()} {:name delete-remote-access-session, :arglists ([delete-remote-access-session-request]), :type :var, :members ()} {:name delete-run, :arglists ([delete-run-request]), :type :var, :members ()} {:name delete-upload, :arglists ([delete-upload-request]), :type :var, :members ()} {:name delete-vpce-configuration, :arglists ([delete-vpceconfiguration-request]), :type :var, :members ()} {:name delete-vpceconfiguration, :arglists ([delete-vpceconfiguration-request]), :type :var, :members ()} {:name get-account-settings, :arglists ([get-account-settings-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-device, :arglists ([get-device-request]), :type :var, :members ()} {:name get-device-instance, :arglists ([get-device-instance-request]), :type :var, :members ()} {:name get-device-pool, :arglists ([get-device-pool-request]), :type :var, :members ()} {:name get-device-pool-compatibility, :arglists ([get-device-pool-compatibility-request]), :type :var, :members ()} {:name get-instance-profile, :arglists ([get-instance-profile-request]), :type :var, :members ()} {:name get-job, :arglists ([get-job-request]), :type :var, :members ()} {:name get-network-profile, :arglists ([get-network-profile-request]), :type :var, :members ()} {:name get-offering-status, :arglists ([get-offering-status-request]), :type :var, :members ()} {:name get-project, :arglists ([get-project-request]), :type :var, :members ()} {:name get-remote-access-session, :arglists ([get-remote-access-session-request]), :type :var, :members ()} {:name get-run, :arglists ([get-run-request]), :type :var, :members ()} {:name get-suite, :arglists ([get-suite-request]), :type :var, :members ()} {:name get-test, :arglists ([get-test-request]), :type :var, :members ()} {:name get-upload, :arglists ([get-upload-request]), :type :var, :members ()} {:name get-vpce-configuration, :arglists ([get-vpceconfiguration-request]), :type :var, :members ()} {:name get-vpceconfiguration, :arglists ([get-vpceconfiguration-request]), :type :var, :members ()} {:name install-to-remote-access-session, :arglists ([install-to-remote-access-session-request]), :type :var, :members ()} {:name list-artifacts, :arglists ([list-artifacts-request]), :type :var, :members ()} {:name list-device-instances, :arglists ([list-device-instances-request]), :type :var, :members ()} {:name list-device-pools, :arglists ([list-device-pools-request]), :type :var, :members ()} {:name list-devices, :arglists ([list-devices-request]), :type :var, :members ()} {:name list-instance-profiles, :arglists ([list-instance-profiles-request]), :type :var, :members ()} {:name list-jobs, :arglists ([list-jobs-request]), :type :var, :members ()} {:name list-network-profiles, :arglists ([list-network-profiles-request]), :type :var, :members ()} {:name list-offering-promotions, :arglists ([list-offering-promotions-request]), :type :var, :members ()} {:name list-offering-transactions, :arglists ([list-offering-transactions-request]), :type :var, :members ()} {:name list-offerings, :arglists ([list-offerings-request]), :type :var, :members ()} {:name list-projects, :arglists ([list-projects-request]), :type :var, :members ()} {:name list-remote-access-sessions, :arglists ([list-remote-access-sessions-request]), :type :var, :members ()} {:name list-runs, :arglists ([list-runs-request]), :type :var, :members ()} {:name list-samples, :arglists ([list-samples-request]), :type :var, :members ()} {:name list-suites, :arglists ([list-suites-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name list-tests, :arglists ([list-tests-request]), :type :var, :members ()} {:name list-unique-problems, :arglists ([list-unique-problems-request]), :type :var, :members ()} {:name list-uploads, :arglists ([list-uploads-request]), :type :var, :members ()} {:name list-vpce-configurations, :arglists ([list-vpceconfigurations-request]), :type :var, :members ()} {:name list-vpceconfigurations, :arglists ([list-vpceconfigurations-request]), :type :var, :members ()} {:name purchase-offering, :arglists ([purchase-offering-request]), :type :var, :members ()} {:name renew-offering, :arglists ([renew-offering-request]), :type :var, :members ()} {:name schedule-run, :arglists ([schedule-run-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name stop-job, :arglists ([stop-job-request]), :type :var, :members ()} {:name stop-remote-access-session, :arglists ([stop-remote-access-session-request]), :type :var, :members ()} {:name stop-run, :arglists ([stop-run-request]), :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-device-instance, :arglists ([update-device-instance-request]), :type :var, :members ()} {:name update-device-pool, :arglists ([update-device-pool-request]), :type :var, :members ()} {:name update-instance-profile, :arglists ([update-instance-profile-request]), :type :var, :members ()} {:name update-network-profile, :arglists ([update-network-profile-request]), :type :var, :members ()} {:name update-project, :arglists ([update-project-request]), :type :var, :members ()} {:name update-upload, :arglists ([update-upload-request]), :type :var, :members ()} {:name update-vpce-configuration, :arglists ([update-vpceconfiguration-request]), :type :var, :members ()} {:name update-vpceconfiguration, :arglists ([update-vpceconfiguration-request]), :type :var, :members ()})} {:name amazonica.aws.cloudtrail, :publics ({:name add-tags, :arglists ([add-tags-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-trail, :arglists ([create-trail-request]), :type :var, :members ()} {:name delete-trail, :arglists ([delete-trail-request]), :type :var, :members ()} {:name describe-trails, :arglists ([] [describe-trails-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-event-selectors, :arglists ([get-event-selectors-request]), :type :var, :members ()} {:name get-trail-status, :arglists ([get-trail-status-request]), :type :var, :members ()} {:name list-public-keys, :arglists ([] [list-public-keys-request]), :type :var, :members ()} {:name list-tags, :arglists ([list-tags-request]), :type :var, :members ()} {:name lookup-events, :arglists ([] [lookup-events-request]), :type :var, :members ()} {:name put-event-selectors, :arglists ([put-event-selectors-request]), :type :var, :members ()} {:name remove-tags, :arglists ([remove-tags-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name start-logging, :arglists ([start-logging-request]), :type :var, :members ()} {:name stop-logging, :arglists ([stop-logging-request]), :type :var, :members ()} {:name update-trail, :arglists ([update-trail-request]), :type :var, :members ()})} {:name amazonica.aws.shield, :publics ({:name associate-drt-log-bucket, :arglists ([associate-drtlog-bucket-request]), :type :var, :members ()} {:name associate-drt-role, :arglists ([associate-drtrole-request]), :type :var, :members ()} {:name associate-drtlog-bucket, :arglists ([associate-drtlog-bucket-request]), :type :var, :members ()} {:name associate-drtrole, :arglists ([associate-drtrole-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-protection, :arglists ([create-protection-request]), :type :var, :members ()} {:name create-subscription, :arglists ([create-subscription-request]), :type :var, :members ()} {:name delete-protection, :arglists ([delete-protection-request]), :type :var, :members ()} {:name delete-subscription, :arglists ([delete-subscription-request]), :type :var, :members ()} {:name describe-attack, :arglists ([describe-attack-request]), :type :var, :members ()} {:name describe-drt-access, :arglists ([describe-drtaccess-request]), :type :var, :members ()} {:name describe-drtaccess, :arglists ([describe-drtaccess-request]), :type :var, :members ()} {:name describe-emergency-contact-settings, :arglists ([describe-emergency-contact-settings-request]), :type :var, :members ()} {:name describe-protection, :arglists ([describe-protection-request]), :type :var, :members ()} {:name describe-subscription, :arglists ([describe-subscription-request]), :type :var, :members ()} {:name disassociate-drt-log-bucket, :arglists ([disassociate-drtlog-bucket-request]), :type :var, :members ()} {:name disassociate-drt-role, :arglists ([disassociate-drtrole-request]), :type :var, :members ()} {:name disassociate-drtlog-bucket, :arglists ([disassociate-drtlog-bucket-request]), :type :var, :members ()} {:name disassociate-drtrole, :arglists ([disassociate-drtrole-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-subscription-state, :arglists ([get-subscription-state-request]), :type :var, :members ()} {:name list-attacks, :arglists ([list-attacks-request]), :type :var, :members ()} {:name list-protections, :arglists ([list-protections-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name update-emergency-contact-settings, :arglists ([update-emergency-contact-settings-request]), :type :var, :members ()} {:name update-subscription, :arglists ([update-subscription-request]), :type :var, :members ()})} {:name amazonica.aws.elasticbeanstalk, :publics ({:name abort-environment-update, :arglists ([] [abort-environment-update-request]), :type :var, :members ()} {:name apply-environment-managed-action, :arglists ([apply-environment-managed-action-request]), :type :var, :members ()} {:name check-dns-availability, :arglists ([check-dnsavailability-request]), :type :var, :members ()} {:name check-dnsavailability, :arglists ([check-dnsavailability-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name compose-environments, :arglists ([compose-environments-request]), :type :var, :members ()} {:name create-application, :arglists ([create-application-request]), :type :var, :members ()} {:name create-application-version, :arglists ([create-application-version-request]), :type :var, :members ()} {:name create-configuration-template, :arglists ([create-configuration-template-request]), :type :var, :members ()} {:name create-environment, :arglists ([create-environment-request]), :type :var, :members ()} {:name create-platform-version, :arglists ([create-platform-version-request]), :type :var, :members ()} {:name create-storage-location, :arglists ([] [create-storage-location-request]), :type :var, :members ()} {:name delete-application, :arglists ([delete-application-request]), :type :var, :members ()} {:name delete-application-version, :arglists ([delete-application-version-request]), :type :var, :members ()} {:name delete-configuration-template, :arglists ([delete-configuration-template-request]), :type :var, :members ()} {:name delete-environment-configuration, :arglists ([delete-environment-configuration-request]), :type :var, :members ()} {:name delete-platform-version, :arglists ([delete-platform-version-request]), :type :var, :members ()} {:name describe-account-attributes, :arglists ([describe-account-attributes-request]), :type :var, :members ()} {:name describe-application-versions, :arglists ([] [describe-application-versions-request]), :type :var, :members ()} {:name describe-applications, :arglists ([] [describe-applications-request]), :type :var, :members ()} {:name describe-configuration-options, :arglists ([describe-configuration-options-request]), :type :var, :members ()} {:name describe-configuration-settings, :arglists ([describe-configuration-settings-request]), :type :var, :members ()} {:name describe-environment-health, :arglists ([describe-environment-health-request]), :type :var, :members ()} {:name describe-environment-managed-action-history, :arglists ([describe-environment-managed-action-history-request]), :type :var, :members ()} {:name describe-environment-managed-actions, :arglists ([describe-environment-managed-actions-request]), :type :var, :members ()} {:name describe-environment-resources, :arglists ([describe-environment-resources-request]), :type :var, :members ()} {:name describe-environments, :arglists ([] [describe-environments-request]), :type :var, :members ()} {:name describe-events, :arglists ([] [describe-events-request]), :type :var, :members ()} {:name describe-instances-health, :arglists ([describe-instances-health-request]), :type :var, :members ()} {:name describe-platform-version, :arglists ([describe-platform-version-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name list-available-solution-stacks, :arglists ([] [list-available-solution-stacks-request]), :type :var, :members ()} {:name list-platform-versions, :arglists ([list-platform-versions-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name rebuild-environment, :arglists ([rebuild-environment-request]), :type :var, :members ()} {:name request-environment-info, :arglists ([request-environment-info-request]), :type :var, :members ()} {:name restart-app-server, :arglists ([restart-app-server-request]), :type :var, :members ()} {:name retrieve-environment-info, :arglists ([retrieve-environment-info-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name swap-environment-cnam-es, :arglists ([] [swap-environment-cnames-request]), :type :var, :members ()} {:name swap-environment-cnames, :arglists ([] [swap-environment-cnames-request]), :type :var, :members ()} {:name terminate-environment, :arglists ([terminate-environment-request]), :type :var, :members ()} {:name update-application, :arglists ([update-application-request]), :type :var, :members ()} {:name update-application-resource-lifecycle, :arglists ([update-application-resource-lifecycle-request]), :type :var, :members ()} {:name update-application-version, :arglists ([update-application-version-request]), :type :var, :members ()} {:name update-configuration-template, :arglists ([update-configuration-template-request]), :type :var, :members ()} {:name update-environment, :arglists ([update-environment-request]), :type :var, :members ()} {:name update-tags-for-resource, :arglists ([update-tags-for-resource-request]), :type :var, :members ()} {:name validate-configuration-settings, :arglists ([validate-configuration-settings-request]), :type :var, :members ()})} {:name amazonica.aws.logs, :publics ({:name associate-kms-key, :arglists ([associate-kms-key-request]), :type :var, :members ()} {:name cancel-export-task, :arglists ([cancel-export-task-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-export-task, :arglists ([create-export-task-request]), :type :var, :members ()} {:name create-log-group, :arglists ([create-log-group-request]), :type :var, :members ()} {:name create-log-stream, :arglists ([create-log-stream-request]), :type :var, :members ()} {:name delete-destination, :arglists ([delete-destination-request]), :type :var, :members ()} {:name delete-log-group, :arglists ([delete-log-group-request]), :type :var, :members ()} {:name delete-log-stream, :arglists ([delete-log-stream-request]), :type :var, :members ()} {:name delete-metric-filter, :arglists ([delete-metric-filter-request]), :type :var, :members ()} {:name delete-resource-policy, :arglists ([delete-resource-policy-request]), :type :var, :members ()} {:name delete-retention-policy, :arglists ([delete-retention-policy-request]), :type :var, :members ()} {:name delete-subscription-filter, :arglists ([delete-subscription-filter-request]), :type :var, :members ()} {:name describe-destinations, :arglists ([] [describe-destinations-request]), :type :var, :members ()} {:name describe-export-tasks, :arglists ([describe-export-tasks-request]), :type :var, :members ()} {:name describe-log-groups, :arglists ([] [describe-log-groups-request]), :type :var, :members ()} {:name describe-log-streams, :arglists ([describe-log-streams-request]), :type :var, :members ()} {:name describe-metric-filters, :arglists ([describe-metric-filters-request]), :type :var, :members ()} {:name describe-queries, :arglists ([describe-queries-request]), :type :var, :members ()} {:name describe-resource-policies, :arglists ([describe-resource-policies-request]), :type :var, :members ()} {:name describe-subscription-filters, :arglists ([describe-subscription-filters-request]), :type :var, :members ()} {:name disassociate-kms-key, :arglists ([disassociate-kms-key-request]), :type :var, :members ()} {:name filter-log-events, :arglists ([filter-log-events-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-log-events, :arglists ([get-log-events-request]), :type :var, :members ()} {:name get-log-group-fields, :arglists ([get-log-group-fields-request]), :type :var, :members ()} {:name get-log-record, :arglists ([get-log-record-request]), :type :var, :members ()} {:name get-query-results, :arglists ([get-query-results-request]), :type :var, :members ()} {:name list-tags-log-group, :arglists ([list-tags-log-group-request]), :type :var, :members ()} {:name put-destination, :arglists ([put-destination-request]), :type :var, :members ()} {:name put-destination-policy, :arglists ([put-destination-policy-request]), :type :var, :members ()} {:name put-log-events, :arglists ([put-log-events-request]), :type :var, :members ()} {:name put-metric-filter, :arglists ([put-metric-filter-request]), :type :var, :members ()} {:name put-resource-policy, :arglists ([put-resource-policy-request]), :type :var, :members ()} {:name put-retention-policy, :arglists ([put-retention-policy-request]), :type :var, :members ()} {:name put-subscription-filter, :arglists ([put-subscription-filter-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name start-query, :arglists ([start-query-request]), :type :var, :members ()} {:name stop-query, :arglists ([stop-query-request]), :type :var, :members ()} {:name tag-log-group, :arglists ([tag-log-group-request]), :type :var, :members ()} {:name test-metric-filter, :arglists ([test-metric-filter-request]), :type :var, :members ()} {:name untag-log-group, :arglists ([untag-log-group-request]), :type :var, :members ()})} {:name amazonica.aws.fms, :publics ({:name associate-admin-account, :arglists ([associate-admin-account-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name delete-notification-channel, :arglists ([delete-notification-channel-request]), :type :var, :members ()} {:name delete-policy, :arglists ([delete-policy-request]), :type :var, :members ()} {:name disassociate-admin-account, :arglists ([disassociate-admin-account-request]), :type :var, :members ()} {:name get-admin-account, :arglists ([get-admin-account-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-compliance-detail, :arglists ([get-compliance-detail-request]), :type :var, :members ()} {:name get-notification-channel, :arglists ([get-notification-channel-request]), :type :var, :members ()} {:name get-policy, :arglists ([get-policy-request]), :type :var, :members ()} {:name get-protection-status, :arglists ([get-protection-status-request]), :type :var, :members ()} {:name list-compliance-status, :arglists ([list-compliance-status-request]), :type :var, :members ()} {:name list-member-accounts, :arglists ([list-member-accounts-request]), :type :var, :members ()} {:name list-policies, :arglists ([list-policies-request]), :type :var, :members ()} {:name put-notification-channel, :arglists ([put-notification-channel-request]), :type :var, :members ()} {:name put-policy, :arglists ([put-policy-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()})} {:name amazonica.aws.xray, :publics ({:name batch-get-traces, :arglists ([batch-get-traces-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-group, :arglists ([create-group-request]), :type :var, :members ()} {:name create-sampling-rule, :arglists ([create-sampling-rule-request]), :type :var, :members ()} {:name delete-group, :arglists ([delete-group-request]), :type :var, :members ()} {:name delete-sampling-rule, :arglists ([delete-sampling-rule-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-encryption-config, :arglists ([get-encryption-config-request]), :type :var, :members ()} {:name get-group, :arglists ([get-group-request]), :type :var, :members ()} {:name get-groups, :arglists ([get-groups-request]), :type :var, :members ()} {:name get-sampling-rules, :arglists ([get-sampling-rules-request]), :type :var, :members ()} {:name get-sampling-statistic-summaries, :arglists ([get-sampling-statistic-summaries-request]), :type :var, :members ()} {:name get-sampling-targets, :arglists ([get-sampling-targets-request]), :type :var, :members ()} {:name get-service-graph, :arglists ([get-service-graph-request]), :type :var, :members ()} {:name get-time-series-service-statistics, :arglists ([get-time-series-service-statistics-request]), :type :var, :members ()} {:name get-trace-graph, :arglists ([get-trace-graph-request]), :type :var, :members ()} {:name get-trace-summaries, :arglists ([get-trace-summaries-request]), :type :var, :members ()} {:name put-encryption-config, :arglists ([put-encryption-config-request]), :type :var, :members ()} {:name put-telemetry-records, :arglists ([put-telemetry-records-request]), :type :var, :members ()} {:name put-trace-segments, :arglists ([put-trace-segments-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name update-group, :arglists ([update-group-request]), :type :var, :members ()} {:name update-sampling-rule, :arglists ([update-sampling-rule-request]), :type :var, :members ()})} {:name amazonica.aws.simpleworkflow, :publics ({:name client-class, :type :var, :members ()} {:name count-closed-workflow-executions, :arglists ([count-closed-workflow-executions-request]), :type :var, :members ()} {:name count-open-workflow-executions, :arglists ([count-open-workflow-executions-request]), :type :var, :members ()} {:name count-pending-activity-tasks, :arglists ([count-pending-activity-tasks-request]), :type :var, :members ()} {:name count-pending-decision-tasks, :arglists ([count-pending-decision-tasks-request]), :type :var, :members ()} {:name deprecate-activity-type, :arglists ([deprecate-activity-type-request]), :type :var, :members ()} {:name deprecate-domain, :arglists ([deprecate-domain-request]), :type :var, :members ()} {:name deprecate-workflow-type, :arglists ([deprecate-workflow-type-request]), :type :var, :members ()} {:name describe-activity-type, :arglists ([describe-activity-type-request]), :type :var, :members ()} {:name describe-domain, :arglists ([describe-domain-request]), :type :var, :members ()} {:name describe-workflow-execution, :arglists ([describe-workflow-execution-request]), :type :var, :members ()} {:name describe-workflow-type, :arglists ([describe-workflow-type-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-workflow-execution-history, :arglists ([get-workflow-execution-history-request]), :type :var, :members ()} {:name list-activity-types, :arglists ([list-activity-types-request]), :type :var, :members ()} {:name list-closed-workflow-executions, :arglists ([list-closed-workflow-executions-request]), :type :var, :members ()} {:name list-domains, :arglists ([list-domains-request]), :type :var, :members ()} {:name list-open-workflow-executions, :arglists ([list-open-workflow-executions-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name list-workflow-types, :arglists ([list-workflow-types-request]), :type :var, :members ()} {:name poll-for-activity-task, :arglists ([poll-for-activity-task-request]), :type :var, :members ()} {:name poll-for-decision-task, :arglists ([poll-for-decision-task-request]), :type :var, :members ()} {:name record-activity-task-heartbeat, :arglists ([record-activity-task-heartbeat-request]), :type :var, :members ()} {:name register-activity-type, :arglists ([register-activity-type-request]), :type :var, :members ()} {:name register-domain, :arglists ([register-domain-request]), :type :var, :members ()} {:name register-workflow-type, :arglists ([register-workflow-type-request]), :type :var, :members ()} {:name request-cancel-workflow-execution, :arglists ([request-cancel-workflow-execution-request]), :type :var, :members ()} {:name respond-activity-task-canceled, :arglists ([respond-activity-task-canceled-request]), :type :var, :members ()} {:name respond-activity-task-completed, :arglists ([respond-activity-task-completed-request]), :type :var, :members ()} {:name respond-activity-task-failed, :arglists ([respond-activity-task-failed-request]), :type :var, :members ()} {:name respond-decision-task-completed, :arglists ([respond-decision-task-completed-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name signal-workflow-execution, :arglists ([signal-workflow-execution-request]), :type :var, :members ()} {:name start-workflow-execution, :arglists ([start-workflow-execution-request]), :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name terminate-workflow-execution, :arglists ([terminate-workflow-execution-request]), :type :var, :members ()} {:name undeprecate-activity-type, :arglists ([undeprecate-activity-type-request]), :type :var, :members ()} {:name undeprecate-domain, :arglists ([undeprecate-domain-request]), :type :var, :members ()} {:name undeprecate-workflow-type, :arglists ([undeprecate-workflow-type-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()})} {:name amazonica.aws.inspector, :publics ({:name add-attributes-to-findings, :arglists ([add-attributes-to-findings-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-assessment-target, :arglists ([create-assessment-target-request]), :type :var, :members ()} {:name create-assessment-template, :arglists ([create-assessment-template-request]), :type :var, :members ()} {:name create-exclusions-preview, :arglists ([create-exclusions-preview-request]), :type :var, :members ()} {:name create-resource-group, :arglists ([create-resource-group-request]), :type :var, :members ()} {:name delete-assessment-run, :arglists ([delete-assessment-run-request]), :type :var, :members ()} {:name delete-assessment-target, :arglists ([delete-assessment-target-request]), :type :var, :members ()} {:name delete-assessment-template, :arglists ([delete-assessment-template-request]), :type :var, :members ()} {:name describe-assessment-runs, :arglists ([describe-assessment-runs-request]), :type :var, :members ()} {:name describe-assessment-targets, :arglists ([describe-assessment-targets-request]), :type :var, :members ()} {:name describe-assessment-templates, :arglists ([describe-assessment-templates-request]), :type :var, :members ()} {:name describe-cross-account-access-role, :arglists ([describe-cross-account-access-role-request]), :type :var, :members ()} {:name describe-exclusions, :arglists ([describe-exclusions-request]), :type :var, :members ()} {:name describe-findings, :arglists ([describe-findings-request]), :type :var, :members ()} {:name describe-resource-groups, :arglists ([describe-resource-groups-request]), :type :var, :members ()} {:name describe-rules-packages, :arglists ([describe-rules-packages-request]), :type :var, :members ()} {:name get-assessment-report, :arglists ([get-assessment-report-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-exclusions-preview, :arglists ([get-exclusions-preview-request]), :type :var, :members ()} {:name get-telemetry-metadata, :arglists ([get-telemetry-metadata-request]), :type :var, :members ()} {:name list-assessment-run-agents, :arglists ([list-assessment-run-agents-request]), :type :var, :members ()} {:name list-assessment-runs, :arglists ([list-assessment-runs-request]), :type :var, :members ()} {:name list-assessment-targets, :arglists ([list-assessment-targets-request]), :type :var, :members ()} {:name list-assessment-templates, :arglists ([list-assessment-templates-request]), :type :var, :members ()} {:name list-event-subscriptions, :arglists ([list-event-subscriptions-request]), :type :var, :members ()} {:name list-exclusions, :arglists ([list-exclusions-request]), :type :var, :members ()} {:name list-findings, :arglists ([list-findings-request]), :type :var, :members ()} {:name list-rules-packages, :arglists ([list-rules-packages-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name preview-agents, :arglists ([preview-agents-request]), :type :var, :members ()} {:name register-cross-account-access-role, :arglists ([register-cross-account-access-role-request]), :type :var, :members ()} {:name remove-attributes-from-findings, :arglists ([remove-attributes-from-findings-request]), :type :var, :members ()} {:name set-tags-for-resource, :arglists ([set-tags-for-resource-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name start-assessment-run, :arglists ([start-assessment-run-request]), :type :var, :members ()} {:name stop-assessment-run, :arglists ([stop-assessment-run-request]), :type :var, :members ()} {:name subscribe-to-event, :arglists ([subscribe-to-event-request]), :type :var, :members ()} {:name unsubscribe-from-event, :arglists ([unsubscribe-from-event-request]), :type :var, :members ()} {:name update-assessment-target, :arglists ([update-assessment-target-request]), :type :var, :members ()})} {:name amazonica.aws.pi, :publics ({:name client-class, :type :var, :members ()} {:name describe-dimension-keys, :arglists ([describe-dimension-keys-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-resource-metrics, :arglists ([get-resource-metrics-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()})} {:name amazonica.aws.clouddirectory, :publics ({:name add-facet-to-object, :arglists ([add-facet-to-object-request]), :type :var, :members ()} {:name apply-schema, :arglists ([apply-schema-request]), :type :var, :members ()} {:name attach-object, :arglists ([attach-object-request]), :type :var, :members ()} {:name attach-policy, :arglists ([attach-policy-request]), :type :var, :members ()} {:name attach-to-index, :arglists ([attach-to-index-request]), :type :var, :members ()} {:name attach-typed-link, :arglists ([attach-typed-link-request]), :type :var, :members ()} {:name batch-read, :arglists ([batch-read-request]), :type :var, :members ()} {:name batch-write, :arglists ([batch-write-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-directory, :arglists ([create-directory-request]), :type :var, :members ()} {:name create-facet, :arglists ([create-facet-request]), :type :var, :members ()} {:name create-index, :arglists ([create-index-request]), :type :var, :members ()} {:name create-object, :arglists ([create-object-request]), :type :var, :members ()} {:name create-schema, :arglists ([create-schema-request]), :type :var, :members ()} {:name create-typed-link-facet, :arglists ([create-typed-link-facet-request]), :type :var, :members ()} {:name delete-directory, :arglists ([delete-directory-request]), :type :var, :members ()} {:name delete-facet, :arglists ([delete-facet-request]), :type :var, :members ()} {:name delete-object, :arglists ([delete-object-request]), :type :var, :members ()} {:name delete-schema, :arglists ([delete-schema-request]), :type :var, :members ()} {:name delete-typed-link-facet, :arglists ([delete-typed-link-facet-request]), :type :var, :members ()} {:name detach-from-index, :arglists ([detach-from-index-request]), :type :var, :members ()} {:name detach-object, :arglists ([detach-object-request]), :type :var, :members ()} {:name detach-policy, :arglists ([detach-policy-request]), :type :var, :members ()} {:name detach-typed-link, :arglists ([detach-typed-link-request]), :type :var, :members ()} {:name disable-directory, :arglists ([disable-directory-request]), :type :var, :members ()} {:name enable-directory, :arglists ([enable-directory-request]), :type :var, :members ()} {:name get-applied-schema-version, :arglists ([get-applied-schema-version-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-directory, :arglists ([get-directory-request]), :type :var, :members ()} {:name get-facet, :arglists ([get-facet-request]), :type :var, :members ()} {:name get-link-attributes, :arglists ([get-link-attributes-request]), :type :var, :members ()} {:name get-object-attributes, :arglists ([get-object-attributes-request]), :type :var, :members ()} {:name get-object-information, :arglists ([get-object-information-request]), :type :var, :members ()} {:name get-schema-as-json, :arglists ([get-schema-as-json-request]), :type :var, :members ()} {:name get-typed-link-facet-information, :arglists ([get-typed-link-facet-information-request]), :type :var, :members ()} {:name list-applied-schema-arns, :arglists ([list-applied-schema-arns-request]), :type :var, :members ()} {:name list-attached-indices, :arglists ([list-attached-indices-request]), :type :var, :members ()} {:name list-development-schema-arns, :arglists ([list-development-schema-arns-request]), :type :var, :members ()} {:name list-directories, :arglists ([list-directories-request]), :type :var, :members ()} {:name list-facet-attributes, :arglists ([list-facet-attributes-request]), :type :var, :members ()} {:name list-facet-names, :arglists ([list-facet-names-request]), :type :var, :members ()} {:name list-incoming-typed-links, :arglists ([list-incoming-typed-links-request]), :type :var, :members ()} {:name list-index, :arglists ([list-index-request]), :type :var, :members ()} {:name list-managed-schema-arns, :arglists ([list-managed-schema-arns-request]), :type :var, :members ()} {:name list-object-attributes, :arglists ([list-object-attributes-request]), :type :var, :members ()} {:name list-object-children, :arglists ([list-object-children-request]), :type :var, :members ()} {:name list-object-parent-paths, :arglists ([list-object-parent-paths-request]), :type :var, :members ()} {:name list-object-parents, :arglists ([list-object-parents-request]), :type :var, :members ()} {:name list-object-policies, :arglists ([list-object-policies-request]), :type :var, :members ()} {:name list-outgoing-typed-links, :arglists ([list-outgoing-typed-links-request]), :type :var, :members ()} {:name list-policy-attachments, :arglists ([list-policy-attachments-request]), :type :var, :members ()} {:name list-published-schema-arns, :arglists ([list-published-schema-arns-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name list-typed-link-facet-attributes, :arglists ([list-typed-link-facet-attributes-request]), :type :var, :members ()} {:name list-typed-link-facet-names, :arglists ([list-typed-link-facet-names-request]), :type :var, :members ()} {:name lookup-policy, :arglists ([lookup-policy-request]), :type :var, :members ()} {:name publish-schema, :arglists ([publish-schema-request]), :type :var, :members ()} {:name put-schema-from-json, :arglists ([put-schema-from-json-request]), :type :var, :members ()} {:name remove-facet-from-object, :arglists ([remove-facet-from-object-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-facet, :arglists ([update-facet-request]), :type :var, :members ()} {:name update-link-attributes, :arglists ([update-link-attributes-request]), :type :var, :members ()} {:name update-object-attributes, :arglists ([update-object-attributes-request]), :type :var, :members ()} {:name update-schema, :arglists ([update-schema-request]), :type :var, :members ()} {:name update-typed-link-facet, :arglists ([update-typed-link-facet-request]), :type :var, :members ()} {:name upgrade-applied-schema, :arglists ([upgrade-applied-schema-request]), :type :var, :members ()} {:name upgrade-published-schema, :arglists ([upgrade-published-schema-request]), :type :var, :members ()})} {:name amazonica.aws.identitymanagement, :publics ({:name add-client-id-to-openid-connect-provider, :arglists ([add-client-idto-open-idconnect-provider-request]), :type :var, :members ()} {:name add-client-idto-open-idconnect-provider, :arglists ([add-client-idto-open-idconnect-provider-request]), :type :var, :members ()} {:name add-role-to-instance-profile, :arglists ([add-role-to-instance-profile-request]), :type :var, :members ()} {:name add-user-to-group, :arglists ([add-user-to-group-request]), :type :var, :members ()} {:name attach-group-policy, :arglists ([attach-group-policy-request]), :type :var, :members ()} {:name attach-role-policy, :arglists ([attach-role-policy-request]), :type :var, :members ()} {:name attach-user-policy, :arglists ([attach-user-policy-request]), :type :var, :members ()} {:name change-password, :arglists ([change-password-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-access-key, :arglists ([] [create-access-key-request]), :type :var, :members ()} {:name create-account-alias, :arglists ([create-account-alias-request]), :type :var, :members ()} {:name create-group, :arglists ([create-group-request]), :type :var, :members ()} {:name create-instance-profile, :arglists ([create-instance-profile-request]), :type :var, :members ()} {:name create-login-profile, :arglists ([create-login-profile-request]), :type :var, :members ()} {:name create-open-idconnect-provider, :arglists ([create-open-idconnect-provider-request]), :type :var, :members ()} {:name create-openid-connect-provider, :arglists ([create-open-idconnect-provider-request]), :type :var, :members ()} {:name create-policy, :arglists ([create-policy-request]), :type :var, :members ()} {:name create-policy-version, :arglists ([create-policy-version-request]), :type :var, :members ()} {:name create-role, :arglists ([create-role-request]), :type :var, :members ()} {:name create-saml-provider, :arglists ([create-samlprovider-request]), :type :var, :members ()} {:name create-samlprovider, :arglists ([create-samlprovider-request]), :type :var, :members ()} {:name create-service-linked-role, :arglists ([create-service-linked-role-request]), :type :var, :members ()} {:name create-service-specific-credential, :arglists ([create-service-specific-credential-request]), :type :var, :members ()} {:name create-user, :arglists ([create-user-request]), :type :var, :members ()} {:name create-virtual-mfa-device, :arglists ([create-virtual-mfadevice-request]), :type :var, :members ()} {:name create-virtual-mfadevice, :arglists ([create-virtual-mfadevice-request]), :type :var, :members ()} {:name deactivate-mfa-device, :arglists ([deactivate-mfadevice-request]), :type :var, :members ()} {:name deactivate-mfadevice, :arglists ([deactivate-mfadevice-request]), :type :var, :members ()} {:name delete-access-key, :arglists ([delete-access-key-request]), :type :var, :members ()} {:name delete-account-alias, :arglists ([delete-account-alias-request]), :type :var, :members ()} {:name delete-account-password-policy, :arglists ([] [delete-account-password-policy-request]), :type :var, :members ()} {:name delete-group, :arglists ([delete-group-request]), :type :var, :members ()} {:name delete-group-policy, :arglists ([delete-group-policy-request]), :type :var, :members ()} {:name delete-instance-profile, :arglists ([delete-instance-profile-request]), :type :var, :members ()} {:name delete-login-profile, :arglists ([delete-login-profile-request]), :type :var, :members ()} {:name delete-open-idconnect-provider, :arglists ([delete-open-idconnect-provider-request]), :type :var, :members ()} {:name delete-openid-connect-provider, :arglists ([delete-open-idconnect-provider-request]), :type :var, :members ()} {:name delete-policy, :arglists ([delete-policy-request]), :type :var, :members ()} {:name delete-policy-version, :arglists ([delete-policy-version-request]), :type :var, :members ()} {:name delete-role, :arglists ([delete-role-request]), :type :var, :members ()} {:name delete-role-permissions-boundary, :arglists ([delete-role-permissions-boundary-request]), :type :var, :members ()} {:name delete-role-policy, :arglists ([delete-role-policy-request]), :type :var, :members ()} {:name delete-saml-provider, :arglists ([delete-samlprovider-request]), :type :var, :members ()} {:name delete-samlprovider, :arglists ([delete-samlprovider-request]), :type :var, :members ()} {:name delete-server-certificate, :arglists ([delete-server-certificate-request]), :type :var, :members ()} {:name delete-service-linked-role, :arglists ([delete-service-linked-role-request]), :type :var, :members ()} {:name delete-service-specific-credential, :arglists ([delete-service-specific-credential-request]), :type :var, :members ()} {:name delete-signing-certificate, :arglists ([delete-signing-certificate-request]), :type :var, :members ()} {:name delete-ssh-public-key, :arglists ([delete-sshpublic-key-request]), :type :var, :members ()} {:name delete-sshpublic-key, :arglists ([delete-sshpublic-key-request]), :type :var, :members ()} {:name delete-user, :arglists ([delete-user-request]), :type :var, :members ()} {:name delete-user-permissions-boundary, :arglists ([delete-user-permissions-boundary-request]), :type :var, :members ()} {:name delete-user-policy, :arglists ([delete-user-policy-request]), :type :var, :members ()} {:name delete-virtual-mfa-device, :arglists ([delete-virtual-mfadevice-request]), :type :var, :members ()} {:name delete-virtual-mfadevice, :arglists ([delete-virtual-mfadevice-request]), :type :var, :members ()} {:name detach-group-policy, :arglists ([detach-group-policy-request]), :type :var, :members ()} {:name detach-role-policy, :arglists ([detach-role-policy-request]), :type :var, :members ()} {:name detach-user-policy, :arglists ([detach-user-policy-request]), :type :var, :members ()} {:name enable-mfa-device, :arglists ([enable-mfadevice-request]), :type :var, :members ()} {:name enable-mfadevice, :arglists ([enable-mfadevice-request]), :type :var, :members ()} {:name generate-credential-report, :arglists ([] [generate-credential-report-request]), :type :var, :members ()} {:name generate-organizations-access-report, :arglists ([generate-organizations-access-report-request]), :type :var, :members ()} {:name generate-service-last-accessed-details, :arglists ([generate-service-last-accessed-details-request]), :type :var, :members ()} {:name get-access-key-last-used, :arglists ([get-access-key-last-used-request]), :type :var, :members ()} {:name get-account-authorization-details, :arglists ([] [get-account-authorization-details-request]), :type :var, :members ()} {:name get-account-password-policy, :arglists ([] [get-account-password-policy-request]), :type :var, :members ()} {:name get-account-summary, :arglists ([] [get-account-summary-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-context-keys-for-custom-policy, :arglists ([get-context-keys-for-custom-policy-request]), :type :var, :members ()} {:name get-context-keys-for-principal-policy, :arglists ([get-context-keys-for-principal-policy-request]), :type :var, :members ()} {:name get-credential-report, :arglists ([] [get-credential-report-request]), :type :var, :members ()} {:name get-group, :arglists ([get-group-request]), :type :var, :members ()} {:name get-group-policy, :arglists ([get-group-policy-request]), :type :var, :members ()} {:name get-instance-profile, :arglists ([get-instance-profile-request]), :type :var, :members ()} {:name get-login-profile, :arglists ([get-login-profile-request]), :type :var, :members ()} {:name get-open-idconnect-provider, :arglists ([get-open-idconnect-provider-request]), :type :var, :members ()} {:name get-openid-connect-provider, :arglists ([get-open-idconnect-provider-request]), :type :var, :members ()} {:name get-organizations-access-report, :arglists ([get-organizations-access-report-request]), :type :var, :members ()} {:name get-policy, :arglists ([get-policy-request]), :type :var, :members ()} {:name get-policy-version, :arglists ([get-policy-version-request]), :type :var, :members ()} {:name get-role, :arglists ([get-role-request]), :type :var, :members ()} {:name get-role-policy, :arglists ([get-role-policy-request]), :type :var, :members ()} {:name get-saml-provider, :arglists ([get-samlprovider-request]), :type :var, :members ()} {:name get-samlprovider, :arglists ([get-samlprovider-request]), :type :var, :members ()} {:name get-server-certificate, :arglists ([get-server-certificate-request]), :type :var, :members ()} {:name get-service-last-accessed-details, :arglists ([get-service-last-accessed-details-request]), :type :var, :members ()} {:name get-service-last-accessed-details-with-entities, :arglists ([get-service-last-accessed-details-with-entities-request]), :type :var, :members ()} {:name get-service-linked-role-deletion-status, :arglists ([get-service-linked-role-deletion-status-request]), :type :var, :members ()} {:name get-ssh-public-key, :arglists ([get-sshpublic-key-request]), :type :var, :members ()} {:name get-sshpublic-key, :arglists ([get-sshpublic-key-request]), :type :var, :members ()} {:name get-user, :arglists ([] [get-user-request]), :type :var, :members ()} {:name get-user-policy, :arglists ([get-user-policy-request]), :type :var, :members ()} {:name list-access-keys, :arglists ([] [list-access-keys-request]), :type :var, :members ()} {:name list-account-aliases, :arglists ([] [list-account-aliases-request]), :type :var, :members ()} {:name list-attached-group-policies, :arglists ([list-attached-group-policies-request]), :type :var, :members ()} {:name list-attached-role-policies, :arglists ([list-attached-role-policies-request]), :type :var, :members ()} {:name list-attached-user-policies, :arglists ([list-attached-user-policies-request]), :type :var, :members ()} {:name list-entities-for-policy, :arglists ([list-entities-for-policy-request]), :type :var, :members ()} {:name list-group-policies, :arglists ([list-group-policies-request]), :type :var, :members ()} {:name list-groups, :arglists ([] [list-groups-request]), :type :var, :members ()} {:name list-groups-for-user, :arglists ([list-groups-for-user-request]), :type :var, :members ()} {:name list-instance-profiles, :arglists ([] [list-instance-profiles-request]), :type :var, :members ()} {:name list-instance-profiles-for-role, :arglists ([list-instance-profiles-for-role-request]), :type :var, :members ()} {:name list-mfa-devices, :arglists ([] [list-mfadevices-request]), :type :var, :members ()} {:name list-mfadevices, :arglists ([] [list-mfadevices-request]), :type :var, :members ()} {:name list-open-idconnect-providers, :arglists ([] [list-open-idconnect-providers-request]), :type :var, :members ()} {:name list-openid-connect-providers, :arglists ([] [list-open-idconnect-providers-request]), :type :var, :members ()} {:name list-policies, :arglists ([] [list-policies-request]), :type :var, :members ()} {:name list-policies-granting-service-access, :arglists ([list-policies-granting-service-access-request]), :type :var, :members ()} {:name list-policy-versions, :arglists ([list-policy-versions-request]), :type :var, :members ()} {:name list-role-policies, :arglists ([list-role-policies-request]), :type :var, :members ()} {:name list-role-tags, :arglists ([list-role-tags-request]), :type :var, :members ()} {:name list-roles, :arglists ([] [list-roles-request]), :type :var, :members ()} {:name list-saml-providers, :arglists ([] [list-samlproviders-request]), :type :var, :members ()} {:name list-samlproviders, :arglists ([] [list-samlproviders-request]), :type :var, :members ()} {:name list-server-certificates, :arglists ([] [list-server-certificates-request]), :type :var, :members ()} {:name list-service-specific-credentials, :arglists ([list-service-specific-credentials-request]), :type :var, :members ()} {:name list-signing-certificates, :arglists ([] [list-signing-certificates-request]), :type :var, :members ()} {:name list-ssh-public-keys, :arglists ([] [list-sshpublic-keys-request]), :type :var, :members ()} {:name list-sshpublic-keys, :arglists ([] [list-sshpublic-keys-request]), :type :var, :members ()} {:name list-user-policies, :arglists ([list-user-policies-request]), :type :var, :members ()} {:name list-user-tags, :arglists ([list-user-tags-request]), :type :var, :members ()} {:name list-users, :arglists ([] [list-users-request]), :type :var, :members ()} {:name list-virtual-mfa-devices, :arglists ([] [list-virtual-mfadevices-request]), :type :var, :members ()} {:name list-virtual-mfadevices, :arglists ([] [list-virtual-mfadevices-request]), :type :var, :members ()} {:name put-group-policy, :arglists ([put-group-policy-request]), :type :var, :members ()} {:name put-role-permissions-boundary, :arglists ([put-role-permissions-boundary-request]), :type :var, :members ()} {:name put-role-policy, :arglists ([put-role-policy-request]), :type :var, :members ()} {:name put-user-permissions-boundary, :arglists ([put-user-permissions-boundary-request]), :type :var, :members ()} {:name put-user-policy, :arglists ([put-user-policy-request]), :type :var, :members ()} {:name remove-client-id-from-openid-connect-provider, :arglists ([remove-client-idfrom-open-idconnect-provider-request]), :type :var, :members ()} {:name remove-client-idfrom-open-idconnect-provider, :arglists ([remove-client-idfrom-open-idconnect-provider-request]), :type :var, :members ()} {:name remove-role-from-instance-profile, :arglists ([remove-role-from-instance-profile-request]), :type :var, :members ()} {:name remove-user-from-group, :arglists ([remove-user-from-group-request]), :type :var, :members ()} {:name reset-service-specific-credential, :arglists ([reset-service-specific-credential-request]), :type :var, :members ()} {:name resync-mfa-device, :arglists ([resync-mfadevice-request]), :type :var, :members ()} {:name resync-mfadevice, :arglists ([resync-mfadevice-request]), :type :var, :members ()} {:name set-default-policy-version, :arglists ([set-default-policy-version-request]), :type :var, :members ()} {:name set-security-token-service-preferences, :arglists ([set-security-token-service-preferences-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name shutdown, :arglists ([]), :type :var, :members ()} {:name simulate-custom-policy, :arglists ([simulate-custom-policy-request]), :type :var, :members ()} {:name simulate-principal-policy, :arglists ([simulate-principal-policy-request]), :type :var, :members ()} {:name tag-role, :arglists ([tag-role-request]), :type :var, :members ()} {:name tag-user, :arglists ([tag-user-request]), :type :var, :members ()} {:name untag-role, :arglists ([untag-role-request]), :type :var, :members ()} {:name untag-user, :arglists ([untag-user-request]), :type :var, :members ()} {:name update-access-key, :arglists ([update-access-key-request]), :type :var, :members ()} {:name update-account-password-policy, :arglists ([update-account-password-policy-request]), :type :var, :members ()} {:name update-assume-role-policy, :arglists ([update-assume-role-policy-request]), :type :var, :members ()} {:name update-group, :arglists ([update-group-request]), :type :var, :members ()} {:name update-login-profile, :arglists ([update-login-profile-request]), :type :var, :members ()} {:name update-open-idconnect-provider-thumbprint, :arglists ([update-open-idconnect-provider-thumbprint-request]), :type :var, :members ()} {:name update-openid-connect-provider-thumbprint, :arglists ([update-open-idconnect-provider-thumbprint-request]), :type :var, :members ()} {:name update-role, :arglists ([update-role-request]), :type :var, :members ()} {:name update-role-description, :arglists ([update-role-description-request]), :type :var, :members ()} {:name update-saml-provider, :arglists ([update-samlprovider-request]), :type :var, :members ()} {:name update-samlprovider, :arglists ([update-samlprovider-request]), :type :var, :members ()} {:name update-server-certificate, :arglists ([update-server-certificate-request]), :type :var, :members ()} {:name update-service-specific-credential, :arglists ([update-service-specific-credential-request]), :type :var, :members ()} {:name update-signing-certificate, :arglists ([update-signing-certificate-request]), :type :var, :members ()} {:name update-ssh-public-key, :arglists ([update-sshpublic-key-request]), :type :var, :members ()} {:name update-sshpublic-key, :arglists ([update-sshpublic-key-request]), :type :var, :members ()} {:name update-user, :arglists ([update-user-request]), :type :var, :members ()} {:name upload-server-certificate, :arglists ([upload-server-certificate-request]), :type :var, :members ()} {:name upload-signing-certificate, :arglists ([upload-signing-certificate-request]), :type :var, :members ()} {:name upload-ssh-public-key, :arglists ([upload-sshpublic-key-request]), :type :var, :members ()} {:name upload-sshpublic-key, :arglists ([upload-sshpublic-key-request]), :type :var, :members ()} {:name waiters, :arglists ([]), :type :var, :members ()})} {:name amazonica.aws.mobile, :publics ({:name client-class, :type :var, :members ()} {:name create-project, :arglists ([create-project-request]), :type :var, :members ()} {:name delete-project, :arglists ([delete-project-request]), :type :var, :members ()} {:name describe-bundle, :arglists ([describe-bundle-request]), :type :var, :members ()} {:name describe-project, :arglists ([describe-project-request]), :type :var, :members ()} {:name export-bundle, :arglists ([export-bundle-request]), :type :var, :members ()} {:name export-project, :arglists ([export-project-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name list-bundles, :arglists ([list-bundles-request]), :type :var, :members ()} {:name list-projects, :arglists ([list-projects-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name update-project, :arglists ([update-project-request]), :type :var, :members ()})} {:name amazonica.aws.cloudwatch, :publics ({:name client-class, :type :var, :members ()} {:name delete-alarms, :arglists ([delete-alarms-request]), :type :var, :members ()} {:name delete-anomaly-detector, :arglists ([delete-anomaly-detector-request]), :type :var, :members ()} {:name delete-dashboards, :arglists ([delete-dashboards-request]), :type :var, :members ()} {:name describe-alarm-history, :arglists ([] [describe-alarm-history-request]), :type :var, :members ()} {:name describe-alarms, :arglists ([] [describe-alarms-request]), :type :var, :members ()} {:name describe-alarms-for-metric, :arglists ([describe-alarms-for-metric-request]), :type :var, :members ()} {:name describe-anomaly-detectors, :arglists ([describe-anomaly-detectors-request]), :type :var, :members ()} {:name disable-alarm-actions, :arglists ([disable-alarm-actions-request]), :type :var, :members ()} {:name enable-alarm-actions, :arglists ([enable-alarm-actions-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-dashboard, :arglists ([get-dashboard-request]), :type :var, :members ()} {:name get-metric-data, :arglists ([get-metric-data-request]), :type :var, :members ()} {:name get-metric-statistics, :arglists ([get-metric-statistics-request]), :type :var, :members ()} {:name get-metric-widget-image, :arglists ([get-metric-widget-image-request]), :type :var, :members ()} {:name list-dashboards, :arglists ([list-dashboards-request]), :type :var, :members ()} {:name list-metrics, :arglists ([] [list-metrics-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name put-anomaly-detector, :arglists ([put-anomaly-detector-request]), :type :var, :members ()} {:name put-dashboard, :arglists ([put-dashboard-request]), :type :var, :members ()} {:name put-metric-alarm, :arglists ([put-metric-alarm-request]), :type :var, :members ()} {:name put-metric-data, :arglists ([put-metric-data-request]), :type :var, :members ()} {:name set-alarm-state, :arglists ([set-alarm-state-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name shutdown, :arglists ([]), :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name waiters, :arglists ([]), :type :var, :members ()})} {:name amazonica.aws.mediapackage, :publics ({:name client-class, :type :var, :members ()} {:name create-channel, :arglists ([create-channel-request]), :type :var, :members ()} {:name create-origin-endpoint, :arglists ([create-origin-endpoint-request]), :type :var, :members ()} {:name delete-channel, :arglists ([delete-channel-request]), :type :var, :members ()} {:name delete-origin-endpoint, :arglists ([delete-origin-endpoint-request]), :type :var, :members ()} {:name describe-channel, :arglists ([describe-channel-request]), :type :var, :members ()} {:name describe-origin-endpoint, :arglists ([describe-origin-endpoint-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name list-channels, :arglists ([list-channels-request]), :type :var, :members ()} {:name list-origin-endpoints, :arglists ([list-origin-endpoints-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name rotate-channel-credentials, :arglists ([rotate-channel-credentials-request]), :type :var, :members ()} {:name rotate-ingest-endpoint-credentials, :arglists ([rotate-ingest-endpoint-credentials-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-channel, :arglists ([update-channel-request]), :type :var, :members ()} {:name update-origin-endpoint, :arglists ([update-origin-endpoint-request]), :type :var, :members ()})} {:name amazonica.aws.kinesisfirehose, :publics ({:name *list-delivery-streams-default-limit*, :file "amazonica/aws/kinesisfirehose.clj", :line 25, :dynamic true, :type :var, :members ()} {:name ->bytes, :file "amazonica/aws/kinesisfirehose.clj", :line 17, :arglists ([data]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-delivery-stream, :arglists ([create-delivery-stream-request]), :type :var, :members ()} {:name delete-delivery-stream, :arglists ([delete-delivery-stream-request]), :type :var, :members ()} {:name describe-delivery-stream, :arglists ([describe-delivery-stream-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name list-delivery-streams, :arglists ([] [creds] [creds limit] [creds limit exclusive-start-delivery-stream-name]), :doc "Lists available firehose streams.\n", :type :var, :members ()} {:name list-tags-for-delivery-stream, :arglists ([list-tags-for-delivery-stream-request]), :type :var, :members ()} {:name maybe-update-in, :file "amazonica/aws/kinesisfirehose.clj", :line 37, :arglists ([m path func & args]), :doc "Like update-in, but returns the original map if the key doesn't exist, or the update func returns nil.\n", :type :var, :members ()} {:name put-record, :arglists ([delivery-stream-name data] [creds delivery-stream-name data]), :doc "Puts a record onto a firehose stream.\n", :type :var, :members ()} {:name put-record-batch, :arglists ([delivery-stream-name batch-data] [creds delivery-stream-name batch-data]), :doc "Puts a batch of records onto a firehose stream.\n", :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name start-delivery-stream-encryption, :arglists ([start-delivery-stream-encryption-request]), :type :var, :members ()} {:name stop-delivery-stream-encryption, :arglists ([stop-delivery-stream-encryption-request]), :type :var, :members ()} {:name tag-delivery-stream, :arglists ([tag-delivery-stream-request]), :type :var, :members ()} {:name untag-delivery-stream, :arglists ([untag-delivery-stream-request]), :type :var, :members ()} {:name update-destination, :arglists ([update-destination-request]), :type :var, :members ()})} {:doc "Amazon AWS functions.\n", :name amazonica.core, :publics ({:name accessors, :file "amazonica/core.clj", :line 679, :arglists ([clazz getters?]), :doc "Returns a vector of getters or setters for the class.\n", :type :var, :members ()} {:name amazon-client*, :file "amazonica/core.clj", :line 274, :arglists ([clazz credentials configuration]), :type :var, :members ()} {:name best-constructor, :file "amazonica/core.clj", :line 423, :arglists ([clazz]), :doc "Prefer no-arg ctor if one exists, else the first found.\n", :type :var, :members ()} {:name candidate-client, :file "amazonica/core.clj", :line 842, :arglists ([clazz args]), :type :var, :members ()} {:name coerce-value, :file "amazonica/core.clj", :line 385, :arglists ([value type]), :doc "Coerces the supplied stringvalue to the required type as\ndefined by the AWS method signature. String or keyword\nconversion to Enum types (e.g. via valueOf()) is supported.", :type :var, :members ()} {:name defclientconfig, :file "amazonica/core.clj", :line 121, :arglists ([config]), :doc "Specify the default Client configuration to use on\nsubsequent requests.", :type :var, :members ()} {:name defcredential, :file "amazonica/core.clj", :line 113, :arglists ([cred] [access-key secret-key & [endpoint]]), :doc "Specify the AWS access key, secret key and optional\nendpoint to use on subsequent requests.", :type :var, :members ()} {:name encryption-client*, :file "amazonica/core.clj", :line 241, :arglists ([encryption credentials configuration]), :type :var, :members ()} {:name ex->map, :file "amazonica/core.clj", :line 86, :arglists ([e]), :doc "Converts a com.amazonaws.AmazonServiceException to a\nClojure map with keys:\n:error-code\n:error-type\n:status-code\n:request-id\n:service-name\n:message\n:stack-trace", :type :var, :members ()} {:name get-credentials, :file "amazonica/core.clj", :line 178, :arglists ([credentials]), :type :var, :members ()} {:name get-fields, :file "amazonica/core.clj", :line 700, :arglists ([obj]), :doc "Returns a map of all non-null values returned by\ninvoking all public getters on the specified object.", :type :var, :members ()} {:name IMarshall, :file "amazonica/core.clj", :line 658, :doc "Defines the contract for converting Java types to Clojure\ndata. All return values from AWS service calls are\nmarshalled. As such, the AWS service-specific namespaces\nwill frequently need to implement this protocol in order\nto provide convenient data representations. See also the\nregister-coercions function for coercing Clojure data to\nJava types.", :type :protocol, :members ({:name marshall, :arglists ([obj]), :doc nil, :type :var, :members ()})} {:name intern-function, :file "amazonica/core.clj", :line 1018, :arglists ([client ns fname methods]), :doc "Interns into ns, the symbol mapped to a Clojure function\nderived from the java.lang.reflect.Method(s). Overloaded\nmethods will yield a variadic Clojure function.", :type :var, :members ()} {:name keys->cred, :file "amazonica/core.clj", :line 105, :arglists ([access-key secret-key & [endpoint]]), :type :var, :members ()} {:name kw->str, :file "amazonica/core.clj", :line 562, :arglists ([k]), :type :var, :members ()} {:name parse-args, :file "amazonica/core.clj", :line 208, :arglists ([cred args]), :doc "Legacy support means credentials may or may not be passed\nas the first argument.", :type :var, :members ()} {:name possible-methods, :file "amazonica/core.clj", :line 910, :arglists ([methods args]), :type :var, :members ()} {:name register-coercions, :file "amazonica/core.clj", :line 378, :arglists ([& {:as coercion}]), :doc "Accepts key/value pairs of class/function, which defines\nhow data will be converted to the appropriate type\nrequired by the AWS Amazon*Client Java method.", :type :var, :members ()} {:name set-client, :file "amazonica/core.clj", :line 1056, :arglists ([client ns]), :doc "Intern into the specified namespace all public methods\nfrom the Amazon*Client class as Clojure functions.", :type :var, :members ()} {:name set-date-format!, :file "amazonica/core.clj", :line 69, :arglists ([df]), :doc "Sets the java.text.SimpleDateFormat pattern to use\nfor transparent coercion of Strings passed as\narguments where java.util.Dates are required by the\nAWS api.", :type :var, :members ()} {:name set-fields, :file "amazonica/core.clj", :line 625, :arglists ([pojo args]), :doc "Returns the populated AWS *Request bean with 'args' as\nthe values. args is a map with keywords as keys and any\ntype values. Complex values will be recursively resolved\nto the corresponding method calls on the object graph.", :type :var, :members ()} {:name set-root-unwrapping!, :file "amazonica/core.clj", :line 60, :arglists ([b]), :doc "Enables JSON-like root unwrapping of singly keyed\ntop level maps.\n  {:root {:key 'foo' :name 'bar'}}\nwould become\n  {:key 'foo' :name 'bar'}", :type :var, :members ()} {:name stack->string, :file "amazonica/core.clj", :line 78, :arglists ([ex]), :doc "Converts a Java stacktrace to String representation.\n", :type :var, :members ()} {:name to-date, :file "amazonica/core.clj", :line 320, :arglists ([date]), :type :var, :members ()} {:name to-enum, :file "amazonica/core.clj", :line 336, :arglists ([type value]), :doc "Case-insensitive resolution of Enum types by String.\n", :type :var, :members ()} {:name to-file, :file "amazonica/core.clj", :line 329, :arglists ([file]), :type :var, :members ()} {:name to-java-coll, :file "amazonica/core.clj", :line 533, :arglists ([col]), :doc "Need this only because S3 methods actually try to\nmutate (e.g. sort) collections passed to them.", :type :var, :members ()} {:name transfer-manager*, :file "amazonica/core.clj", :line 828, :arglists ([credential client-config crypto]), :type :var, :members ()} {:name with-client-config, :file "amazonica/core.clj", :line 139, :arglists ([config & body]), :doc "Per invocation binding of client-config for ad-hoc\nservice calls using alternate client configuration.", :type :macro, :members ()} {:name with-credential, :file "amazonica/core.clj", :line 127, :arglists ([cred & body]), :doc "Per invocation binding of credentials for ad-hoc\nservice calls using alternate user/password combos\n(and endpoints).", :type :macro, :members ()})} {:name amazonica.aws.kms, :publics ({:name cancel-key-deletion, :arglists ([cancel-key-deletion-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name connect-custom-key-store, :arglists ([connect-custom-key-store-request]), :type :var, :members ()} {:name create-alias, :arglists ([create-alias-request]), :type :var, :members ()} {:name create-custom-key-store, :arglists ([create-custom-key-store-request]), :type :var, :members ()} {:name create-grant, :arglists ([create-grant-request]), :type :var, :members ()} {:name create-key, :arglists ([] [create-key-request]), :type :var, :members ()} {:name decrypt, :arglists ([decrypt-request]), :type :var, :members ()} {:name delete-alias, :arglists ([delete-alias-request]), :type :var, :members ()} {:name delete-custom-key-store, :arglists ([delete-custom-key-store-request]), :type :var, :members ()} {:name delete-imported-key-material, :arglists ([delete-imported-key-material-request]), :type :var, :members ()} {:name describe-custom-key-stores, :arglists ([describe-custom-key-stores-request]), :type :var, :members ()} {:name describe-key, :arglists ([describe-key-request]), :type :var, :members ()} {:name disable-key, :arglists ([disable-key-request]), :type :var, :members ()} {:name disable-key-rotation, :arglists ([disable-key-rotation-request]), :type :var, :members ()} {:name disconnect-custom-key-store, :arglists ([disconnect-custom-key-store-request]), :type :var, :members ()} {:name enable-key, :arglists ([enable-key-request]), :type :var, :members ()} {:name enable-key-rotation, :arglists ([enable-key-rotation-request]), :type :var, :members ()} {:name encrypt, :arglists ([encrypt-request]), :type :var, :members ()} {:name generate-data-key, :arglists ([generate-data-key-request]), :type :var, :members ()} {:name generate-data-key-without-plaintext, :arglists ([generate-data-key-without-plaintext-request]), :type :var, :members ()} {:name generate-random, :arglists ([] [generate-random-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-key-policy, :arglists ([get-key-policy-request]), :type :var, :members ()} {:name get-key-rotation-status, :arglists ([get-key-rotation-status-request]), :type :var, :members ()} {:name get-parameters-for-import, :arglists ([get-parameters-for-import-request]), :type :var, :members ()} {:name import-key-material, :arglists ([import-key-material-request]), :type :var, :members ()} {:name list-aliases, :arglists ([] [list-aliases-request]), :type :var, :members ()} {:name list-grants, :arglists ([list-grants-request]), :type :var, :members ()} {:name list-key-policies, :arglists ([list-key-policies-request]), :type :var, :members ()} {:name list-keys, :arglists ([] [list-keys-request]), :type :var, :members ()} {:name list-resource-tags, :arglists ([list-resource-tags-request]), :type :var, :members ()} {:name list-retirable-grants, :arglists ([list-retirable-grants-request]), :type :var, :members ()} {:name put-key-policy, :arglists ([put-key-policy-request]), :type :var, :members ()} {:name re-encrypt, :arglists ([re-encrypt-request]), :type :var, :members ()} {:name retire-grant, :arglists ([] [retire-grant-request]), :type :var, :members ()} {:name revoke-grant, :arglists ([revoke-grant-request]), :type :var, :members ()} {:name schedule-key-deletion, :arglists ([schedule-key-deletion-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-alias, :arglists ([update-alias-request]), :type :var, :members ()} {:name update-custom-key-store, :arglists ([update-custom-key-store-request]), :type :var, :members ()} {:name update-key-description, :arglists ([update-key-description-request]), :type :var, :members ()})} {:name amazonica.aws.appsync, :publics ({:name client-class, :type :var, :members ()} {:name create-api-key, :arglists ([create-api-key-request]), :type :var, :members ()} {:name create-data-source, :arglists ([create-data-source-request]), :type :var, :members ()} {:name create-function, :arglists ([create-function-request]), :type :var, :members ()} {:name create-graphql-api, :arglists ([create-graphql-api-request]), :type :var, :members ()} {:name create-resolver, :arglists ([create-resolver-request]), :type :var, :members ()} {:name create-type, :arglists ([create-type-request]), :type :var, :members ()} {:name delete-api-key, :arglists ([delete-api-key-request]), :type :var, :members ()} {:name delete-data-source, :arglists ([delete-data-source-request]), :type :var, :members ()} {:name delete-function, :arglists ([delete-function-request]), :type :var, :members ()} {:name delete-graphql-api, :arglists ([delete-graphql-api-request]), :type :var, :members ()} {:name delete-resolver, :arglists ([delete-resolver-request]), :type :var, :members ()} {:name delete-type, :arglists ([delete-type-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-data-source, :arglists ([get-data-source-request]), :type :var, :members ()} {:name get-function, :arglists ([get-function-request]), :type :var, :members ()} {:name get-graphql-api, :arglists ([get-graphql-api-request]), :type :var, :members ()} {:name get-introspection-schema, :arglists ([get-introspection-schema-request]), :type :var, :members ()} {:name get-resolver, :arglists ([get-resolver-request]), :type :var, :members ()} {:name get-schema-creation-status, :arglists ([get-schema-creation-status-request]), :type :var, :members ()} {:name get-type, :arglists ([get-type-request]), :type :var, :members ()} {:name list-api-keys, :arglists ([list-api-keys-request]), :type :var, :members ()} {:name list-data-sources, :arglists ([list-data-sources-request]), :type :var, :members ()} {:name list-functions, :arglists ([list-functions-request]), :type :var, :members ()} {:name list-graphql-apis, :arglists ([list-graphql-apis-request]), :type :var, :members ()} {:name list-resolvers, :arglists ([list-resolvers-request]), :type :var, :members ()} {:name list-resolvers-by-function, :arglists ([list-resolvers-by-function-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name list-types, :arglists ([list-types-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name start-schema-creation, :arglists ([start-schema-creation-request]), :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-api-key, :arglists ([update-api-key-request]), :type :var, :members ()} {:name update-data-source, :arglists ([update-data-source-request]), :type :var, :members ()} {:name update-function, :arglists ([update-function-request]), :type :var, :members ()} {:name update-graphql-api, :arglists ([update-graphql-api-request]), :type :var, :members ()} {:name update-resolver, :arglists ([update-resolver-request]), :type :var, :members ()} {:name update-type, :arglists ([update-type-request]), :type :var, :members ()})} {:name amazonica.aws.cloudsearchdomain, :publics ({:name client-class, :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name search, :arglists ([search-request]), :type :var, :members ()} {:name set-endpoint, :file "amazonica/aws/cloudsearchdomain.clj", :line 8, :arglists ([& args]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name suggest, :arglists ([suggest-request]), :type :var, :members ()} {:name upload-documents, :arglists ([upload-documents-request]), :type :var, :members ()})} {:name amazonica.aws.cognitoidp, :publics ({:name add-custom-attributes, :arglists ([add-custom-attributes-request]), :type :var, :members ()} {:name admin-add-user-to-group, :arglists ([admin-add-user-to-group-request]), :type :var, :members ()} {:name admin-confirm-sign-up, :arglists ([admin-confirm-sign-up-request]), :type :var, :members ()} {:name admin-create-user, :arglists ([admin-create-user-request]), :type :var, :members ()} {:name admin-delete-user, :arglists ([admin-delete-user-request]), :type :var, :members ()} {:name admin-delete-user-attributes, :arglists ([admin-delete-user-attributes-request]), :type :var, :members ()} {:name admin-disable-provider-for-user, :arglists ([admin-disable-provider-for-user-request]), :type :var, :members ()} {:name admin-disable-user, :arglists ([admin-disable-user-request]), :type :var, :members ()} {:name admin-enable-user, :arglists ([admin-enable-user-request]), :type :var, :members ()} {:name admin-forget-device, :arglists ([admin-forget-device-request]), :type :var, :members ()} {:name admin-get-device, :arglists ([admin-get-device-request]), :type :var, :members ()} {:name admin-get-user, :arglists ([admin-get-user-request]), :type :var, :members ()} {:name admin-initiate-auth, :arglists ([admin-initiate-auth-request]), :type :var, :members ()} {:name admin-link-provider-for-user, :arglists ([admin-link-provider-for-user-request]), :type :var, :members ()} {:name admin-list-devices, :arglists ([admin-list-devices-request]), :type :var, :members ()} {:name admin-list-groups-for-user, :arglists ([admin-list-groups-for-user-request]), :type :var, :members ()} {:name admin-list-user-auth-events, :arglists ([admin-list-user-auth-events-request]), :type :var, :members ()} {:name admin-remove-user-from-group, :arglists ([admin-remove-user-from-group-request]), :type :var, :members ()} {:name admin-reset-user-password, :arglists ([admin-reset-user-password-request]), :type :var, :members ()} {:name admin-respond-to-auth-challenge, :arglists ([admin-respond-to-auth-challenge-request]), :type :var, :members ()} {:name admin-set-user-mfa-preference, :arglists ([admin-set-user-mfapreference-request]), :type :var, :members ()} {:name admin-set-user-mfapreference, :arglists ([admin-set-user-mfapreference-request]), :type :var, :members ()} {:name admin-set-user-password, :arglists ([admin-set-user-password-request]), :type :var, :members ()} {:name admin-set-user-settings, :arglists ([admin-set-user-settings-request]), :type :var, :members ()} {:name admin-update-auth-event-feedback, :arglists ([admin-update-auth-event-feedback-request]), :type :var, :members ()} {:name admin-update-device-status, :arglists ([admin-update-device-status-request]), :type :var, :members ()} {:name admin-update-user-attributes, :arglists ([admin-update-user-attributes-request]), :type :var, :members ()} {:name admin-user-global-sign-out, :arglists ([admin-user-global-sign-out-request]), :type :var, :members ()} {:name associate-software-token, :arglists ([associate-software-token-request]), :type :var, :members ()} {:name change-password, :arglists ([change-password-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name confirm-device, :arglists ([confirm-device-request]), :type :var, :members ()} {:name confirm-forgot-password, :arglists ([confirm-forgot-password-request]), :type :var, :members ()} {:name confirm-sign-up, :arglists ([confirm-sign-up-request]), :type :var, :members ()} {:name create-group, :arglists ([create-group-request]), :type :var, :members ()} {:name create-identity-provider, :arglists ([create-identity-provider-request]), :type :var, :members ()} {:name create-resource-server, :arglists ([create-resource-server-request]), :type :var, :members ()} {:name create-user-import-job, :arglists ([create-user-import-job-request]), :type :var, :members ()} {:name create-user-pool, :arglists ([create-user-pool-request]), :type :var, :members ()} {:name create-user-pool-client, :arglists ([create-user-pool-client-request]), :type :var, :members ()} {:name create-user-pool-domain, :arglists ([create-user-pool-domain-request]), :type :var, :members ()} {:name delete-group, :arglists ([delete-group-request]), :type :var, :members ()} {:name delete-identity-provider, :arglists ([delete-identity-provider-request]), :type :var, :members ()} {:name delete-resource-server, :arglists ([delete-resource-server-request]), :type :var, :members ()} {:name delete-user, :arglists ([delete-user-request]), :type :var, :members ()} {:name delete-user-attributes, :arglists ([delete-user-attributes-request]), :type :var, :members ()} {:name delete-user-pool, :arglists ([delete-user-pool-request]), :type :var, :members ()} {:name delete-user-pool-client, :arglists ([delete-user-pool-client-request]), :type :var, :members ()} {:name delete-user-pool-domain, :arglists ([delete-user-pool-domain-request]), :type :var, :members ()} {:name describe-identity-provider, :arglists ([describe-identity-provider-request]), :type :var, :members ()} {:name describe-resource-server, :arglists ([describe-resource-server-request]), :type :var, :members ()} {:name describe-risk-configuration, :arglists ([describe-risk-configuration-request]), :type :var, :members ()} {:name describe-user-import-job, :arglists ([describe-user-import-job-request]), :type :var, :members ()} {:name describe-user-pool, :arglists ([describe-user-pool-request]), :type :var, :members ()} {:name describe-user-pool-client, :arglists ([describe-user-pool-client-request]), :type :var, :members ()} {:name describe-user-pool-domain, :arglists ([describe-user-pool-domain-request]), :type :var, :members ()} {:name forget-device, :arglists ([forget-device-request]), :type :var, :members ()} {:name forgot-password, :arglists ([forgot-password-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-csv-header, :arglists ([get-csvheader-request]), :type :var, :members ()} {:name get-csvheader, :arglists ([get-csvheader-request]), :type :var, :members ()} {:name get-device, :arglists ([get-device-request]), :type :var, :members ()} {:name get-group, :arglists ([get-group-request]), :type :var, :members ()} {:name get-identity-provider-by-identifier, :arglists ([get-identity-provider-by-identifier-request]), :type :var, :members ()} {:name get-signing-certificate, :arglists ([get-signing-certificate-request]), :type :var, :members ()} {:name get-ui-customization, :arglists ([get-uicustomization-request]), :type :var, :members ()} {:name get-uicustomization, :arglists ([get-uicustomization-request]), :type :var, :members ()} {:name get-user, :arglists ([get-user-request]), :type :var, :members ()} {:name get-user-attribute-verification-code, :arglists ([get-user-attribute-verification-code-request]), :type :var, :members ()} {:name get-user-pool-mfa-config, :arglists ([get-user-pool-mfa-config-request]), :type :var, :members ()} {:name global-sign-out, :arglists ([global-sign-out-request]), :type :var, :members ()} {:name initiate-auth, :arglists ([initiate-auth-request]), :type :var, :members ()} {:name list-devices, :arglists ([list-devices-request]), :type :var, :members ()} {:name list-groups, :arglists ([list-groups-request]), :type :var, :members ()} {:name list-identity-providers, :arglists ([list-identity-providers-request]), :type :var, :members ()} {:name list-resource-servers, :arglists ([list-resource-servers-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name list-user-import-jobs, :arglists ([list-user-import-jobs-request]), :type :var, :members ()} {:name list-user-pool-clients, :arglists ([list-user-pool-clients-request]), :type :var, :members ()} {:name list-user-pools, :arglists ([list-user-pools-request]), :type :var, :members ()} {:name list-users, :arglists ([list-users-request]), :type :var, :members ()} {:name list-users-in-group, :arglists ([list-users-in-group-request]), :type :var, :members ()} {:name resend-confirmation-code, :arglists ([resend-confirmation-code-request]), :type :var, :members ()} {:name respond-to-auth-challenge, :arglists ([respond-to-auth-challenge-request]), :type :var, :members ()} {:name set-risk-configuration, :arglists ([set-risk-configuration-request]), :type :var, :members ()} {:name set-ui-customization, :arglists ([set-uicustomization-request]), :type :var, :members ()} {:name set-uicustomization, :arglists ([set-uicustomization-request]), :type :var, :members ()} {:name set-user-mfa-preference, :arglists ([set-user-mfapreference-request]), :type :var, :members ()} {:name set-user-mfapreference, :arglists ([set-user-mfapreference-request]), :type :var, :members ()} {:name set-user-pool-mfa-config, :arglists ([set-user-pool-mfa-config-request]), :type :var, :members ()} {:name set-user-settings, :arglists ([set-user-settings-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name sign-up, :arglists ([sign-up-request]), :type :var, :members ()} {:name start-user-import-job, :arglists ([start-user-import-job-request]), :type :var, :members ()} {:name stop-user-import-job, :arglists ([stop-user-import-job-request]), :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-auth-event-feedback, :arglists ([update-auth-event-feedback-request]), :type :var, :members ()} {:name update-device-status, :arglists ([update-device-status-request]), :type :var, :members ()} {:name update-group, :arglists ([update-group-request]), :type :var, :members ()} {:name update-identity-provider, :arglists ([update-identity-provider-request]), :type :var, :members ()} {:name update-resource-server, :arglists ([update-resource-server-request]), :type :var, :members ()} {:name update-user-attributes, :arglists ([update-user-attributes-request]), :type :var, :members ()} {:name update-user-pool, :arglists ([update-user-pool-request]), :type :var, :members ()} {:name update-user-pool-client, :arglists ([update-user-pool-client-request]), :type :var, :members ()} {:name update-user-pool-domain, :arglists ([update-user-pool-domain-request]), :type :var, :members ()} {:name verify-software-token, :arglists ([verify-software-token-request]), :type :var, :members ()} {:name verify-user-attribute, :arglists ([verify-user-attribute-request]), :type :var, :members ()})} {:doc "Amazon DyanmoDBV2 support - Local Secondary Indexes\n", :name amazonica.aws.dynamodbv2, :publics ({:name batch-get-item, :arglists ([batch-get-item-request] [map] [map string]), :type :var, :members ()} {:name batch-write-item, :arglists ([batch-write-item-request] [map]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-backup, :arglists ([create-backup-request]), :type :var, :members ()} {:name create-global-table, :arglists ([create-global-table-request]), :type :var, :members ()} {:name create-table, :arglists ([create-table-request] [list-1 string list-2 provisioned-throughput]), :type :var, :members ()} {:name delete-backup, :arglists ([delete-backup-request]), :type :var, :members ()} {:name delete-item, :arglists ([delete-item-request] [string map] [string-1 map string-2]), :type :var, :members ()} {:name delete-table, :arglists ([delete-table-request] [string]), :type :var, :members ()} {:name describe-backup, :arglists ([describe-backup-request]), :type :var, :members ()} {:name describe-continuous-backups, :arglists ([describe-continuous-backups-request]), :type :var, :members ()} {:name describe-endpoints, :arglists ([describe-endpoints-request]), :type :var, :members ()} {:name describe-global-table, :arglists ([describe-global-table-request]), :type :var, :members ()} {:name describe-global-table-settings, :arglists ([describe-global-table-settings-request]), :type :var, :members ()} {:name describe-limits, :arglists ([describe-limits-request]), :type :var, :members ()} {:name describe-table, :arglists ([describe-table-request] [string]), :type :var, :members ()} {:name describe-time-to-live, :arglists ([describe-time-to-live-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-item, :arglists ([get-item-request] [string map] [string map boolean]), :type :var, :members ()} {:name list-backups, :arglists ([list-backups-request]), :type :var, :members ()} {:name list-global-tables, :arglists ([list-global-tables-request]), :type :var, :members ()} {:name list-tables, :arglists ([] [integer] [list-tables-request] [string] [string integer]), :type :var, :members ()} {:name list-tags-of-resource, :arglists ([list-tags-of-resource-request]), :type :var, :members ()} {:name marshall-allow-empty-maps, :file "amazonica/aws/dynamodbv2.clj", :line 25, :arglists ([obj]), :type :var, :members ()} {:name put-item, :arglists ([put-item-request] [string map] [string-1 map string-2]), :type :var, :members ()} {:name query, :arglists ([query-request]), :type :var, :members ()} {:name restore-table-from-backup, :arglists ([restore-table-from-backup-request]), :type :var, :members ()} {:name restore-table-to-point-in-time, :arglists ([restore-table-to-point-in-time-request]), :type :var, :members ()} {:name scan, :arglists ([scan-request] [string list] [string map] [string list map]), :type :var, :members ()} {:name set-signer-region-override, :arglists ([string]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name shutdown, :arglists ([]), :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name transact-get-items, :arglists ([transact-get-items-request]), :type :var, :members ()} {:name transact-write-items, :arglists ([transact-write-items-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-continuous-backups, :arglists ([update-continuous-backups-request]), :type :var, :members ()} {:name update-global-table, :arglists ([update-global-table-request]), :type :var, :members ()} {:name update-global-table-settings, :arglists ([update-global-table-settings-request]), :type :var, :members ()} {:name update-item, :arglists ([update-item-request] [string map-1 map-2] [string-1 map-1 map-2 string-2]), :type :var, :members ()} {:name update-table, :arglists ([update-table-request] [string provisioned-throughput]), :type :var, :members ()} {:name update-time-to-live, :arglists ([update-time-to-live-request]), :type :var, :members ()} {:name waiters, :arglists ([]), :type :var, :members ()})} {:name amazonica.aws.apigateway, :publics ({:name client-class, :type :var, :members ()} {:name create-api-key, :arglists ([create-api-key-request]), :type :var, :members ()} {:name create-authorizer, :arglists ([create-authorizer-request]), :type :var, :members ()} {:name create-base-path-mapping, :arglists ([create-base-path-mapping-request]), :type :var, :members ()} {:name create-deployment, :arglists ([create-deployment-request]), :type :var, :members ()} {:name create-documentation-part, :arglists ([create-documentation-part-request]), :type :var, :members ()} {:name create-documentation-version, :arglists ([create-documentation-version-request]), :type :var, :members ()} {:name create-domain-name, :arglists ([create-domain-name-request]), :type :var, :members ()} {:name create-model, :arglists ([create-model-request]), :type :var, :members ()} {:name create-request-validator, :arglists ([create-request-validator-request]), :type :var, :members ()} {:name create-resource, :arglists ([create-resource-request]), :type :var, :members ()} {:name create-rest-api, :arglists ([create-rest-api-request]), :type :var, :members ()} {:name create-stage, :arglists ([create-stage-request]), :type :var, :members ()} {:name create-usage-plan, :arglists ([create-usage-plan-request]), :type :var, :members ()} {:name create-usage-plan-key, :arglists ([create-usage-plan-key-request]), :type :var, :members ()} {:name create-vpc-link, :arglists ([create-vpc-link-request]), :type :var, :members ()} {:name delete-api-key, :arglists ([delete-api-key-request]), :type :var, :members ()} {:name delete-authorizer, :arglists ([delete-authorizer-request]), :type :var, :members ()} {:name delete-base-path-mapping, :arglists ([delete-base-path-mapping-request]), :type :var, :members ()} {:name delete-client-certificate, :arglists ([delete-client-certificate-request]), :type :var, :members ()} {:name delete-deployment, :arglists ([delete-deployment-request]), :type :var, :members ()} {:name delete-documentation-part, :arglists ([delete-documentation-part-request]), :type :var, :members ()} {:name delete-documentation-version, :arglists ([delete-documentation-version-request]), :type :var, :members ()} {:name delete-domain-name, :arglists ([delete-domain-name-request]), :type :var, :members ()} {:name delete-gateway-response, :arglists ([delete-gateway-response-request]), :type :var, :members ()} {:name delete-integration, :arglists ([delete-integration-request]), :type :var, :members ()} {:name delete-integration-response, :arglists ([delete-integration-response-request]), :type :var, :members ()} {:name delete-method, :arglists ([delete-method-request]), :type :var, :members ()} {:name delete-method-response, :arglists ([delete-method-response-request]), :type :var, :members ()} {:name delete-model, :arglists ([delete-model-request]), :type :var, :members ()} {:name delete-request-validator, :arglists ([delete-request-validator-request]), :type :var, :members ()} {:name delete-resource, :arglists ([delete-resource-request]), :type :var, :members ()} {:name delete-rest-api, :arglists ([delete-rest-api-request]), :type :var, :members ()} {:name delete-stage, :arglists ([delete-stage-request]), :type :var, :members ()} {:name delete-usage-plan, :arglists ([delete-usage-plan-request]), :type :var, :members ()} {:name delete-usage-plan-key, :arglists ([delete-usage-plan-key-request]), :type :var, :members ()} {:name delete-vpc-link, :arglists ([delete-vpc-link-request]), :type :var, :members ()} {:name flush-stage-authorizers-cache, :arglists ([flush-stage-authorizers-cache-request]), :type :var, :members ()} {:name flush-stage-cache, :arglists ([flush-stage-cache-request]), :type :var, :members ()} {:name generate-client-certificate, :arglists ([generate-client-certificate-request]), :type :var, :members ()} {:name get-account, :arglists ([get-account-request]), :type :var, :members ()} {:name get-api-key, :arglists ([get-api-key-request]), :type :var, :members ()} {:name get-api-keys, :arglists ([get-api-keys-request]), :type :var, :members ()} {:name get-authorizer, :arglists ([get-authorizer-request]), :type :var, :members ()} {:name get-authorizers, :arglists ([get-authorizers-request]), :type :var, :members ()} {:name get-base-path-mapping, :arglists ([get-base-path-mapping-request]), :type :var, :members ()} {:name get-base-path-mappings, :arglists ([get-base-path-mappings-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-client-certificate, :arglists ([get-client-certificate-request]), :type :var, :members ()} {:name get-client-certificates, :arglists ([get-client-certificates-request]), :type :var, :members ()} {:name get-deployment, :arglists ([get-deployment-request]), :type :var, :members ()} {:name get-deployments, :arglists ([get-deployments-request]), :type :var, :members ()} {:name get-documentation-part, :arglists ([get-documentation-part-request]), :type :var, :members ()} {:name get-documentation-parts, :arglists ([get-documentation-parts-request]), :type :var, :members ()} {:name get-documentation-version, :arglists ([get-documentation-version-request]), :type :var, :members ()} {:name get-documentation-versions, :arglists ([get-documentation-versions-request]), :type :var, :members ()} {:name get-domain-name, :arglists ([get-domain-name-request]), :type :var, :members ()} {:name get-domain-names, :arglists ([get-domain-names-request]), :type :var, :members ()} {:name get-export, :arglists ([get-export-request]), :type :var, :members ()} {:name get-gateway-response, :arglists ([get-gateway-response-request]), :type :var, :members ()} {:name get-gateway-responses, :arglists ([get-gateway-responses-request]), :type :var, :members ()} {:name get-integration, :arglists ([get-integration-request]), :type :var, :members ()} {:name get-integration-response, :arglists ([get-integration-response-request]), :type :var, :members ()} {:name get-method, :arglists ([get-method-request]), :type :var, :members ()} {:name get-method-response, :arglists ([get-method-response-request]), :type :var, :members ()} {:name get-model, :arglists ([get-model-request]), :type :var, :members ()} {:name get-model-template, :arglists ([get-model-template-request]), :type :var, :members ()} {:name get-models, :arglists ([get-models-request]), :type :var, :members ()} {:name get-request-validator, :arglists ([get-request-validator-request]), :type :var, :members ()} {:name get-request-validators, :arglists ([get-request-validators-request]), :type :var, :members ()} {:name get-resource, :arglists ([get-resource-request]), :type :var, :members ()} {:name get-resources, :arglists ([get-resources-request]), :type :var, :members ()} {:name get-rest-api, :arglists ([get-rest-api-request]), :type :var, :members ()} {:name get-rest-apis, :arglists ([get-rest-apis-request]), :type :var, :members ()} {:name get-sdk, :arglists ([get-sdk-request]), :type :var, :members ()} {:name get-sdk-type, :arglists ([get-sdk-type-request]), :type :var, :members ()} {:name get-sdk-types, :arglists ([get-sdk-types-request]), :type :var, :members ()} {:name get-stage, :arglists ([get-stage-request]), :type :var, :members ()} {:name get-stages, :arglists ([get-stages-request]), :type :var, :members ()} {:name get-tags, :arglists ([get-tags-request]), :type :var, :members ()} {:name get-usage, :arglists ([get-usage-request]), :type :var, :members ()} {:name get-usage-plan, :arglists ([get-usage-plan-request]), :type :var, :members ()} {:name get-usage-plan-key, :arglists ([get-usage-plan-key-request]), :type :var, :members ()} {:name get-usage-plan-keys, :arglists ([get-usage-plan-keys-request]), :type :var, :members ()} {:name get-usage-plans, :arglists ([get-usage-plans-request]), :type :var, :members ()} {:name get-vpc-link, :arglists ([get-vpc-link-request]), :type :var, :members ()} {:name get-vpc-links, :arglists ([get-vpc-links-request]), :type :var, :members ()} {:name import-api-keys, :arglists ([import-api-keys-request]), :type :var, :members ()} {:name import-documentation-parts, :arglists ([import-documentation-parts-request]), :type :var, :members ()} {:name import-rest-api, :arglists ([import-rest-api-request]), :type :var, :members ()} {:name put-gateway-response, :arglists ([put-gateway-response-request]), :type :var, :members ()} {:name put-integration, :arglists ([put-integration-request]), :type :var, :members ()} {:name put-integration-response, :arglists ([put-integration-response-request]), :type :var, :members ()} {:name put-method, :arglists ([put-method-request]), :type :var, :members ()} {:name put-method-response, :arglists ([put-method-response-request]), :type :var, :members ()} {:name put-rest-api, :arglists ([put-rest-api-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name test-invoke-authorizer, :arglists ([test-invoke-authorizer-request]), :type :var, :members ()} {:name test-invoke-method, :arglists ([test-invoke-method-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-account, :arglists ([update-account-request]), :type :var, :members ()} {:name update-api-key, :arglists ([update-api-key-request]), :type :var, :members ()} {:name update-authorizer, :arglists ([update-authorizer-request]), :type :var, :members ()} {:name update-base-path-mapping, :arglists ([update-base-path-mapping-request]), :type :var, :members ()} {:name update-client-certificate, :arglists ([update-client-certificate-request]), :type :var, :members ()} {:name update-deployment, :arglists ([update-deployment-request]), :type :var, :members ()} {:name update-documentation-part, :arglists ([update-documentation-part-request]), :type :var, :members ()} {:name update-documentation-version, :arglists ([update-documentation-version-request]), :type :var, :members ()} {:name update-domain-name, :arglists ([update-domain-name-request]), :type :var, :members ()} {:name update-gateway-response, :arglists ([update-gateway-response-request]), :type :var, :members ()} {:name update-integration, :arglists ([update-integration-request]), :type :var, :members ()} {:name update-integration-response, :arglists ([update-integration-response-request]), :type :var, :members ()} {:name update-method, :arglists ([update-method-request]), :type :var, :members ()} {:name update-method-response, :arglists ([update-method-response-request]), :type :var, :members ()} {:name update-model, :arglists ([update-model-request]), :type :var, :members ()} {:name update-request-validator, :arglists ([update-request-validator-request]), :type :var, :members ()} {:name update-resource, :arglists ([update-resource-request]), :type :var, :members ()} {:name update-rest-api, :arglists ([update-rest-api-request]), :type :var, :members ()} {:name update-stage, :arglists ([update-stage-request]), :type :var, :members ()} {:name update-usage, :arglists ([update-usage-request]), :type :var, :members ()} {:name update-usage-plan, :arglists ([update-usage-plan-request]), :type :var, :members ()} {:name update-vpc-link, :arglists ([update-vpc-link-request]), :type :var, :members ()})} {:name amazonica.aws.elasticache, :publics ({:name add-tags-to-resource, :arglists ([add-tags-to-resource-request]), :type :var, :members ()} {:name authorize-cache-security-group-ingress, :arglists ([authorize-cache-security-group-ingress-request]), :type :var, :members ()} {:name batch-apply-update-action, :arglists ([batch-apply-update-action-request]), :type :var, :members ()} {:name batch-stop-update-action, :arglists ([batch-stop-update-action-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name copy-snapshot, :arglists ([copy-snapshot-request]), :type :var, :members ()} {:name create-cache-cluster, :arglists ([create-cache-cluster-request]), :type :var, :members ()} {:name create-cache-parameter-group, :arglists ([create-cache-parameter-group-request]), :type :var, :members ()} {:name create-cache-security-group, :arglists ([create-cache-security-group-request]), :type :var, :members ()} {:name create-cache-subnet-group, :arglists ([create-cache-subnet-group-request]), :type :var, :members ()} {:name create-replication-group, :arglists ([create-replication-group-request]), :type :var, :members ()} {:name create-snapshot, :arglists ([create-snapshot-request]), :type :var, :members ()} {:name decrease-replica-count, :arglists ([decrease-replica-count-request]), :type :var, :members ()} {:name delete-cache-cluster, :arglists ([delete-cache-cluster-request]), :type :var, :members ()} {:name delete-cache-parameter-group, :arglists ([delete-cache-parameter-group-request]), :type :var, :members ()} {:name delete-cache-security-group, :arglists ([delete-cache-security-group-request]), :type :var, :members ()} {:name delete-cache-subnet-group, :arglists ([delete-cache-subnet-group-request]), :type :var, :members ()} {:name delete-replication-group, :arglists ([delete-replication-group-request]), :type :var, :members ()} {:name delete-snapshot, :arglists ([delete-snapshot-request]), :type :var, :members ()} {:name describe-cache-clusters, :arglists ([] [describe-cache-clusters-request]), :type :var, :members ()} {:name describe-cache-engine-versions, :arglists ([] [describe-cache-engine-versions-request]), :type :var, :members ()} {:name describe-cache-parameter-groups, :arglists ([] [describe-cache-parameter-groups-request]), :type :var, :members ()} {:name describe-cache-parameters, :arglists ([describe-cache-parameters-request]), :type :var, :members ()} {:name describe-cache-security-groups, :arglists ([] [describe-cache-security-groups-request]), :type :var, :members ()} {:name describe-cache-subnet-groups, :arglists ([] [describe-cache-subnet-groups-request]), :type :var, :members ()} {:name describe-engine-default-parameters, :arglists ([describe-engine-default-parameters-request]), :type :var, :members ()} {:name describe-events, :arglists ([] [describe-events-request]), :type :var, :members ()} {:name describe-replication-groups, :arglists ([] [describe-replication-groups-request]), :type :var, :members ()} {:name describe-reserved-cache-nodes, :arglists ([] [describe-reserved-cache-nodes-request]), :type :var, :members ()} {:name describe-reserved-cache-nodes-offerings, :arglists ([] [describe-reserved-cache-nodes-offerings-request]), :type :var, :members ()} {:name describe-service-updates, :arglists ([describe-service-updates-request]), :type :var, :members ()} {:name describe-snapshots, :arglists ([] [describe-snapshots-request]), :type :var, :members ()} {:name describe-update-actions, :arglists ([describe-update-actions-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name increase-replica-count, :arglists ([increase-replica-count-request]), :type :var, :members ()} {:name list-allowed-node-type-modifications, :arglists ([] [list-allowed-node-type-modifications-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name modify-cache-cluster, :arglists ([modify-cache-cluster-request]), :type :var, :members ()} {:name modify-cache-parameter-group, :arglists ([modify-cache-parameter-group-request]), :type :var, :members ()} {:name modify-cache-subnet-group, :arglists ([modify-cache-subnet-group-request]), :type :var, :members ()} {:name modify-replication-group, :arglists ([modify-replication-group-request]), :type :var, :members ()} {:name modify-replication-group-shard-configuration, :arglists ([modify-replication-group-shard-configuration-request]), :type :var, :members ()} {:name purchase-reserved-cache-nodes-offering, :arglists ([purchase-reserved-cache-nodes-offering-request]), :type :var, :members ()} {:name reboot-cache-cluster, :arglists ([reboot-cache-cluster-request]), :type :var, :members ()} {:name remove-tags-from-resource, :arglists ([remove-tags-from-resource-request]), :type :var, :members ()} {:name reset-cache-parameter-group, :arglists ([reset-cache-parameter-group-request]), :type :var, :members ()} {:name revoke-cache-security-group-ingress, :arglists ([revoke-cache-security-group-ingress-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name shutdown, :arglists ([]), :type :var, :members ()} {:name test-failover, :arglists ([test-failover-request]), :type :var, :members ()} {:name waiters, :arglists ([]), :type :var, :members ()})} {:name amazonica.aws.glue, :publics ({:name batch-create-partition, :arglists ([batch-create-partition-request]), :type :var, :members ()} {:name batch-delete-connection, :arglists ([batch-delete-connection-request]), :type :var, :members ()} {:name batch-delete-partition, :arglists ([batch-delete-partition-request]), :type :var, :members ()} {:name batch-delete-table, :arglists ([batch-delete-table-request]), :type :var, :members ()} {:name batch-delete-table-version, :arglists ([batch-delete-table-version-request]), :type :var, :members ()} {:name batch-get-crawlers, :arglists ([batch-get-crawlers-request]), :type :var, :members ()} {:name batch-get-dev-endpoints, :arglists ([batch-get-dev-endpoints-request]), :type :var, :members ()} {:name batch-get-jobs, :arglists ([batch-get-jobs-request]), :type :var, :members ()} {:name batch-get-partition, :arglists ([batch-get-partition-request]), :type :var, :members ()} {:name batch-get-triggers, :arglists ([batch-get-triggers-request]), :type :var, :members ()} {:name batch-get-workflows, :arglists ([batch-get-workflows-request]), :type :var, :members ()} {:name batch-stop-job-run, :arglists ([batch-stop-job-run-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-classifier, :arglists ([create-classifier-request]), :type :var, :members ()} {:name create-connection, :arglists ([create-connection-request]), :type :var, :members ()} {:name create-crawler, :arglists ([create-crawler-request]), :type :var, :members ()} {:name create-database, :arglists ([create-database-request]), :type :var, :members ()} {:name create-dev-endpoint, :arglists ([create-dev-endpoint-request]), :type :var, :members ()} {:name create-job, :arglists ([create-job-request]), :type :var, :members ()} {:name create-partition, :arglists ([create-partition-request]), :type :var, :members ()} {:name create-script, :arglists ([create-script-request]), :type :var, :members ()} {:name create-security-configuration, :arglists ([create-security-configuration-request]), :type :var, :members ()} {:name create-table, :arglists ([create-table-request]), :type :var, :members ()} {:name create-trigger, :arglists ([create-trigger-request]), :type :var, :members ()} {:name create-user-defined-function, :arglists ([create-user-defined-function-request]), :type :var, :members ()} {:name create-workflow, :arglists ([create-workflow-request]), :type :var, :members ()} {:name delete-classifier, :arglists ([delete-classifier-request]), :type :var, :members ()} {:name delete-connection, :arglists ([delete-connection-request]), :type :var, :members ()} {:name delete-crawler, :arglists ([delete-crawler-request]), :type :var, :members ()} {:name delete-database, :arglists ([delete-database-request]), :type :var, :members ()} {:name delete-dev-endpoint, :arglists ([delete-dev-endpoint-request]), :type :var, :members ()} {:name delete-job, :arglists ([delete-job-request]), :type :var, :members ()} {:name delete-partition, :arglists ([delete-partition-request]), :type :var, :members ()} {:name delete-resource-policy, :arglists ([delete-resource-policy-request]), :type :var, :members ()} {:name delete-security-configuration, :arglists ([delete-security-configuration-request]), :type :var, :members ()} {:name delete-table, :arglists ([delete-table-request]), :type :var, :members ()} {:name delete-table-version, :arglists ([delete-table-version-request]), :type :var, :members ()} {:name delete-trigger, :arglists ([delete-trigger-request]), :type :var, :members ()} {:name delete-user-defined-function, :arglists ([delete-user-defined-function-request]), :type :var, :members ()} {:name delete-workflow, :arglists ([delete-workflow-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-catalog-import-status, :arglists ([get-catalog-import-status-request]), :type :var, :members ()} {:name get-classifier, :arglists ([get-classifier-request]), :type :var, :members ()} {:name get-classifiers, :arglists ([get-classifiers-request]), :type :var, :members ()} {:name get-connection, :arglists ([get-connection-request]), :type :var, :members ()} {:name get-connections, :arglists ([get-connections-request]), :type :var, :members ()} {:name get-crawler, :arglists ([get-crawler-request]), :type :var, :members ()} {:name get-crawler-metrics, :arglists ([get-crawler-metrics-request]), :type :var, :members ()} {:name get-crawlers, :arglists ([get-crawlers-request]), :type :var, :members ()} {:name get-data-catalog-encryption-settings, :arglists ([get-data-catalog-encryption-settings-request]), :type :var, :members ()} {:name get-database, :arglists ([get-database-request]), :type :var, :members ()} {:name get-databases, :arglists ([get-databases-request]), :type :var, :members ()} {:name get-dataflow-graph, :arglists ([get-dataflow-graph-request]), :type :var, :members ()} {:name get-dev-endpoint, :arglists ([get-dev-endpoint-request]), :type :var, :members ()} {:name get-dev-endpoints, :arglists ([get-dev-endpoints-request]), :type :var, :members ()} {:name get-job, :arglists ([get-job-request]), :type :var, :members ()} {:name get-job-bookmark, :arglists ([get-job-bookmark-request]), :type :var, :members ()} {:name get-job-bookmarks, :arglists ([get-job-bookmarks-request]), :type :var, :members ()} {:name get-job-run, :arglists ([get-job-run-request]), :type :var, :members ()} {:name get-job-runs, :arglists ([get-job-runs-request]), :type :var, :members ()} {:name get-jobs, :arglists ([get-jobs-request]), :type :var, :members ()} {:name get-mapping, :arglists ([get-mapping-request]), :type :var, :members ()} {:name get-partition, :arglists ([get-partition-request]), :type :var, :members ()} {:name get-partitions, :arglists ([get-partitions-request]), :type :var, :members ()} {:name get-plan, :arglists ([get-plan-request]), :type :var, :members ()} {:name get-resource-policy, :arglists ([get-resource-policy-request]), :type :var, :members ()} {:name get-security-configuration, :arglists ([get-security-configuration-request]), :type :var, :members ()} {:name get-security-configurations, :arglists ([get-security-configurations-request]), :type :var, :members ()} {:name get-table, :arglists ([get-table-request]), :type :var, :members ()} {:name get-table-version, :arglists ([get-table-version-request]), :type :var, :members ()} {:name get-table-versions, :arglists ([get-table-versions-request]), :type :var, :members ()} {:name get-tables, :arglists ([get-tables-request]), :type :var, :members ()} {:name get-tags, :arglists ([get-tags-request]), :type :var, :members ()} {:name get-trigger, :arglists ([get-trigger-request]), :type :var, :members ()} {:name get-triggers, :arglists ([get-triggers-request]), :type :var, :members ()} {:name get-user-defined-function, :arglists ([get-user-defined-function-request]), :type :var, :members ()} {:name get-user-defined-functions, :arglists ([get-user-defined-functions-request]), :type :var, :members ()} {:name get-workflow, :arglists ([get-workflow-request]), :type :var, :members ()} {:name get-workflow-run, :arglists ([get-workflow-run-request]), :type :var, :members ()} {:name get-workflow-run-properties, :arglists ([get-workflow-run-properties-request]), :type :var, :members ()} {:name get-workflow-runs, :arglists ([get-workflow-runs-request]), :type :var, :members ()} {:name import-catalog-to-glue, :arglists ([import-catalog-to-glue-request]), :type :var, :members ()} {:name list-crawlers, :arglists ([list-crawlers-request]), :type :var, :members ()} {:name list-dev-endpoints, :arglists ([list-dev-endpoints-request]), :type :var, :members ()} {:name list-jobs, :arglists ([list-jobs-request]), :type :var, :members ()} {:name list-triggers, :arglists ([list-triggers-request]), :type :var, :members ()} {:name list-workflows, :arglists ([list-workflows-request]), :type :var, :members ()} {:name put-data-catalog-encryption-settings, :arglists ([put-data-catalog-encryption-settings-request]), :type :var, :members ()} {:name put-resource-policy, :arglists ([put-resource-policy-request]), :type :var, :members ()} {:name put-workflow-run-properties, :arglists ([put-workflow-run-properties-request]), :type :var, :members ()} {:name reset-job-bookmark, :arglists ([reset-job-bookmark-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name start-crawler, :arglists ([start-crawler-request]), :type :var, :members ()} {:name start-crawler-schedule, :arglists ([start-crawler-schedule-request]), :type :var, :members ()} {:name start-job-run, :arglists ([start-job-run-request]), :type :var, :members ()} {:name start-trigger, :arglists ([start-trigger-request]), :type :var, :members ()} {:name start-workflow-run, :arglists ([start-workflow-run-request]), :type :var, :members ()} {:name stop-crawler, :arglists ([stop-crawler-request]), :type :var, :members ()} {:name stop-crawler-schedule, :arglists ([stop-crawler-schedule-request]), :type :var, :members ()} {:name stop-trigger, :arglists ([stop-trigger-request]), :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-classifier, :arglists ([update-classifier-request]), :type :var, :members ()} {:name update-connection, :arglists ([update-connection-request]), :type :var, :members ()} {:name update-crawler, :arglists ([update-crawler-request]), :type :var, :members ()} {:name update-crawler-schedule, :arglists ([update-crawler-schedule-request]), :type :var, :members ()} {:name update-database, :arglists ([update-database-request]), :type :var, :members ()} {:name update-dev-endpoint, :arglists ([update-dev-endpoint-request]), :type :var, :members ()} {:name update-job, :arglists ([update-job-request]), :type :var, :members ()} {:name update-partition, :arglists ([update-partition-request]), :type :var, :members ()} {:name update-table, :arglists ([update-table-request]), :type :var, :members ()} {:name update-trigger, :arglists ([update-trigger-request]), :type :var, :members ()} {:name update-user-defined-function, :arglists ([update-user-defined-function-request]), :type :var, :members ()} {:name update-workflow, :arglists ([update-workflow-request]), :type :var, :members ()})} {:name amazonica.aws.datapipeline, :publics ({:name activate-pipeline, :arglists ([activate-pipeline-request]), :type :var, :members ()} {:name add-tags, :arglists ([add-tags-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-pipeline, :arglists ([create-pipeline-request]), :type :var, :members ()} {:name deactivate-pipeline, :arglists ([deactivate-pipeline-request]), :type :var, :members ()} {:name delete-pipeline, :arglists ([delete-pipeline-request]), :type :var, :members ()} {:name describe-objects, :arglists ([describe-objects-request]), :type :var, :members ()} {:name describe-pipelines, :arglists ([describe-pipelines-request]), :type :var, :members ()} {:name evaluate-expression, :arglists ([evaluate-expression-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-pipeline-definition, :arglists ([get-pipeline-definition-request]), :type :var, :members ()} {:name list-pipelines, :arglists ([] [list-pipelines-request]), :type :var, :members ()} {:name poll-for-task, :arglists ([poll-for-task-request]), :type :var, :members ()} {:name put-pipeline-definition, :arglists ([put-pipeline-definition-request]), :type :var, :members ()} {:name query-objects, :arglists ([query-objects-request]), :type :var, :members ()} {:name remove-tags, :arglists ([remove-tags-request]), :type :var, :members ()} {:name report-task-progress, :arglists ([report-task-progress-request]), :type :var, :members ()} {:name report-task-runner-heartbeat, :arglists ([report-task-runner-heartbeat-request]), :type :var, :members ()} {:name set-status, :arglists ([set-status-request]), :type :var, :members ()} {:name set-task-status, :arglists ([set-task-status-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name validate-pipeline-definition, :arglists ([validate-pipeline-definition-request]), :type :var, :members ()})} {:name amazonica.aws.mturk, :publics ({:name accept-qualification-request, :arglists ([accept-qualification-request-request]), :type :var, :members ()} {:name approve-assignment, :arglists ([approve-assignment-request]), :type :var, :members ()} {:name associate-qualification-with-worker, :arglists ([associate-qualification-with-worker-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-additional-assignments-for-hit, :arglists ([create-additional-assignments-for-hitrequest]), :type :var, :members ()} {:name create-hit, :arglists ([create-hitrequest]), :type :var, :members ()} {:name create-hit-type, :arglists ([create-hittype-request]), :type :var, :members ()} {:name create-hit-with-hit-type, :arglists ([create-hitwith-hittype-request]), :type :var, :members ()} {:name create-hittype, :arglists ([create-hittype-request]), :type :var, :members ()} {:name create-hitwith-hittype, :arglists ([create-hitwith-hittype-request]), :type :var, :members ()} {:name create-qualification-type, :arglists ([create-qualification-type-request]), :type :var, :members ()} {:name create-worker-block, :arglists ([create-worker-block-request]), :type :var, :members ()} {:name delete-hit, :arglists ([delete-hitrequest]), :type :var, :members ()} {:name delete-qualification-type, :arglists ([delete-qualification-type-request]), :type :var, :members ()} {:name delete-worker-block, :arglists ([delete-worker-block-request]), :type :var, :members ()} {:name disassociate-qualification-from-worker, :arglists ([disassociate-qualification-from-worker-request]), :type :var, :members ()} {:name get-account-balance, :arglists ([get-account-balance-request]), :type :var, :members ()} {:name get-assignment, :arglists ([get-assignment-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-file-upload-url, :arglists ([get-file-upload-urlrequest]), :type :var, :members ()} {:name get-hit, :arglists ([get-hitrequest]), :type :var, :members ()} {:name get-qualification-score, :arglists ([get-qualification-score-request]), :type :var, :members ()} {:name get-qualification-type, :arglists ([get-qualification-type-request]), :type :var, :members ()} {:name list-assignments-for-hit, :arglists ([list-assignments-for-hitrequest]), :type :var, :members ()} {:name list-bonus-payments, :arglists ([list-bonus-payments-request]), :type :var, :members ()} {:name list-hi-ts, :arglists ([list-hits-request]), :type :var, :members ()} {:name list-hi-ts-for-qualification-type, :arglists ([list-hits-for-qualification-type-request]), :type :var, :members ()} {:name list-hits, :arglists ([list-hits-request]), :type :var, :members ()} {:name list-hits-for-qualification-type, :arglists ([list-hits-for-qualification-type-request]), :type :var, :members ()} {:name list-qualification-requests, :arglists ([list-qualification-requests-request]), :type :var, :members ()} {:name list-qualification-types, :arglists ([list-qualification-types-request]), :type :var, :members ()} {:name list-review-policy-results-for-hit, :arglists ([list-review-policy-results-for-hitrequest]), :type :var, :members ()} {:name list-reviewable-hi-ts, :arglists ([list-reviewable-hits-request]), :type :var, :members ()} {:name list-reviewable-hits, :arglists ([list-reviewable-hits-request]), :type :var, :members ()} {:name list-worker-blocks, :arglists ([list-worker-blocks-request]), :type :var, :members ()} {:name list-workers-with-qualification-type, :arglists ([list-workers-with-qualification-type-request]), :type :var, :members ()} {:name notify-workers, :arglists ([notify-workers-request]), :type :var, :members ()} {:name reject-assignment, :arglists ([reject-assignment-request]), :type :var, :members ()} {:name reject-qualification-request, :arglists ([reject-qualification-request-request]), :type :var, :members ()} {:name send-bonus, :arglists ([send-bonus-request]), :type :var, :members ()} {:name send-test-event-notification, :arglists ([send-test-event-notification-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name update-expiration-for-hit, :arglists ([update-expiration-for-hitrequest]), :type :var, :members ()} {:name update-hit-review-status, :arglists ([update-hitreview-status-request]), :type :var, :members ()} {:name update-hit-type-of-hit, :arglists ([update-hittype-of-hitrequest]), :type :var, :members ()} {:name update-hitreview-status, :arglists ([update-hitreview-status-request]), :type :var, :members ()} {:name update-hittype-of-hit, :arglists ([update-hittype-of-hitrequest]), :type :var, :members ()} {:name update-notification-settings, :arglists ([update-notification-settings-request]), :type :var, :members ()} {:name update-qualification-type, :arglists ([update-qualification-type-request]), :type :var, :members ()})} {:name amazonica.aws.budgets, :publics ({:name client-class, :type :var, :members ()} {:name create-budget, :arglists ([create-budget-request]), :type :var, :members ()} {:name create-notification, :arglists ([create-notification-request]), :type :var, :members ()} {:name create-subscriber, :arglists ([create-subscriber-request]), :type :var, :members ()} {:name delete-budget, :arglists ([delete-budget-request]), :type :var, :members ()} {:name delete-notification, :arglists ([delete-notification-request]), :type :var, :members ()} {:name delete-subscriber, :arglists ([delete-subscriber-request]), :type :var, :members ()} {:name describe-budget, :arglists ([describe-budget-request]), :type :var, :members ()} {:name describe-budget-performance-history, :arglists ([describe-budget-performance-history-request]), :type :var, :members ()} {:name describe-budgets, :arglists ([describe-budgets-request]), :type :var, :members ()} {:name describe-notifications-for-budget, :arglists ([describe-notifications-for-budget-request]), :type :var, :members ()} {:name describe-subscribers-for-notification, :arglists ([describe-subscribers-for-notification-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name update-budget, :arglists ([update-budget-request]), :type :var, :members ()} {:name update-notification, :arglists ([update-notification-request]), :type :var, :members ()} {:name update-subscriber, :arglists ([update-subscriber-request]), :type :var, :members ()})} {:name amazonica.aws.config, :publics ({:name batch-get-aggregate-resource-config, :arglists ([batch-get-aggregate-resource-config-request]), :type :var, :members ()} {:name batch-get-resource-config, :arglists ([batch-get-resource-config-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name delete-aggregation-authorization, :arglists ([delete-aggregation-authorization-request]), :type :var, :members ()} {:name delete-config-rule, :arglists ([delete-config-rule-request]), :type :var, :members ()} {:name delete-configuration-aggregator, :arglists ([delete-configuration-aggregator-request]), :type :var, :members ()} {:name delete-configuration-recorder, :arglists ([delete-configuration-recorder-request]), :type :var, :members ()} {:name delete-delivery-channel, :arglists ([delete-delivery-channel-request]), :type :var, :members ()} {:name delete-evaluation-results, :arglists ([delete-evaluation-results-request]), :type :var, :members ()} {:name delete-organization-config-rule, :arglists ([delete-organization-config-rule-request]), :type :var, :members ()} {:name delete-pending-aggregation-request, :arglists ([delete-pending-aggregation-request-request]), :type :var, :members ()} {:name delete-remediation-configuration, :arglists ([delete-remediation-configuration-request]), :type :var, :members ()} {:name delete-retention-configuration, :arglists ([delete-retention-configuration-request]), :type :var, :members ()} {:name deliver-config-snapshot, :arglists ([deliver-config-snapshot-request]), :type :var, :members ()} {:name describe-aggregate-compliance-by-config-rules, :arglists ([describe-aggregate-compliance-by-config-rules-request]), :type :var, :members ()} {:name describe-aggregation-authorizations, :arglists ([describe-aggregation-authorizations-request]), :type :var, :members ()} {:name describe-compliance-by-config-rule, :arglists ([] [describe-compliance-by-config-rule-request]), :type :var, :members ()} {:name describe-compliance-by-resource, :arglists ([] [describe-compliance-by-resource-request]), :type :var, :members ()} {:name describe-config-rule-evaluation-status, :arglists ([] [describe-config-rule-evaluation-status-request]), :type :var, :members ()} {:name describe-config-rules, :arglists ([] [describe-config-rules-request]), :type :var, :members ()} {:name describe-configuration-aggregator-sources-status, :arglists ([describe-configuration-aggregator-sources-status-request]), :type :var, :members ()} {:name describe-configuration-aggregators, :arglists ([describe-configuration-aggregators-request]), :type :var, :members ()} {:name describe-configuration-recorder-status, :arglists ([] [describe-configuration-recorder-status-request]), :type :var, :members ()} {:name describe-configuration-recorders, :arglists ([] [describe-configuration-recorders-request]), :type :var, :members ()} {:name describe-delivery-channel-status, :arglists ([] [describe-delivery-channel-status-request]), :type :var, :members ()} {:name describe-delivery-channels, :arglists ([] [describe-delivery-channels-request]), :type :var, :members ()} {:name describe-organization-config-rule-statuses, :arglists ([describe-organization-config-rule-statuses-request]), :type :var, :members ()} {:name describe-organization-config-rules, :arglists ([describe-organization-config-rules-request]), :type :var, :members ()} {:name describe-pending-aggregation-requests, :arglists ([describe-pending-aggregation-requests-request]), :type :var, :members ()} {:name describe-remediation-configurations, :arglists ([describe-remediation-configurations-request]), :type :var, :members ()} {:name describe-remediation-execution-status, :arglists ([describe-remediation-execution-status-request]), :type :var, :members ()} {:name describe-retention-configurations, :arglists ([describe-retention-configurations-request]), :type :var, :members ()} {:name get-aggregate-compliance-details-by-config-rule, :arglists ([get-aggregate-compliance-details-by-config-rule-request]), :type :var, :members ()} {:name get-aggregate-config-rule-compliance-summary, :arglists ([get-aggregate-config-rule-compliance-summary-request]), :type :var, :members ()} {:name get-aggregate-discovered-resource-counts, :arglists ([get-aggregate-discovered-resource-counts-request]), :type :var, :members ()} {:name get-aggregate-resource-config, :arglists ([get-aggregate-resource-config-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-compliance-details-by-config-rule, :arglists ([get-compliance-details-by-config-rule-request]), :type :var, :members ()} {:name get-compliance-details-by-resource, :arglists ([get-compliance-details-by-resource-request]), :type :var, :members ()} {:name get-compliance-summary-by-config-rule, :arglists ([] [get-compliance-summary-by-config-rule-request]), :type :var, :members ()} {:name get-compliance-summary-by-resource-type, :arglists ([] [get-compliance-summary-by-resource-type-request]), :type :var, :members ()} {:name get-discovered-resource-counts, :arglists ([get-discovered-resource-counts-request]), :type :var, :members ()} {:name get-organization-config-rule-detailed-status, :arglists ([get-organization-config-rule-detailed-status-request]), :type :var, :members ()} {:name get-resource-config-history, :arglists ([get-resource-config-history-request]), :type :var, :members ()} {:name list-aggregate-discovered-resources, :arglists ([list-aggregate-discovered-resources-request]), :type :var, :members ()} {:name list-discovered-resources, :arglists ([list-discovered-resources-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name put-aggregation-authorization, :arglists ([put-aggregation-authorization-request]), :type :var, :members ()} {:name put-config-rule, :arglists ([put-config-rule-request]), :type :var, :members ()} {:name put-configuration-aggregator, :arglists ([put-configuration-aggregator-request]), :type :var, :members ()} {:name put-configuration-recorder, :arglists ([put-configuration-recorder-request]), :type :var, :members ()} {:name put-delivery-channel, :arglists ([put-delivery-channel-request]), :type :var, :members ()} {:name put-evaluations, :arglists ([put-evaluations-request]), :type :var, :members ()} {:name put-organization-config-rule, :arglists ([put-organization-config-rule-request]), :type :var, :members ()} {:name put-remediation-configurations, :arglists ([put-remediation-configurations-request]), :type :var, :members ()} {:name put-retention-configuration, :arglists ([put-retention-configuration-request]), :type :var, :members ()} {:name select-resource-config, :arglists ([select-resource-config-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name start-config-rules-evaluation, :arglists ([start-config-rules-evaluation-request]), :type :var, :members ()} {:name start-configuration-recorder, :arglists ([start-configuration-recorder-request]), :type :var, :members ()} {:name start-remediation-execution, :arglists ([start-remediation-execution-request]), :type :var, :members ()} {:name stop-configuration-recorder, :arglists ([stop-configuration-recorder-request]), :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()})} {:name amazonica.aws.guardduty, :publics ({:name accept-invitation, :arglists ([accept-invitation-request]), :type :var, :members ()} {:name archive-findings, :arglists ([archive-findings-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-detector, :arglists ([create-detector-request]), :type :var, :members ()} {:name create-filter, :arglists ([create-filter-request]), :type :var, :members ()} {:name create-ip-set, :arglists ([create-ipset-request]), :type :var, :members ()} {:name create-ipset, :arglists ([create-ipset-request]), :type :var, :members ()} {:name create-members, :arglists ([create-members-request]), :type :var, :members ()} {:name create-sample-findings, :arglists ([create-sample-findings-request]), :type :var, :members ()} {:name create-threat-intel-set, :arglists ([create-threat-intel-set-request]), :type :var, :members ()} {:name decline-invitations, :arglists ([decline-invitations-request]), :type :var, :members ()} {:name delete-detector, :arglists ([delete-detector-request]), :type :var, :members ()} {:name delete-filter, :arglists ([delete-filter-request]), :type :var, :members ()} {:name delete-invitations, :arglists ([delete-invitations-request]), :type :var, :members ()} {:name delete-ip-set, :arglists ([delete-ipset-request]), :type :var, :members ()} {:name delete-ipset, :arglists ([delete-ipset-request]), :type :var, :members ()} {:name delete-members, :arglists ([delete-members-request]), :type :var, :members ()} {:name delete-threat-intel-set, :arglists ([delete-threat-intel-set-request]), :type :var, :members ()} {:name disassociate-from-master-account, :arglists ([disassociate-from-master-account-request]), :type :var, :members ()} {:name disassociate-members, :arglists ([disassociate-members-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-detector, :arglists ([get-detector-request]), :type :var, :members ()} {:name get-filter, :arglists ([get-filter-request]), :type :var, :members ()} {:name get-findings, :arglists ([get-findings-request]), :type :var, :members ()} {:name get-findings-statistics, :arglists ([get-findings-statistics-request]), :type :var, :members ()} {:name get-invitations-count, :arglists ([get-invitations-count-request]), :type :var, :members ()} {:name get-ip-set, :arglists ([get-ipset-request]), :type :var, :members ()} {:name get-ipset, :arglists ([get-ipset-request]), :type :var, :members ()} {:name get-master-account, :arglists ([get-master-account-request]), :type :var, :members ()} {:name get-members, :arglists ([get-members-request]), :type :var, :members ()} {:name get-threat-intel-set, :arglists ([get-threat-intel-set-request]), :type :var, :members ()} {:name invite-members, :arglists ([invite-members-request]), :type :var, :members ()} {:name list-detectors, :arglists ([list-detectors-request]), :type :var, :members ()} {:name list-filters, :arglists ([list-filters-request]), :type :var, :members ()} {:name list-findings, :arglists ([list-findings-request]), :type :var, :members ()} {:name list-invitations, :arglists ([list-invitations-request]), :type :var, :members ()} {:name list-ip-sets, :arglists ([list-ipsets-request]), :type :var, :members ()} {:name list-ipsets, :arglists ([list-ipsets-request]), :type :var, :members ()} {:name list-members, :arglists ([list-members-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name list-threat-intel-sets, :arglists ([list-threat-intel-sets-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name start-monitoring-members, :arglists ([start-monitoring-members-request]), :type :var, :members ()} {:name stop-monitoring-members, :arglists ([stop-monitoring-members-request]), :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name unarchive-findings, :arglists ([unarchive-findings-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-detector, :arglists ([update-detector-request]), :type :var, :members ()} {:name update-filter, :arglists ([update-filter-request]), :type :var, :members ()} {:name update-findings-feedback, :arglists ([update-findings-feedback-request]), :type :var, :members ()} {:name update-ip-set, :arglists ([update-ipset-request]), :type :var, :members ()} {:name update-ipset, :arglists ([update-ipset-request]), :type :var, :members ()} {:name update-threat-intel-set, :arglists ([update-threat-intel-set-request]), :type :var, :members ()})} {:name amazonica.aws.cognitoidentity, :publics ({:name client-class, :type :var, :members ()} {:name create-identity-pool, :arglists ([create-identity-pool-request]), :type :var, :members ()} {:name delete-identities, :arglists ([delete-identities-request]), :type :var, :members ()} {:name delete-identity-pool, :arglists ([delete-identity-pool-request]), :type :var, :members ()} {:name describe-identity, :arglists ([describe-identity-request]), :type :var, :members ()} {:name describe-identity-pool, :arglists ([describe-identity-pool-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-credentials-for-identity, :arglists ([get-credentials-for-identity-request]), :type :var, :members ()} {:name get-id, :arglists ([get-id-request]), :type :var, :members ()} {:name get-identity-pool-roles, :arglists ([get-identity-pool-roles-request]), :type :var, :members ()} {:name get-open-id-token, :arglists ([get-open-id-token-request]), :type :var, :members ()} {:name get-open-id-token-for-developer-identity, :arglists ([get-open-id-token-for-developer-identity-request]), :type :var, :members ()} {:name get-openid-token, :arglists ([get-open-id-token-request]), :type :var, :members ()} {:name get-openid-token-for-developer-identity, :arglists ([get-open-id-token-for-developer-identity-request]), :type :var, :members ()} {:name list-identities, :arglists ([list-identities-request]), :type :var, :members ()} {:name list-identity-pools, :arglists ([list-identity-pools-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name lookup-developer-identity, :arglists ([lookup-developer-identity-request]), :type :var, :members ()} {:name merge-developer-identities, :arglists ([merge-developer-identities-request]), :type :var, :members ()} {:name set-identity-pool-roles, :arglists ([set-identity-pool-roles-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name unlink-developer-identity, :arglists ([unlink-developer-identity-request]), :type :var, :members ()} {:name unlink-identity, :arglists ([unlink-identity-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-identity-pool, :arglists ([update-identity-pool-request]), :type :var, :members ()})} {:name amazonica.aws.iotanalytics, :publics ({:name batch-put-message, :arglists ([batch-put-message-request]), :type :var, :members ()} {:name cancel-pipeline-reprocessing, :arglists ([cancel-pipeline-reprocessing-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-channel, :arglists ([create-channel-request]), :type :var, :members ()} {:name create-dataset, :arglists ([create-dataset-request]), :type :var, :members ()} {:name create-dataset-content, :arglists ([create-dataset-content-request]), :type :var, :members ()} {:name create-datastore, :arglists ([create-datastore-request]), :type :var, :members ()} {:name create-pipeline, :arglists ([create-pipeline-request]), :type :var, :members ()} {:name delete-channel, :arglists ([delete-channel-request]), :type :var, :members ()} {:name delete-dataset, :arglists ([delete-dataset-request]), :type :var, :members ()} {:name delete-dataset-content, :arglists ([delete-dataset-content-request]), :type :var, :members ()} {:name delete-datastore, :arglists ([delete-datastore-request]), :type :var, :members ()} {:name delete-pipeline, :arglists ([delete-pipeline-request]), :type :var, :members ()} {:name describe-channel, :arglists ([describe-channel-request]), :type :var, :members ()} {:name describe-dataset, :arglists ([describe-dataset-request]), :type :var, :members ()} {:name describe-datastore, :arglists ([describe-datastore-request]), :type :var, :members ()} {:name describe-logging-options, :arglists ([describe-logging-options-request]), :type :var, :members ()} {:name describe-pipeline, :arglists ([describe-pipeline-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-dataset-content, :arglists ([get-dataset-content-request]), :type :var, :members ()} {:name list-channels, :arglists ([list-channels-request]), :type :var, :members ()} {:name list-dataset-contents, :arglists ([list-dataset-contents-request]), :type :var, :members ()} {:name list-datasets, :arglists ([list-datasets-request]), :type :var, :members ()} {:name list-datastores, :arglists ([list-datastores-request]), :type :var, :members ()} {:name list-pipelines, :arglists ([list-pipelines-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name put-logging-options, :arglists ([put-logging-options-request]), :type :var, :members ()} {:name run-pipeline-activity, :arglists ([run-pipeline-activity-request]), :type :var, :members ()} {:name sample-channel-data, :arglists ([sample-channel-data-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name start-pipeline-reprocessing, :arglists ([start-pipeline-reprocessing-request]), :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-channel, :arglists ([update-channel-request]), :type :var, :members ()} {:name update-dataset, :arglists ([update-dataset-request]), :type :var, :members ()} {:name update-datastore, :arglists ([update-datastore-request]), :type :var, :members ()} {:name update-pipeline, :arglists ([update-pipeline-request]), :type :var, :members ()})} {:name amazonica.aws.route53, :publics ({:name associate-vpc-with-hosted-zone, :arglists ([associate-vpcwith-hosted-zone-request]), :type :var, :members ()} {:name associate-vpcwith-hosted-zone, :arglists ([associate-vpcwith-hosted-zone-request]), :type :var, :members ()} {:name change-resource-record-sets, :arglists ([change-resource-record-sets-request]), :type :var, :members ()} {:name change-tags-for-resource, :arglists ([change-tags-for-resource-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-health-check, :arglists ([create-health-check-request]), :type :var, :members ()} {:name create-hosted-zone, :arglists ([create-hosted-zone-request]), :type :var, :members ()} {:name create-query-logging-config, :arglists ([create-query-logging-config-request]), :type :var, :members ()} {:name create-reusable-delegation-set, :arglists ([create-reusable-delegation-set-request]), :type :var, :members ()} {:name create-traffic-policy, :arglists ([create-traffic-policy-request]), :type :var, :members ()} {:name create-traffic-policy-instance, :arglists ([create-traffic-policy-instance-request]), :type :var, :members ()} {:name create-traffic-policy-version, :arglists ([create-traffic-policy-version-request]), :type :var, :members ()} {:name create-vpc-association-authorization, :arglists ([create-vpcassociation-authorization-request]), :type :var, :members ()} {:name create-vpcassociation-authorization, :arglists ([create-vpcassociation-authorization-request]), :type :var, :members ()} {:name delete-health-check, :arglists ([delete-health-check-request]), :type :var, :members ()} {:name delete-hosted-zone, :arglists ([delete-hosted-zone-request]), :type :var, :members ()} {:name delete-query-logging-config, :arglists ([delete-query-logging-config-request]), :type :var, :members ()} {:name delete-reusable-delegation-set, :arglists ([delete-reusable-delegation-set-request]), :type :var, :members ()} {:name delete-traffic-policy, :arglists ([delete-traffic-policy-request]), :type :var, :members ()} {:name delete-traffic-policy-instance, :arglists ([delete-traffic-policy-instance-request]), :type :var, :members ()} {:name delete-vpc-association-authorization, :arglists ([delete-vpcassociation-authorization-request]), :type :var, :members ()} {:name delete-vpcassociation-authorization, :arglists ([delete-vpcassociation-authorization-request]), :type :var, :members ()} {:name disassociate-vpc-from-hosted-zone, :arglists ([disassociate-vpcfrom-hosted-zone-request]), :type :var, :members ()} {:name disassociate-vpcfrom-hosted-zone, :arglists ([disassociate-vpcfrom-hosted-zone-request]), :type :var, :members ()} {:name get-account-limit, :arglists ([get-account-limit-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-change, :arglists ([get-change-request]), :type :var, :members ()} {:name get-checker-ip-ranges, :arglists ([] [get-checker-ip-ranges-request]), :type :var, :members ()} {:name get-geo-location, :arglists ([] [get-geo-location-request]), :type :var, :members ()} {:name get-health-check, :arglists ([get-health-check-request]), :type :var, :members ()} {:name get-health-check-count, :arglists ([] [get-health-check-count-request]), :type :var, :members ()} {:name get-health-check-last-failure-reason, :arglists ([get-health-check-last-failure-reason-request]), :type :var, :members ()} {:name get-health-check-status, :arglists ([get-health-check-status-request]), :type :var, :members ()} {:name get-hosted-zone, :arglists ([get-hosted-zone-request]), :type :var, :members ()} {:name get-hosted-zone-count, :arglists ([] [get-hosted-zone-count-request]), :type :var, :members ()} {:name get-hosted-zone-limit, :arglists ([get-hosted-zone-limit-request]), :type :var, :members ()} {:name get-query-logging-config, :arglists ([get-query-logging-config-request]), :type :var, :members ()} {:name get-reusable-delegation-set, :arglists ([get-reusable-delegation-set-request]), :type :var, :members ()} {:name get-reusable-delegation-set-limit, :arglists ([get-reusable-delegation-set-limit-request]), :type :var, :members ()} {:name get-traffic-policy, :arglists ([get-traffic-policy-request]), :type :var, :members ()} {:name get-traffic-policy-instance, :arglists ([get-traffic-policy-instance-request]), :type :var, :members ()} {:name get-traffic-policy-instance-count, :arglists ([] [get-traffic-policy-instance-count-request]), :type :var, :members ()} {:name list-geo-locations, :arglists ([] [list-geo-locations-request]), :type :var, :members ()} {:name list-health-checks, :arglists ([] [list-health-checks-request]), :type :var, :members ()} {:name list-hosted-zones, :arglists ([] [list-hosted-zones-request]), :type :var, :members ()} {:name list-hosted-zones-by-name, :arglists ([] [list-hosted-zones-by-name-request]), :type :var, :members ()} {:name list-query-logging-configs, :arglists ([list-query-logging-configs-request]), :type :var, :members ()} {:name list-resource-record-sets, :arglists ([list-resource-record-sets-request]), :type :var, :members ()} {:name list-reusable-delegation-sets, :arglists ([] [list-reusable-delegation-sets-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name list-tags-for-resources, :arglists ([list-tags-for-resources-request]), :type :var, :members ()} {:name list-traffic-policies, :arglists ([] [list-traffic-policies-request]), :type :var, :members ()} {:name list-traffic-policy-instances, :arglists ([] [list-traffic-policy-instances-request]), :type :var, :members ()} {:name list-traffic-policy-instances-by-hosted-zone, :arglists ([list-traffic-policy-instances-by-hosted-zone-request]), :type :var, :members ()} {:name list-traffic-policy-instances-by-policy, :arglists ([list-traffic-policy-instances-by-policy-request]), :type :var, :members ()} {:name list-traffic-policy-versions, :arglists ([list-traffic-policy-versions-request]), :type :var, :members ()} {:name list-vpc-association-authorizations, :arglists ([list-vpcassociation-authorizations-request]), :type :var, :members ()} {:name list-vpcassociation-authorizations, :arglists ([list-vpcassociation-authorizations-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name shutdown, :arglists ([]), :type :var, :members ()} {:name test-dns-answer, :arglists ([test-dnsanswer-request]), :type :var, :members ()} {:name test-dnsanswer, :arglists ([test-dnsanswer-request]), :type :var, :members ()} {:name update-health-check, :arglists ([update-health-check-request]), :type :var, :members ()} {:name update-hosted-zone-comment, :arglists ([update-hosted-zone-comment-request]), :type :var, :members ()} {:name update-traffic-policy-comment, :arglists ([update-traffic-policy-comment-request]), :type :var, :members ()} {:name update-traffic-policy-instance, :arglists ([update-traffic-policy-instance-request]), :type :var, :members ()} {:name waiters, :arglists ([]), :type :var, :members ()})} {:name amazonica.aws.athena, :publics ({:name batch-get-named-query, :arglists ([batch-get-named-query-request]), :type :var, :members ()} {:name batch-get-query-execution, :arglists ([batch-get-query-execution-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-named-query, :arglists ([create-named-query-request]), :type :var, :members ()} {:name create-work-group, :arglists ([create-work-group-request]), :type :var, :members ()} {:name delete-named-query, :arglists ([delete-named-query-request]), :type :var, :members ()} {:name delete-work-group, :arglists ([delete-work-group-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-named-query, :arglists ([get-named-query-request]), :type :var, :members ()} {:name get-query-execution, :arglists ([get-query-execution-request]), :type :var, :members ()} {:name get-query-results, :arglists ([get-query-results-request]), :type :var, :members ()} {:name get-work-group, :arglists ([get-work-group-request]), :type :var, :members ()} {:name list-named-queries, :arglists ([list-named-queries-request]), :type :var, :members ()} {:name list-query-executions, :arglists ([list-query-executions-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name list-work-groups, :arglists ([list-work-groups-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name start-query-execution, :arglists ([start-query-execution-request]), :type :var, :members ()} {:name stop-query-execution, :arglists ([stop-query-execution-request]), :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-work-group, :arglists ([update-work-group-request]), :type :var, :members ()})} {:name amazonica.aws.snowball, :publics ({:name cancel-cluster, :arglists ([cancel-cluster-request]), :type :var, :members ()} {:name cancel-job, :arglists ([cancel-job-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-address, :arglists ([create-address-request]), :type :var, :members ()} {:name create-cluster, :arglists ([create-cluster-request]), :type :var, :members ()} {:name create-job, :arglists ([create-job-request]), :type :var, :members ()} {:name describe-address, :arglists ([describe-address-request]), :type :var, :members ()} {:name describe-addresses, :arglists ([describe-addresses-request]), :type :var, :members ()} {:name describe-cluster, :arglists ([describe-cluster-request]), :type :var, :members ()} {:name describe-job, :arglists ([describe-job-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-job-manifest, :arglists ([get-job-manifest-request]), :type :var, :members ()} {:name get-job-unlock-code, :arglists ([get-job-unlock-code-request]), :type :var, :members ()} {:name get-snowball-usage, :arglists ([get-snowball-usage-request]), :type :var, :members ()} {:name list-cluster-jobs, :arglists ([list-cluster-jobs-request]), :type :var, :members ()} {:name list-clusters, :arglists ([list-clusters-request]), :type :var, :members ()} {:name list-compatible-images, :arglists ([list-compatible-images-request]), :type :var, :members ()} {:name list-jobs, :arglists ([list-jobs-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name update-cluster, :arglists ([update-cluster-request]), :type :var, :members ()} {:name update-job, :arglists ([update-job-request]), :type :var, :members ()})} {:name amazonica.aws.elasticsearch, :publics ({:name add-tags, :arglists ([add-tags-request]), :type :var, :members ()} {:name cancel-elasticsearch-service-software-update, :arglists ([cancel-elasticsearch-service-software-update-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-elasticsearch-domain, :arglists ([create-elasticsearch-domain-request]), :type :var, :members ()} {:name delete-elasticsearch-domain, :arglists ([delete-elasticsearch-domain-request]), :type :var, :members ()} {:name delete-elasticsearch-service-role, :arglists ([delete-elasticsearch-service-role-request]), :type :var, :members ()} {:name describe-elasticsearch-domain, :arglists ([describe-elasticsearch-domain-request]), :type :var, :members ()} {:name describe-elasticsearch-domain-config, :arglists ([describe-elasticsearch-domain-config-request]), :type :var, :members ()} {:name describe-elasticsearch-domains, :arglists ([describe-elasticsearch-domains-request]), :type :var, :members ()} {:name describe-elasticsearch-instance-type-limits, :arglists ([describe-elasticsearch-instance-type-limits-request]), :type :var, :members ()} {:name describe-reserved-elasticsearch-instance-offerings, :arglists ([describe-reserved-elasticsearch-instance-offerings-request]), :type :var, :members ()} {:name describe-reserved-elasticsearch-instances, :arglists ([describe-reserved-elasticsearch-instances-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-compatible-elasticsearch-versions, :arglists ([get-compatible-elasticsearch-versions-request]), :type :var, :members ()} {:name get-upgrade-history, :arglists ([get-upgrade-history-request]), :type :var, :members ()} {:name get-upgrade-status, :arglists ([get-upgrade-status-request]), :type :var, :members ()} {:name list-domain-names, :arglists ([list-domain-names-request]), :type :var, :members ()} {:name list-elasticsearch-instance-types, :arglists ([list-elasticsearch-instance-types-request]), :type :var, :members ()} {:name list-elasticsearch-versions, :arglists ([list-elasticsearch-versions-request]), :type :var, :members ()} {:name list-tags, :arglists ([list-tags-request]), :type :var, :members ()} {:name purchase-reserved-elasticsearch-instance-offering, :arglists ([purchase-reserved-elasticsearch-instance-offering-request]), :type :var, :members ()} {:name remove-tags, :arglists ([remove-tags-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name start-elasticsearch-service-software-update, :arglists ([start-elasticsearch-service-software-update-request]), :type :var, :members ()} {:name update-elasticsearch-domain-config, :arglists ([update-elasticsearch-domain-config-request]), :type :var, :members ()} {:name upgrade-elasticsearch-domain, :arglists ([upgrade-elasticsearch-domain-request]), :type :var, :members ()})} {:name amazonica.aws.polly, :publics ({:name client-class, :type :var, :members ()} {:name delete-lexicon, :arglists ([delete-lexicon-request]), :type :var, :members ()} {:name describe-voices, :arglists ([describe-voices-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-lexicon, :arglists ([get-lexicon-request]), :type :var, :members ()} {:name get-speech-synthesis-task, :arglists ([get-speech-synthesis-task-request]), :type :var, :members ()} {:name list-lexicons, :arglists ([list-lexicons-request]), :type :var, :members ()} {:name list-speech-synthesis-tasks, :arglists ([list-speech-synthesis-tasks-request]), :type :var, :members ()} {:name presigners, :arglists ([]), :type :var, :members ()} {:name put-lexicon, :arglists ([put-lexicon-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name start-speech-synthesis-task, :arglists ([start-speech-synthesis-task-request]), :type :var, :members ()} {:name synthesize-speech, :arglists ([synthesize-speech-request]), :type :var, :members ()})} {:name amazonica.aws.mq, :publics ({:name client-class, :type :var, :members ()} {:name create-broker, :arglists ([create-broker-request]), :type :var, :members ()} {:name create-configuration, :arglists ([create-configuration-request]), :type :var, :members ()} {:name create-tags, :arglists ([create-tags-request]), :type :var, :members ()} {:name create-user, :arglists ([create-user-request]), :type :var, :members ()} {:name delete-broker, :arglists ([delete-broker-request]), :type :var, :members ()} {:name delete-tags, :arglists ([delete-tags-request]), :type :var, :members ()} {:name delete-user, :arglists ([delete-user-request]), :type :var, :members ()} {:name describe-broker, :arglists ([describe-broker-request]), :type :var, :members ()} {:name describe-broker-engine-types, :arglists ([describe-broker-engine-types-request]), :type :var, :members ()} {:name describe-broker-instance-options, :arglists ([describe-broker-instance-options-request]), :type :var, :members ()} {:name describe-configuration, :arglists ([describe-configuration-request]), :type :var, :members ()} {:name describe-configuration-revision, :arglists ([describe-configuration-revision-request]), :type :var, :members ()} {:name describe-user, :arglists ([describe-user-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name list-brokers, :arglists ([list-brokers-request]), :type :var, :members ()} {:name list-configuration-revisions, :arglists ([list-configuration-revisions-request]), :type :var, :members ()} {:name list-configurations, :arglists ([list-configurations-request]), :type :var, :members ()} {:name list-tags, :arglists ([list-tags-request]), :type :var, :members ()} {:name list-users, :arglists ([list-users-request]), :type :var, :members ()} {:name reboot-broker, :arglists ([reboot-broker-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name update-broker, :arglists ([update-broker-request]), :type :var, :members ()} {:name update-configuration, :arglists ([update-configuration-request]), :type :var, :members ()} {:name update-user, :arglists ([update-user-request]), :type :var, :members ()})} {:name amazonica.aws.codebuild, :publics ({:name batch-delete-builds, :arglists ([batch-delete-builds-request]), :type :var, :members ()} {:name batch-get-builds, :arglists ([batch-get-builds-request]), :type :var, :members ()} {:name batch-get-projects, :arglists ([batch-get-projects-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-project, :arglists ([create-project-request]), :type :var, :members ()} {:name create-webhook, :arglists ([create-webhook-request]), :type :var, :members ()} {:name delete-project, :arglists ([delete-project-request]), :type :var, :members ()} {:name delete-source-credentials, :arglists ([delete-source-credentials-request]), :type :var, :members ()} {:name delete-webhook, :arglists ([delete-webhook-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name import-source-credentials, :arglists ([import-source-credentials-request]), :type :var, :members ()} {:name invalidate-project-cache, :arglists ([invalidate-project-cache-request]), :type :var, :members ()} {:name list-builds, :arglists ([list-builds-request]), :type :var, :members ()} {:name list-builds-for-project, :arglists ([list-builds-for-project-request]), :type :var, :members ()} {:name list-curated-environment-images, :arglists ([list-curated-environment-images-request]), :type :var, :members ()} {:name list-projects, :arglists ([list-projects-request]), :type :var, :members ()} {:name list-source-credentials, :arglists ([list-source-credentials-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name start-build, :arglists ([start-build-request]), :type :var, :members ()} {:name stop-build, :arglists ([stop-build-request]), :type :var, :members ()} {:name update-project, :arglists ([update-project-request]), :type :var, :members ()} {:name update-webhook, :arglists ([update-webhook-request]), :type :var, :members ()})} {:name amazonica.aws.certificatemanager, :publics ({:name add-tags-to-certificate, :arglists ([add-tags-to-certificate-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name delete-certificate, :arglists ([delete-certificate-request]), :type :var, :members ()} {:name describe-certificate, :arglists ([describe-certificate-request]), :type :var, :members ()} {:name export-certificate, :arglists ([export-certificate-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-certificate, :arglists ([get-certificate-request]), :type :var, :members ()} {:name import-certificate, :arglists ([import-certificate-request]), :type :var, :members ()} {:name list-certificates, :arglists ([list-certificates-request]), :type :var, :members ()} {:name list-tags-for-certificate, :arglists ([list-tags-for-certificate-request]), :type :var, :members ()} {:name remove-tags-from-certificate, :arglists ([remove-tags-from-certificate-request]), :type :var, :members ()} {:name renew-certificate, :arglists ([renew-certificate-request]), :type :var, :members ()} {:name request-certificate, :arglists ([request-certificate-request]), :type :var, :members ()} {:name resend-validation-email, :arglists ([resend-validation-email-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name shutdown, :arglists ([]), :type :var, :members ()} {:name update-certificate-options, :arglists ([update-certificate-options-request]), :type :var, :members ()} {:name waiters, :arglists ([]), :type :var, :members ()})} {:name amazonica.aws.simplesystemsmanagement, :publics ({:name add-tags-to-resource, :arglists ([add-tags-to-resource-request]), :type :var, :members ()} {:name cancel-command, :arglists ([cancel-command-request]), :type :var, :members ()} {:name cancel-maintenance-window-execution, :arglists ([cancel-maintenance-window-execution-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-activation, :arglists ([create-activation-request]), :type :var, :members ()} {:name create-association, :arglists ([create-association-request]), :type :var, :members ()} {:name create-association-batch, :arglists ([create-association-batch-request]), :type :var, :members ()} {:name create-document, :arglists ([create-document-request]), :type :var, :members ()} {:name create-maintenance-window, :arglists ([create-maintenance-window-request]), :type :var, :members ()} {:name create-ops-item, :arglists ([create-ops-item-request]), :type :var, :members ()} {:name create-patch-baseline, :arglists ([create-patch-baseline-request]), :type :var, :members ()} {:name create-resource-data-sync, :arglists ([create-resource-data-sync-request]), :type :var, :members ()} {:name delete-activation, :arglists ([delete-activation-request]), :type :var, :members ()} {:name delete-association, :arglists ([delete-association-request]), :type :var, :members ()} {:name delete-document, :arglists ([delete-document-request]), :type :var, :members ()} {:name delete-inventory, :arglists ([delete-inventory-request]), :type :var, :members ()} {:name delete-maintenance-window, :arglists ([delete-maintenance-window-request]), :type :var, :members ()} {:name delete-parameter, :arglists ([delete-parameter-request]), :type :var, :members ()} {:name delete-parameters, :arglists ([delete-parameters-request]), :type :var, :members ()} {:name delete-patch-baseline, :arglists ([delete-patch-baseline-request]), :type :var, :members ()} {:name delete-resource-data-sync, :arglists ([delete-resource-data-sync-request]), :type :var, :members ()} {:name deregister-managed-instance, :arglists ([deregister-managed-instance-request]), :type :var, :members ()} {:name deregister-patch-baseline-for-patch-group, :arglists ([deregister-patch-baseline-for-patch-group-request]), :type :var, :members ()} {:name deregister-target-from-maintenance-window, :arglists ([deregister-target-from-maintenance-window-request]), :type :var, :members ()} {:name deregister-task-from-maintenance-window, :arglists ([deregister-task-from-maintenance-window-request]), :type :var, :members ()} {:name describe-activations, :arglists ([describe-activations-request]), :type :var, :members ()} {:name describe-association, :arglists ([describe-association-request]), :type :var, :members ()} {:name describe-association-execution-targets, :arglists ([describe-association-execution-targets-request]), :type :var, :members ()} {:name describe-association-executions, :arglists ([describe-association-executions-request]), :type :var, :members ()} {:name describe-automation-executions, :arglists ([describe-automation-executions-request]), :type :var, :members ()} {:name describe-automation-step-executions, :arglists ([describe-automation-step-executions-request]), :type :var, :members ()} {:name describe-available-patches, :arglists ([describe-available-patches-request]), :type :var, :members ()} {:name describe-document, :arglists ([describe-document-request]), :type :var, :members ()} {:name describe-document-permission, :arglists ([describe-document-permission-request]), :type :var, :members ()} {:name describe-effective-instance-associations, :arglists ([describe-effective-instance-associations-request]), :type :var, :members ()} {:name describe-effective-patches-for-patch-baseline, :arglists ([describe-effective-patches-for-patch-baseline-request]), :type :var, :members ()} {:name describe-instance-associations-status, :arglists ([describe-instance-associations-status-request]), :type :var, :members ()} {:name describe-instance-information, :arglists ([describe-instance-information-request]), :type :var, :members ()} {:name describe-instance-patch-states, :arglists ([describe-instance-patch-states-request]), :type :var, :members ()} {:name describe-instance-patch-states-for-patch-group, :arglists ([describe-instance-patch-states-for-patch-group-request]), :type :var, :members ()} {:name describe-instance-patches, :arglists ([describe-instance-patches-request]), :type :var, :members ()} {:name describe-inventory-deletions, :arglists ([describe-inventory-deletions-request]), :type :var, :members ()} {:name describe-maintenance-window-execution-task-invocations, :arglists ([describe-maintenance-window-execution-task-invocations-request]), :type :var, :members ()} {:name describe-maintenance-window-execution-tasks, :arglists ([describe-maintenance-window-execution-tasks-request]), :type :var, :members ()} {:name describe-maintenance-window-executions, :arglists ([describe-maintenance-window-executions-request]), :type :var, :members ()} {:name describe-maintenance-window-schedule, :arglists ([describe-maintenance-window-schedule-request]), :type :var, :members ()} {:name describe-maintenance-window-targets, :arglists ([describe-maintenance-window-targets-request]), :type :var, :members ()} {:name describe-maintenance-window-tasks, :arglists ([describe-maintenance-window-tasks-request]), :type :var, :members ()} {:name describe-maintenance-windows, :arglists ([describe-maintenance-windows-request]), :type :var, :members ()} {:name describe-maintenance-windows-for-target, :arglists ([describe-maintenance-windows-for-target-request]), :type :var, :members ()} {:name describe-ops-items, :arglists ([describe-ops-items-request]), :type :var, :members ()} {:name describe-parameters, :arglists ([describe-parameters-request]), :type :var, :members ()} {:name describe-patch-baselines, :arglists ([describe-patch-baselines-request]), :type :var, :members ()} {:name describe-patch-group-state, :arglists ([describe-patch-group-state-request]), :type :var, :members ()} {:name describe-patch-groups, :arglists ([describe-patch-groups-request]), :type :var, :members ()} {:name describe-patch-properties, :arglists ([describe-patch-properties-request]), :type :var, :members ()} {:name describe-sessions, :arglists ([describe-sessions-request]), :type :var, :members ()} {:name get-automation-execution, :arglists ([get-automation-execution-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-command-invocation, :arglists ([get-command-invocation-request]), :type :var, :members ()} {:name get-connection-status, :arglists ([get-connection-status-request]), :type :var, :members ()} {:name get-default-patch-baseline, :arglists ([get-default-patch-baseline-request]), :type :var, :members ()} {:name get-deployable-patch-snapshot-for-instance, :arglists ([get-deployable-patch-snapshot-for-instance-request]), :type :var, :members ()} {:name get-document, :arglists ([get-document-request]), :type :var, :members ()} {:name get-inventory, :arglists ([get-inventory-request]), :type :var, :members ()} {:name get-inventory-schema, :arglists ([get-inventory-schema-request]), :type :var, :members ()} {:name get-maintenance-window, :arglists ([get-maintenance-window-request]), :type :var, :members ()} {:name get-maintenance-window-execution, :arglists ([get-maintenance-window-execution-request]), :type :var, :members ()} {:name get-maintenance-window-execution-task, :arglists ([get-maintenance-window-execution-task-request]), :type :var, :members ()} {:name get-maintenance-window-execution-task-invocation, :arglists ([get-maintenance-window-execution-task-invocation-request]), :type :var, :members ()} {:name get-maintenance-window-task, :arglists ([get-maintenance-window-task-request]), :type :var, :members ()} {:name get-ops-item, :arglists ([get-ops-item-request]), :type :var, :members ()} {:name get-ops-summary, :arglists ([get-ops-summary-request]), :type :var, :members ()} {:name get-parameter, :arglists ([get-parameter-request]), :type :var, :members ()} {:name get-parameter-history, :arglists ([get-parameter-history-request]), :type :var, :members ()} {:name get-parameters, :arglists ([get-parameters-request]), :type :var, :members ()} {:name get-parameters-by-path, :arglists ([get-parameters-by-path-request]), :type :var, :members ()} {:name get-patch-baseline, :arglists ([get-patch-baseline-request]), :type :var, :members ()} {:name get-patch-baseline-for-patch-group, :arglists ([get-patch-baseline-for-patch-group-request]), :type :var, :members ()} {:name get-service-setting, :arglists ([get-service-setting-request]), :type :var, :members ()} {:name label-parameter-version, :arglists ([label-parameter-version-request]), :type :var, :members ()} {:name list-association-versions, :arglists ([list-association-versions-request]), :type :var, :members ()} {:name list-associations, :arglists ([list-associations-request]), :type :var, :members ()} {:name list-command-invocations, :arglists ([list-command-invocations-request]), :type :var, :members ()} {:name list-commands, :arglists ([list-commands-request]), :type :var, :members ()} {:name list-compliance-items, :arglists ([list-compliance-items-request]), :type :var, :members ()} {:name list-compliance-summaries, :arglists ([list-compliance-summaries-request]), :type :var, :members ()} {:name list-document-versions, :arglists ([list-document-versions-request]), :type :var, :members ()} {:name list-documents, :arglists ([] [list-documents-request]), :type :var, :members ()} {:name list-inventory-entries, :arglists ([list-inventory-entries-request]), :type :var, :members ()} {:name list-resource-compliance-summaries, :arglists ([list-resource-compliance-summaries-request]), :type :var, :members ()} {:name list-resource-data-sync, :arglists ([list-resource-data-sync-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name modify-document-permission, :arglists ([modify-document-permission-request]), :type :var, :members ()} {:name put-compliance-items, :arglists ([put-compliance-items-request]), :type :var, :members ()} {:name put-inventory, :arglists ([put-inventory-request]), :type :var, :members ()} {:name put-parameter, :arglists ([put-parameter-request]), :type :var, :members ()} {:name register-default-patch-baseline, :arglists ([register-default-patch-baseline-request]), :type :var, :members ()} {:name register-patch-baseline-for-patch-group, :arglists ([register-patch-baseline-for-patch-group-request]), :type :var, :members ()} {:name register-target-with-maintenance-window, :arglists ([register-target-with-maintenance-window-request]), :type :var, :members ()} {:name register-task-with-maintenance-window, :arglists ([register-task-with-maintenance-window-request]), :type :var, :members ()} {:name remove-tags-from-resource, :arglists ([remove-tags-from-resource-request]), :type :var, :members ()} {:name reset-service-setting, :arglists ([reset-service-setting-request]), :type :var, :members ()} {:name resume-session, :arglists ([resume-session-request]), :type :var, :members ()} {:name send-automation-signal, :arglists ([send-automation-signal-request]), :type :var, :members ()} {:name send-command, :arglists ([send-command-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name start-associations-once, :arglists ([start-associations-once-request]), :type :var, :members ()} {:name start-automation-execution, :arglists ([start-automation-execution-request]), :type :var, :members ()} {:name start-session, :arglists ([start-session-request]), :type :var, :members ()} {:name stop-automation-execution, :arglists ([stop-automation-execution-request]), :type :var, :members ()} {:name terminate-session, :arglists ([terminate-session-request]), :type :var, :members ()} {:name update-association, :arglists ([update-association-request]), :type :var, :members ()} {:name update-association-status, :arglists ([update-association-status-request]), :type :var, :members ()} {:name update-document, :arglists ([update-document-request]), :type :var, :members ()} {:name update-document-default-version, :arglists ([update-document-default-version-request]), :type :var, :members ()} {:name update-maintenance-window, :arglists ([update-maintenance-window-request]), :type :var, :members ()} {:name update-maintenance-window-target, :arglists ([update-maintenance-window-target-request]), :type :var, :members ()} {:name update-maintenance-window-task, :arglists ([update-maintenance-window-task-request]), :type :var, :members ()} {:name update-managed-instance-role, :arglists ([update-managed-instance-role-request]), :type :var, :members ()} {:name update-ops-item, :arglists ([update-ops-item-request]), :type :var, :members ()} {:name update-patch-baseline, :arglists ([update-patch-baseline-request]), :type :var, :members ()} {:name update-service-setting, :arglists ([update-service-setting-request]), :type :var, :members ()})} {:name amazonica.aws.machinelearning, :publics ({:name add-tags, :arglists ([add-tags-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-batch-prediction, :arglists ([create-batch-prediction-request]), :type :var, :members ()} {:name create-data-source-from-rds, :arglists ([create-data-source-from-rdsrequest]), :type :var, :members ()} {:name create-data-source-from-redshift, :arglists ([create-data-source-from-redshift-request]), :type :var, :members ()} {:name create-data-source-from-s3, :arglists ([create-data-source-from-s3-request]), :type :var, :members ()} {:name create-evaluation, :arglists ([create-evaluation-request]), :type :var, :members ()} {:name create-ml-model, :arglists ([create-mlmodel-request]), :type :var, :members ()} {:name create-mlmodel, :arglists ([create-mlmodel-request]), :type :var, :members ()} {:name create-realtime-endpoint, :arglists ([create-realtime-endpoint-request]), :type :var, :members ()} {:name delete-batch-prediction, :arglists ([delete-batch-prediction-request]), :type :var, :members ()} {:name delete-data-source, :arglists ([delete-data-source-request]), :type :var, :members ()} {:name delete-evaluation, :arglists ([delete-evaluation-request]), :type :var, :members ()} {:name delete-ml-model, :arglists ([delete-mlmodel-request]), :type :var, :members ()} {:name delete-mlmodel, :arglists ([delete-mlmodel-request]), :type :var, :members ()} {:name delete-realtime-endpoint, :arglists ([delete-realtime-endpoint-request]), :type :var, :members ()} {:name delete-tags, :arglists ([delete-tags-request]), :type :var, :members ()} {:name describe-batch-predictions, :arglists ([] [describe-batch-predictions-request]), :type :var, :members ()} {:name describe-data-sources, :arglists ([] [describe-data-sources-request]), :type :var, :members ()} {:name describe-evaluations, :arglists ([] [describe-evaluations-request]), :type :var, :members ()} {:name describe-ml-models, :arglists ([] [describe-mlmodels-request]), :type :var, :members ()} {:name describe-mlmodels, :arglists ([] [describe-mlmodels-request]), :type :var, :members ()} {:name describe-tags, :arglists ([describe-tags-request]), :type :var, :members ()} {:name get-batch-prediction, :arglists ([get-batch-prediction-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-data-source, :arglists ([get-data-source-request]), :type :var, :members ()} {:name get-evaluation, :arglists ([get-evaluation-request]), :type :var, :members ()} {:name get-ml-model, :arglists ([get-mlmodel-request]), :type :var, :members ()} {:name get-mlmodel, :arglists ([get-mlmodel-request]), :type :var, :members ()} {:name predict, :arglists ([predict-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name shutdown, :arglists ([]), :type :var, :members ()} {:name update-batch-prediction, :arglists ([update-batch-prediction-request]), :type :var, :members ()} {:name update-data-source, :arglists ([update-data-source-request]), :type :var, :members ()} {:name update-evaluation, :arglists ([update-evaluation-request]), :type :var, :members ()} {:name update-ml-model, :arglists ([update-mlmodel-request]), :type :var, :members ()} {:name update-mlmodel, :arglists ([update-mlmodel-request]), :type :var, :members ()} {:name waiters, :arglists ([]), :type :var, :members ()})} {:name amazonica.aws.lexmodelbuilding, :publics ({:name client-class, :type :var, :members ()} {:name create-bot-version, :arglists ([create-bot-version-request]), :type :var, :members ()} {:name create-intent-version, :arglists ([create-intent-version-request]), :type :var, :members ()} {:name create-slot-type-version, :arglists ([create-slot-type-version-request]), :type :var, :members ()} {:name delete-bot, :arglists ([delete-bot-request]), :type :var, :members ()} {:name delete-bot-alias, :arglists ([delete-bot-alias-request]), :type :var, :members ()} {:name delete-bot-channel-association, :arglists ([delete-bot-channel-association-request]), :type :var, :members ()} {:name delete-bot-version, :arglists ([delete-bot-version-request]), :type :var, :members ()} {:name delete-intent, :arglists ([delete-intent-request]), :type :var, :members ()} {:name delete-intent-version, :arglists ([delete-intent-version-request]), :type :var, :members ()} {:name delete-slot-type, :arglists ([delete-slot-type-request]), :type :var, :members ()} {:name delete-slot-type-version, :arglists ([delete-slot-type-version-request]), :type :var, :members ()} {:name delete-utterances, :arglists ([delete-utterances-request]), :type :var, :members ()} {:name get-bot, :arglists ([get-bot-request]), :type :var, :members ()} {:name get-bot-alias, :arglists ([get-bot-alias-request]), :type :var, :members ()} {:name get-bot-aliases, :arglists ([get-bot-aliases-request]), :type :var, :members ()} {:name get-bot-channel-association, :arglists ([get-bot-channel-association-request]), :type :var, :members ()} {:name get-bot-channel-associations, :arglists ([get-bot-channel-associations-request]), :type :var, :members ()} {:name get-bot-versions, :arglists ([get-bot-versions-request]), :type :var, :members ()} {:name get-bots, :arglists ([get-bots-request]), :type :var, :members ()} {:name get-builtin-intent, :arglists ([get-builtin-intent-request]), :type :var, :members ()} {:name get-builtin-intents, :arglists ([get-builtin-intents-request]), :type :var, :members ()} {:name get-builtin-slot-types, :arglists ([get-builtin-slot-types-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-export, :arglists ([get-export-request]), :type :var, :members ()} {:name get-import, :arglists ([get-import-request]), :type :var, :members ()} {:name get-intent, :arglists ([get-intent-request]), :type :var, :members ()} {:name get-intent-versions, :arglists ([get-intent-versions-request]), :type :var, :members ()} {:name get-intents, :arglists ([get-intents-request]), :type :var, :members ()} {:name get-slot-type, :arglists ([get-slot-type-request]), :type :var, :members ()} {:name get-slot-type-versions, :arglists ([get-slot-type-versions-request]), :type :var, :members ()} {:name get-slot-types, :arglists ([get-slot-types-request]), :type :var, :members ()} {:name get-utterances-view, :arglists ([get-utterances-view-request]), :type :var, :members ()} {:name put-bot, :arglists ([put-bot-request]), :type :var, :members ()} {:name put-bot-alias, :arglists ([put-bot-alias-request]), :type :var, :members ()} {:name put-intent, :arglists ([put-intent-request]), :type :var, :members ()} {:name put-slot-type, :arglists ([put-slot-type-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name start-import, :arglists ([start-import-request]), :type :var, :members ()})} {:name amazonica.aws.glacier, :publics ({:name abort-multipart-upload, :arglists ([abort-multipart-upload-request]), :type :var, :members ()} {:name abort-vault-lock, :arglists ([abort-vault-lock-request]), :type :var, :members ()} {:name add-tags-to-vault, :arglists ([add-tags-to-vault-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name complete-multipart-upload, :arglists ([complete-multipart-upload-request]), :type :var, :members ()} {:name complete-vault-lock, :arglists ([complete-vault-lock-request]), :type :var, :members ()} {:name create-vault, :arglists ([create-vault-request]), :type :var, :members ()} {:name delete-archive, :arglists ([delete-archive-request]), :type :var, :members ()} {:name delete-vault, :arglists ([delete-vault-request]), :type :var, :members ()} {:name delete-vault-access-policy, :arglists ([delete-vault-access-policy-request]), :type :var, :members ()} {:name delete-vault-notifications, :arglists ([delete-vault-notifications-request]), :type :var, :members ()} {:name describe-job, :arglists ([describe-job-request]), :type :var, :members ()} {:name describe-vault, :arglists ([describe-vault-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-data-retrieval-policy, :arglists ([get-data-retrieval-policy-request]), :type :var, :members ()} {:name get-job-output, :arglists ([get-job-output-request]), :type :var, :members ()} {:name get-vault-access-policy, :arglists ([get-vault-access-policy-request]), :type :var, :members ()} {:name get-vault-lock, :arglists ([get-vault-lock-request]), :type :var, :members ()} {:name get-vault-notifications, :arglists ([get-vault-notifications-request]), :type :var, :members ()} {:name initiate-job, :arglists ([initiate-job-request]), :type :var, :members ()} {:name initiate-multipart-upload, :arglists ([initiate-multipart-upload-request]), :type :var, :members ()} {:name initiate-vault-lock, :arglists ([initiate-vault-lock-request]), :type :var, :members ()} {:name list-jobs, :arglists ([list-jobs-request]), :type :var, :members ()} {:name list-multipart-uploads, :arglists ([list-multipart-uploads-request]), :type :var, :members ()} {:name list-parts, :arglists ([list-parts-request]), :type :var, :members ()} {:name list-provisioned-capacity, :arglists ([list-provisioned-capacity-request]), :type :var, :members ()} {:name list-tags-for-vault, :arglists ([list-tags-for-vault-request]), :type :var, :members ()} {:name list-vaults, :arglists ([list-vaults-request]), :type :var, :members ()} {:name purchase-provisioned-capacity, :arglists ([purchase-provisioned-capacity-request]), :type :var, :members ()} {:name remove-tags-from-vault, :arglists ([remove-tags-from-vault-request]), :type :var, :members ()} {:name set-data-retrieval-policy, :arglists ([set-data-retrieval-policy-request]), :type :var, :members ()} {:name set-vault-access-policy, :arglists ([set-vault-access-policy-request]), :type :var, :members ()} {:name set-vault-notifications, :arglists ([set-vault-notifications-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name shutdown, :arglists ([]), :type :var, :members ()} {:name tree-hash, :file "amazonica/aws/glacier.clj", :line 20, :arglists ([f cred & args]), :type :var, :members ()} {:name upload-archive, :arglists ([upload-archive-request]), :type :var, :members ()} {:name upload-multipart-part, :arglists ([upload-multipart-part-request]), :type :var, :members ()} {:name waiters, :arglists ([]), :type :var, :members ()})} {:name amazonica.aws.elastictranscoder, :publics ({:name cancel-job, :arglists ([cancel-job-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-job, :arglists ([create-job-request]), :type :var, :members ()} {:name create-pipeline, :arglists ([create-pipeline-request]), :type :var, :members ()} {:name create-preset, :arglists ([create-preset-request]), :type :var, :members ()} {:name delete-pipeline, :arglists ([delete-pipeline-request]), :type :var, :members ()} {:name delete-preset, :arglists ([delete-preset-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name list-jobs-by-pipeline, :arglists ([list-jobs-by-pipeline-request]), :type :var, :members ()} {:name list-jobs-by-status, :arglists ([list-jobs-by-status-request]), :type :var, :members ()} {:name list-pipelines, :arglists ([] [list-pipelines-request]), :type :var, :members ()} {:name list-presets, :arglists ([] [list-presets-request]), :type :var, :members ()} {:name read-job, :arglists ([read-job-request]), :type :var, :members ()} {:name read-pipeline, :arglists ([read-pipeline-request]), :type :var, :members ()} {:name read-preset, :arglists ([read-preset-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name shutdown, :arglists ([]), :type :var, :members ()} {:name test-role, :arglists ([test-role-request]), :type :var, :members ()} {:name update-pipeline, :arglists ([update-pipeline-request]), :type :var, :members ()} {:name update-pipeline-notifications, :arglists ([update-pipeline-notifications-request]), :type :var, :members ()} {:name update-pipeline-status, :arglists ([update-pipeline-status-request]), :type :var, :members ()} {:name waiters, :arglists ([]), :type :var, :members ()})} {:name amazonica.aws.neptune, :publics ({:name add-role-to-db-cluster, :arglists ([add-role-to-dbcluster-request]), :type :var, :members ()} {:name add-role-to-dbcluster, :arglists ([add-role-to-dbcluster-request]), :type :var, :members ()} {:name add-source-identifier-to-subscription, :arglists ([add-source-identifier-to-subscription-request]), :type :var, :members ()} {:name add-tags-to-resource, :arglists ([add-tags-to-resource-request]), :type :var, :members ()} {:name apply-pending-maintenance-action, :arglists ([apply-pending-maintenance-action-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name copy-db-cluster-parameter-group, :arglists ([copy-dbcluster-parameter-group-request]), :type :var, :members ()} {:name copy-db-cluster-snapshot, :arglists ([copy-dbcluster-snapshot-request]), :type :var, :members ()} {:name copy-db-parameter-group, :arglists ([copy-dbparameter-group-request]), :type :var, :members ()} {:name copy-dbcluster-parameter-group, :arglists ([copy-dbcluster-parameter-group-request]), :type :var, :members ()} {:name copy-dbcluster-snapshot, :arglists ([copy-dbcluster-snapshot-request]), :type :var, :members ()} {:name copy-dbparameter-group, :arglists ([copy-dbparameter-group-request]), :type :var, :members ()} {:name create-db-cluster, :arglists ([create-dbcluster-request]), :type :var, :members ()} {:name create-db-cluster-parameter-group, :arglists ([create-dbcluster-parameter-group-request]), :type :var, :members ()} {:name create-db-cluster-snapshot, :arglists ([create-dbcluster-snapshot-request]), :type :var, :members ()} {:name create-db-instance, :arglists ([create-dbinstance-request]), :type :var, :members ()} {:name create-db-parameter-group, :arglists ([create-dbparameter-group-request]), :type :var, :members ()} {:name create-db-subnet-group, :arglists ([create-dbsubnet-group-request]), :type :var, :members ()} {:name create-dbcluster, :arglists ([create-dbcluster-request]), :type :var, :members ()} {:name create-dbcluster-parameter-group, :arglists ([create-dbcluster-parameter-group-request]), :type :var, :members ()} {:name create-dbcluster-snapshot, :arglists ([create-dbcluster-snapshot-request]), :type :var, :members ()} {:name create-dbinstance, :arglists ([create-dbinstance-request]), :type :var, :members ()} {:name create-dbparameter-group, :arglists ([create-dbparameter-group-request]), :type :var, :members ()} {:name create-dbsubnet-group, :arglists ([create-dbsubnet-group-request]), :type :var, :members ()} {:name create-event-subscription, :arglists ([create-event-subscription-request]), :type :var, :members ()} {:name delete-db-cluster, :arglists ([delete-dbcluster-request]), :type :var, :members ()} {:name delete-db-cluster-parameter-group, :arglists ([delete-dbcluster-parameter-group-request]), :type :var, :members ()} {:name delete-db-cluster-snapshot, :arglists ([delete-dbcluster-snapshot-request]), :type :var, :members ()} {:name delete-db-instance, :arglists ([delete-dbinstance-request]), :type :var, :members ()} {:name delete-db-parameter-group, :arglists ([delete-dbparameter-group-request]), :type :var, :members ()} {:name delete-db-subnet-group, :arglists ([delete-dbsubnet-group-request]), :type :var, :members ()} {:name delete-dbcluster, :arglists ([delete-dbcluster-request]), :type :var, :members ()} {:name delete-dbcluster-parameter-group, :arglists ([delete-dbcluster-parameter-group-request]), :type :var, :members ()} {:name delete-dbcluster-snapshot, :arglists ([delete-dbcluster-snapshot-request]), :type :var, :members ()} {:name delete-dbinstance, :arglists ([delete-dbinstance-request]), :type :var, :members ()} {:name delete-dbparameter-group, :arglists ([delete-dbparameter-group-request]), :type :var, :members ()} {:name delete-dbsubnet-group, :arglists ([delete-dbsubnet-group-request]), :type :var, :members ()} {:name delete-event-subscription, :arglists ([delete-event-subscription-request]), :type :var, :members ()} {:name describe-db-cluster-parameter-groups, :arglists ([describe-dbcluster-parameter-groups-request]), :type :var, :members ()} {:name describe-db-cluster-parameters, :arglists ([describe-dbcluster-parameters-request]), :type :var, :members ()} {:name describe-db-cluster-snapshot-attributes, :arglists ([describe-dbcluster-snapshot-attributes-request]), :type :var, :members ()} {:name describe-db-cluster-snapshots, :arglists ([describe-dbcluster-snapshots-request]), :type :var, :members ()} {:name describe-db-clusters, :arglists ([describe-dbclusters-request]), :type :var, :members ()} {:name describe-db-engine-versions, :arglists ([describe-dbengine-versions-request]), :type :var, :members ()} {:name describe-db-instances, :arglists ([describe-dbinstances-request]), :type :var, :members ()} {:name describe-db-parameter-groups, :arglists ([describe-dbparameter-groups-request]), :type :var, :members ()} {:name describe-db-parameters, :arglists ([describe-dbparameters-request]), :type :var, :members ()} {:name describe-db-subnet-groups, :arglists ([describe-dbsubnet-groups-request]), :type :var, :members ()} {:name describe-dbcluster-parameter-groups, :arglists ([describe-dbcluster-parameter-groups-request]), :type :var, :members ()} {:name describe-dbcluster-parameters, :arglists ([describe-dbcluster-parameters-request]), :type :var, :members ()} {:name describe-dbcluster-snapshot-attributes, :arglists ([describe-dbcluster-snapshot-attributes-request]), :type :var, :members ()} {:name describe-dbcluster-snapshots, :arglists ([describe-dbcluster-snapshots-request]), :type :var, :members ()} {:name describe-dbclusters, :arglists ([describe-dbclusters-request]), :type :var, :members ()} {:name describe-dbengine-versions, :arglists ([describe-dbengine-versions-request]), :type :var, :members ()} {:name describe-dbinstances, :arglists ([describe-dbinstances-request]), :type :var, :members ()} {:name describe-dbparameter-groups, :arglists ([describe-dbparameter-groups-request]), :type :var, :members ()} {:name describe-dbparameters, :arglists ([describe-dbparameters-request]), :type :var, :members ()} {:name describe-dbsubnet-groups, :arglists ([describe-dbsubnet-groups-request]), :type :var, :members ()} {:name describe-engine-default-cluster-parameters, :arglists ([describe-engine-default-cluster-parameters-request]), :type :var, :members ()} {:name describe-engine-default-parameters, :arglists ([describe-engine-default-parameters-request]), :type :var, :members ()} {:name describe-event-categories, :arglists ([describe-event-categories-request]), :type :var, :members ()} {:name describe-event-subscriptions, :arglists ([describe-event-subscriptions-request]), :type :var, :members ()} {:name describe-events, :arglists ([describe-events-request]), :type :var, :members ()} {:name describe-orderable-db-instance-options, :arglists ([describe-orderable-dbinstance-options-request]), :type :var, :members ()} {:name describe-orderable-dbinstance-options, :arglists ([describe-orderable-dbinstance-options-request]), :type :var, :members ()} {:name describe-pending-maintenance-actions, :arglists ([describe-pending-maintenance-actions-request]), :type :var, :members ()} {:name describe-valid-db-instance-modifications, :arglists ([describe-valid-dbinstance-modifications-request]), :type :var, :members ()} {:name describe-valid-dbinstance-modifications, :arglists ([describe-valid-dbinstance-modifications-request]), :type :var, :members ()} {:name failover-db-cluster, :arglists ([failover-dbcluster-request]), :type :var, :members ()} {:name failover-dbcluster, :arglists ([failover-dbcluster-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name modify-db-cluster, :arglists ([modify-dbcluster-request]), :type :var, :members ()} {:name modify-db-cluster-parameter-group, :arglists ([modify-dbcluster-parameter-group-request]), :type :var, :members ()} {:name modify-db-cluster-snapshot-attribute, :arglists ([modify-dbcluster-snapshot-attribute-request]), :type :var, :members ()} {:name modify-db-instance, :arglists ([modify-dbinstance-request]), :type :var, :members ()} {:name modify-db-parameter-group, :arglists ([modify-dbparameter-group-request]), :type :var, :members ()} {:name modify-db-subnet-group, :arglists ([modify-dbsubnet-group-request]), :type :var, :members ()} {:name modify-dbcluster, :arglists ([modify-dbcluster-request]), :type :var, :members ()} {:name modify-dbcluster-parameter-group, :arglists ([modify-dbcluster-parameter-group-request]), :type :var, :members ()} {:name modify-dbcluster-snapshot-attribute, :arglists ([modify-dbcluster-snapshot-attribute-request]), :type :var, :members ()} {:name modify-dbinstance, :arglists ([modify-dbinstance-request]), :type :var, :members ()} {:name modify-dbparameter-group, :arglists ([modify-dbparameter-group-request]), :type :var, :members ()} {:name modify-dbsubnet-group, :arglists ([modify-dbsubnet-group-request]), :type :var, :members ()} {:name modify-event-subscription, :arglists ([modify-event-subscription-request]), :type :var, :members ()} {:name promote-read-replica-db-cluster, :arglists ([promote-read-replica-dbcluster-request]), :type :var, :members ()} {:name promote-read-replica-dbcluster, :arglists ([promote-read-replica-dbcluster-request]), :type :var, :members ()} {:name reboot-db-instance, :arglists ([reboot-dbinstance-request]), :type :var, :members ()} {:name reboot-dbinstance, :arglists ([reboot-dbinstance-request]), :type :var, :members ()} {:name remove-role-from-db-cluster, :arglists ([remove-role-from-dbcluster-request]), :type :var, :members ()} {:name remove-role-from-dbcluster, :arglists ([remove-role-from-dbcluster-request]), :type :var, :members ()} {:name remove-source-identifier-from-subscription, :arglists ([remove-source-identifier-from-subscription-request]), :type :var, :members ()} {:name remove-tags-from-resource, :arglists ([remove-tags-from-resource-request]), :type :var, :members ()} {:name reset-db-cluster-parameter-group, :arglists ([reset-dbcluster-parameter-group-request]), :type :var, :members ()} {:name reset-db-parameter-group, :arglists ([reset-dbparameter-group-request]), :type :var, :members ()} {:name reset-dbcluster-parameter-group, :arglists ([reset-dbcluster-parameter-group-request]), :type :var, :members ()} {:name reset-dbparameter-group, :arglists ([reset-dbparameter-group-request]), :type :var, :members ()} {:name restore-db-cluster-from-snapshot, :arglists ([restore-dbcluster-from-snapshot-request]), :type :var, :members ()} {:name restore-db-cluster-to-point-in-time, :arglists ([restore-dbcluster-to-point-in-time-request]), :type :var, :members ()} {:name restore-dbcluster-from-snapshot, :arglists ([restore-dbcluster-from-snapshot-request]), :type :var, :members ()} {:name restore-dbcluster-to-point-in-time, :arglists ([restore-dbcluster-to-point-in-time-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name shutdown, :arglists ([]), :type :var, :members ()} {:name waiters, :arglists ([]), :type :var, :members ()})} {:name amazonica.aws.sagemaker, :publics ({:name add-tags, :arglists ([add-tags-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-algorithm, :arglists ([create-algorithm-request]), :type :var, :members ()} {:name create-code-repository, :arglists ([create-code-repository-request]), :type :var, :members ()} {:name create-compilation-job, :arglists ([create-compilation-job-request]), :type :var, :members ()} {:name create-endpoint, :arglists ([create-endpoint-request]), :type :var, :members ()} {:name create-endpoint-config, :arglists ([create-endpoint-config-request]), :type :var, :members ()} {:name create-hyper-parameter-tuning-job, :arglists ([create-hyper-parameter-tuning-job-request]), :type :var, :members ()} {:name create-labeling-job, :arglists ([create-labeling-job-request]), :type :var, :members ()} {:name create-model, :arglists ([create-model-request]), :type :var, :members ()} {:name create-model-package, :arglists ([create-model-package-request]), :type :var, :members ()} {:name create-notebook-instance, :arglists ([create-notebook-instance-request]), :type :var, :members ()} {:name create-notebook-instance-lifecycle-config, :arglists ([create-notebook-instance-lifecycle-config-request]), :type :var, :members ()} {:name create-presigned-notebook-instance-url, :arglists ([create-presigned-notebook-instance-url-request]), :type :var, :members ()} {:name create-training-job, :arglists ([create-training-job-request]), :type :var, :members ()} {:name create-transform-job, :arglists ([create-transform-job-request]), :type :var, :members ()} {:name create-workteam, :arglists ([create-workteam-request]), :type :var, :members ()} {:name delete-algorithm, :arglists ([delete-algorithm-request]), :type :var, :members ()} {:name delete-code-repository, :arglists ([delete-code-repository-request]), :type :var, :members ()} {:name delete-endpoint, :arglists ([delete-endpoint-request]), :type :var, :members ()} {:name delete-endpoint-config, :arglists ([delete-endpoint-config-request]), :type :var, :members ()} {:name delete-model, :arglists ([delete-model-request]), :type :var, :members ()} {:name delete-model-package, :arglists ([delete-model-package-request]), :type :var, :members ()} {:name delete-notebook-instance, :arglists ([delete-notebook-instance-request]), :type :var, :members ()} {:name delete-notebook-instance-lifecycle-config, :arglists ([delete-notebook-instance-lifecycle-config-request]), :type :var, :members ()} {:name delete-tags, :arglists ([delete-tags-request]), :type :var, :members ()} {:name delete-workteam, :arglists ([delete-workteam-request]), :type :var, :members ()} {:name describe-algorithm, :arglists ([describe-algorithm-request]), :type :var, :members ()} {:name describe-code-repository, :arglists ([describe-code-repository-request]), :type :var, :members ()} {:name describe-compilation-job, :arglists ([describe-compilation-job-request]), :type :var, :members ()} {:name describe-endpoint, :arglists ([describe-endpoint-request]), :type :var, :members ()} {:name describe-endpoint-config, :arglists ([describe-endpoint-config-request]), :type :var, :members ()} {:name describe-hyper-parameter-tuning-job, :arglists ([describe-hyper-parameter-tuning-job-request]), :type :var, :members ()} {:name describe-labeling-job, :arglists ([describe-labeling-job-request]), :type :var, :members ()} {:name describe-model, :arglists ([describe-model-request]), :type :var, :members ()} {:name describe-model-package, :arglists ([describe-model-package-request]), :type :var, :members ()} {:name describe-notebook-instance, :arglists ([describe-notebook-instance-request]), :type :var, :members ()} {:name describe-notebook-instance-lifecycle-config, :arglists ([describe-notebook-instance-lifecycle-config-request]), :type :var, :members ()} {:name describe-subscribed-workteam, :arglists ([describe-subscribed-workteam-request]), :type :var, :members ()} {:name describe-training-job, :arglists ([describe-training-job-request]), :type :var, :members ()} {:name describe-transform-job, :arglists ([describe-transform-job-request]), :type :var, :members ()} {:name describe-workteam, :arglists ([describe-workteam-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-search-suggestions, :arglists ([get-search-suggestions-request]), :type :var, :members ()} {:name list-algorithms, :arglists ([list-algorithms-request]), :type :var, :members ()} {:name list-code-repositories, :arglists ([list-code-repositories-request]), :type :var, :members ()} {:name list-compilation-jobs, :arglists ([list-compilation-jobs-request]), :type :var, :members ()} {:name list-endpoint-configs, :arglists ([list-endpoint-configs-request]), :type :var, :members ()} {:name list-endpoints, :arglists ([list-endpoints-request]), :type :var, :members ()} {:name list-hyper-parameter-tuning-jobs, :arglists ([list-hyper-parameter-tuning-jobs-request]), :type :var, :members ()} {:name list-labeling-jobs, :arglists ([list-labeling-jobs-request]), :type :var, :members ()} {:name list-labeling-jobs-for-workteam, :arglists ([list-labeling-jobs-for-workteam-request]), :type :var, :members ()} {:name list-model-packages, :arglists ([list-model-packages-request]), :type :var, :members ()} {:name list-models, :arglists ([list-models-request]), :type :var, :members ()} {:name list-notebook-instance-lifecycle-configs, :arglists ([list-notebook-instance-lifecycle-configs-request]), :type :var, :members ()} {:name list-notebook-instances, :arglists ([list-notebook-instances-request]), :type :var, :members ()} {:name list-subscribed-workteams, :arglists ([list-subscribed-workteams-request]), :type :var, :members ()} {:name list-tags, :arglists ([list-tags-request]), :type :var, :members ()} {:name list-training-jobs, :arglists ([list-training-jobs-request]), :type :var, :members ()} {:name list-training-jobs-for-hyper-parameter-tuning-job, :arglists ([list-training-jobs-for-hyper-parameter-tuning-job-request]), :type :var, :members ()} {:name list-transform-jobs, :arglists ([list-transform-jobs-request]), :type :var, :members ()} {:name list-workteams, :arglists ([list-workteams-request]), :type :var, :members ()} {:name render-ui-template, :arglists ([render-ui-template-request]), :type :var, :members ()} {:name search, :arglists ([search-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name shutdown, :arglists ([]), :type :var, :members ()} {:name start-notebook-instance, :arglists ([start-notebook-instance-request]), :type :var, :members ()} {:name stop-compilation-job, :arglists ([stop-compilation-job-request]), :type :var, :members ()} {:name stop-hyper-parameter-tuning-job, :arglists ([stop-hyper-parameter-tuning-job-request]), :type :var, :members ()} {:name stop-labeling-job, :arglists ([stop-labeling-job-request]), :type :var, :members ()} {:name stop-notebook-instance, :arglists ([stop-notebook-instance-request]), :type :var, :members ()} {:name stop-training-job, :arglists ([stop-training-job-request]), :type :var, :members ()} {:name stop-transform-job, :arglists ([stop-transform-job-request]), :type :var, :members ()} {:name update-code-repository, :arglists ([update-code-repository-request]), :type :var, :members ()} {:name update-endpoint, :arglists ([update-endpoint-request]), :type :var, :members ()} {:name update-endpoint-weights-and-capacities, :arglists ([update-endpoint-weights-and-capacities-request]), :type :var, :members ()} {:name update-notebook-instance, :arglists ([update-notebook-instance-request]), :type :var, :members ()} {:name update-notebook-instance-lifecycle-config, :arglists ([update-notebook-instance-lifecycle-config-request]), :type :var, :members ()} {:name update-workteam, :arglists ([update-workteam-request]), :type :var, :members ()} {:name waiters, :arglists ([]), :type :var, :members ()})} {:name amazonica.aws.s3transfer, :publics ({:name abort-multipart-uploads, :arglists ([string date]), :type :var, :members ()} {:name add-listener, :file "amazonica/aws/s3transfer.clj", :line 22, :arglists ([obj]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name copy, :arglists ([copy-object-request] [copy-object-request transfer-state-change-listener] [copy-object-request amazon-s3 transfer-state-change-listener] [string-1 string-2 string-3 string-4]), :type :var, :members ()} {:name download, :arglists ([get-object-request file] [presigned-url-download-request file] [get-object-request file long] [get-object-request file s3-progress-listener] [presigned-url-download-request file presigned-url-download-config] [string-1 string-2 file] [get-object-request file s3-progress-listener long] [string-1 string-2 file long] [get-object-request file s3-progress-listener long boolean]), :type :var, :members ()} {:name download-directory, :arglists ([string-1 string-2 file] [string-1 string-2 file boolean] [string-1 string-2 file key-filter] [string-1 string-2 file boolean key-filter]), :type :var, :members ()} {:name get-amazon-s3-client, :arglists ([]), :type :var, :members ()} {:name get-amazon-s3client, :arglists ([]), :type :var, :members ()} {:name get-configuration, :arglists ([]), :type :var, :members ()} {:name resume-download, :arglists ([persistable-download]), :type :var, :members ()} {:name resume-upload, :arglists ([persistable-upload]), :type :var, :members ()} {:name set-configuration, :arglists ([transfer-manager-configuration]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name shutdown-now, :arglists ([] [boolean]), :type :var, :members ()} {:name transfer, :file "amazonica/aws/s3transfer.clj", :line 37, :arglists ([obj]), :type :var, :members ()} {:name upload, :arglists ([put-object-request] [put-object-request s3-progress-listener] [string-1 string-2 file] [string-1 string-2 input-stream object-metadata]), :type :var, :members ()} {:name upload-directory, :arglists ([string-1 string-2 file boolean] [string-1 string-2 file boolean object-metadata-provider] [string-1 string-2 file boolean object-metadata-provider object-tagging-provider] [string-1 string-2 file boolean object-metadata-provider object-tagging-provider object-canned-acl-provider]), :type :var, :members ()} {:name upload-file-list, :arglists ([string-1 string-2 file list] [string-1 string-2 file list object-metadata-provider] [string-1 string-2 file list object-metadata-provider object-tagging-provider] [string-1 string-2 file list object-metadata-provider object-tagging-provider object-canned-acl-provider]), :type :var, :members ()} {:name wait, :file "amazonica/aws/s3transfer.clj", :line 31, :arglists ([transfer & body]), :type :macro, :members ()})} {:name amazonica.aws.kinesis, :publics ({:name add-tags-to-stream, :arglists ([add-tags-to-stream-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-stream, :arglists ([create-stream-request] [string integer]), :type :var, :members ()} {:name decrease-stream-retention-period, :arglists ([decrease-stream-retention-period-request]), :type :var, :members ()} {:name delete-stream, :arglists ([delete-stream-request] [string]), :type :var, :members ()} {:name deregister-stream-consumer, :arglists ([deregister-stream-consumer-request]), :type :var, :members ()} {:name describe-limits, :arglists ([describe-limits-request]), :type :var, :members ()} {:name describe-stream, :arglists ([describe-stream-request] [string] [string-1 string-2] [string-1 integer string-2]), :type :var, :members ()} {:name describe-stream-consumer, :arglists ([describe-stream-consumer-request]), :type :var, :members ()} {:name describe-stream-summary, :arglists ([describe-stream-summary-request]), :type :var, :members ()} {:name disable-enhanced-monitoring, :arglists ([disable-enhanced-monitoring-request]), :type :var, :members ()} {:name enable-enhanced-monitoring, :arglists ([enable-enhanced-monitoring-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-records, :arglists ([get-records-request]), :type :var, :members ()} {:name get-shard-iterator, :arglists ([get-shard-iterator-request] [string-1 string-2 string-3] [string-1 string-2 string-3 string-4]), :type :var, :members ()} {:name increase-stream-retention-period, :arglists ([increase-stream-retention-period-request]), :type :var, :members ()} {:name list-shards, :arglists ([list-shards-request]), :type :var, :members ()} {:name list-stream-consumers, :arglists ([list-stream-consumers-request]), :type :var, :members ()} {:name list-streams, :arglists ([] [list-streams-request] [string] [integer string]), :type :var, :members ()} {:name list-tags-for-stream, :arglists ([list-tags-for-stream-request]), :type :var, :members ()} {:name marshall, :file "amazonica/aws/kinesis.clj", :line 115, :arglists ([deserializer record]), :type :var, :members ()} {:name merge-shards, :arglists ([merge-shards-request] [string-1 string-2 string-3]), :type :var, :members ()} {:name put-record, :arglists ([put-record-request] [string-1 byte-buffer string-2] [string-1 byte-buffer string-2 string-3]), :type :var, :members ()} {:name put-records, :arglists ([put-records-request]), :type :var, :members ()} {:name register-stream-consumer, :arglists ([register-stream-consumer-request]), :type :var, :members ()} {:name remove-tags-from-stream, :arglists ([remove-tags-from-stream-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name shutdown, :arglists ([]), :type :var, :members ()} {:name split-shard, :arglists ([split-shard-request] [string-1 string-2 string-3]), :type :var, :members ()} {:name start-stream-encryption, :arglists ([start-stream-encryption-request]), :type :var, :members ()} {:name stop-stream-encryption, :arglists ([stop-stream-encryption-request]), :type :var, :members ()} {:name unwrap, :file "amazonica/aws/kinesis.clj", :line 75, :arglists ([byte-buffer]), :doc "Get the contents of the given buffer as a byte-array, decoding as\nNippy bytes if they appear to be Nippy encoded. If the ByteBuffer\ndoes not appear to contain Nippy data, the bytes found will be\nreturned unchanged. This technique is inspired by ptaoussanis/faraday.", :type :var, :members ()} {:name update-shard-count, :arglists ([update-shard-count-request]), :type :var, :members ()} {:name waiters, :arglists ([]), :type :var, :members ()} {:name worker, :file "amazonica/aws/kinesis.clj", :line 270, :arglists ([& args]), :doc "Instantiate a kinesis Worker.\n", :type :var, :members ()} {:name worker!, :file "amazonica/aws/kinesis.clj", :line 302, :arglists ([& args]), :doc "Instantiate a new kinesis Worker and invoke its run method in a\nseparate thread. Return the identifier of the Worker.", :type :var, :members ()})} {:name amazonica.aws.pricing, :publics ({:name client-class, :type :var, :members ()} {:name describe-services, :arglists ([describe-services-request]), :type :var, :members ()} {:name get-attribute-values, :arglists ([get-attribute-values-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-products, :arglists ([get-products-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()})} {:name amazonica.aws.servicediscovery, :publics ({:name client-class, :type :var, :members ()} {:name create-http-namespace, :arglists ([create-http-namespace-request]), :type :var, :members ()} {:name create-private-dns-namespace, :arglists ([create-private-dns-namespace-request]), :type :var, :members ()} {:name create-public-dns-namespace, :arglists ([create-public-dns-namespace-request]), :type :var, :members ()} {:name create-service, :arglists ([create-service-request]), :type :var, :members ()} {:name delete-namespace, :arglists ([delete-namespace-request]), :type :var, :members ()} {:name delete-service, :arglists ([delete-service-request]), :type :var, :members ()} {:name deregister-instance, :arglists ([deregister-instance-request]), :type :var, :members ()} {:name discover-instances, :arglists ([discover-instances-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-instance, :arglists ([get-instance-request]), :type :var, :members ()} {:name get-instances-health-status, :arglists ([get-instances-health-status-request]), :type :var, :members ()} {:name get-namespace, :arglists ([get-namespace-request]), :type :var, :members ()} {:name get-operation, :arglists ([get-operation-request]), :type :var, :members ()} {:name get-service, :arglists ([get-service-request]), :type :var, :members ()} {:name list-instances, :arglists ([list-instances-request]), :type :var, :members ()} {:name list-namespaces, :arglists ([list-namespaces-request]), :type :var, :members ()} {:name list-operations, :arglists ([list-operations-request]), :type :var, :members ()} {:name list-services, :arglists ([list-services-request]), :type :var, :members ()} {:name register-instance, :arglists ([register-instance-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name update-instance-custom-health-status, :arglists ([update-instance-custom-health-status-request]), :type :var, :members ()} {:name update-service, :arglists ([update-service-request]), :type :var, :members ()})} {:name amazonica.aws.health, :publics ({:name client-class, :type :var, :members ()} {:name describe-affected-entities, :arglists ([describe-affected-entities-request]), :type :var, :members ()} {:name describe-entity-aggregates, :arglists ([describe-entity-aggregates-request]), :type :var, :members ()} {:name describe-event-aggregates, :arglists ([describe-event-aggregates-request]), :type :var, :members ()} {:name describe-event-details, :arglists ([describe-event-details-request]), :type :var, :members ()} {:name describe-event-types, :arglists ([describe-event-types-request]), :type :var, :members ()} {:name describe-events, :arglists ([describe-events-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()})} {:name amazonica.aws.greengrass, :publics ({:name associate-role-to-group, :arglists ([associate-role-to-group-request]), :type :var, :members ()} {:name associate-service-role-to-account, :arglists ([associate-service-role-to-account-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-connector-definition, :arglists ([create-connector-definition-request]), :type :var, :members ()} {:name create-connector-definition-version, :arglists ([create-connector-definition-version-request]), :type :var, :members ()} {:name create-core-definition, :arglists ([create-core-definition-request]), :type :var, :members ()} {:name create-core-definition-version, :arglists ([create-core-definition-version-request]), :type :var, :members ()} {:name create-deployment, :arglists ([create-deployment-request]), :type :var, :members ()} {:name create-device-definition, :arglists ([create-device-definition-request]), :type :var, :members ()} {:name create-device-definition-version, :arglists ([create-device-definition-version-request]), :type :var, :members ()} {:name create-function-definition, :arglists ([create-function-definition-request]), :type :var, :members ()} {:name create-function-definition-version, :arglists ([create-function-definition-version-request]), :type :var, :members ()} {:name create-group, :arglists ([create-group-request]), :type :var, :members ()} {:name create-group-certificate-authority, :arglists ([create-group-certificate-authority-request]), :type :var, :members ()} {:name create-group-version, :arglists ([create-group-version-request]), :type :var, :members ()} {:name create-logger-definition, :arglists ([create-logger-definition-request]), :type :var, :members ()} {:name create-logger-definition-version, :arglists ([create-logger-definition-version-request]), :type :var, :members ()} {:name create-resource-definition, :arglists ([create-resource-definition-request]), :type :var, :members ()} {:name create-resource-definition-version, :arglists ([create-resource-definition-version-request]), :type :var, :members ()} {:name create-software-update-job, :arglists ([create-software-update-job-request]), :type :var, :members ()} {:name create-subscription-definition, :arglists ([create-subscription-definition-request]), :type :var, :members ()} {:name create-subscription-definition-version, :arglists ([create-subscription-definition-version-request]), :type :var, :members ()} {:name delete-connector-definition, :arglists ([delete-connector-definition-request]), :type :var, :members ()} {:name delete-core-definition, :arglists ([delete-core-definition-request]), :type :var, :members ()} {:name delete-device-definition, :arglists ([delete-device-definition-request]), :type :var, :members ()} {:name delete-function-definition, :arglists ([delete-function-definition-request]), :type :var, :members ()} {:name delete-group, :arglists ([delete-group-request]), :type :var, :members ()} {:name delete-logger-definition, :arglists ([delete-logger-definition-request]), :type :var, :members ()} {:name delete-resource-definition, :arglists ([delete-resource-definition-request]), :type :var, :members ()} {:name delete-subscription-definition, :arglists ([delete-subscription-definition-request]), :type :var, :members ()} {:name disassociate-role-from-group, :arglists ([disassociate-role-from-group-request]), :type :var, :members ()} {:name disassociate-service-role-from-account, :arglists ([disassociate-service-role-from-account-request]), :type :var, :members ()} {:name get-associated-role, :arglists ([get-associated-role-request]), :type :var, :members ()} {:name get-bulk-deployment-status, :arglists ([get-bulk-deployment-status-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-connectivity-info, :arglists ([get-connectivity-info-request]), :type :var, :members ()} {:name get-connector-definition, :arglists ([get-connector-definition-request]), :type :var, :members ()} {:name get-connector-definition-version, :arglists ([get-connector-definition-version-request]), :type :var, :members ()} {:name get-core-definition, :arglists ([get-core-definition-request]), :type :var, :members ()} {:name get-core-definition-version, :arglists ([get-core-definition-version-request]), :type :var, :members ()} {:name get-deployment-status, :arglists ([get-deployment-status-request]), :type :var, :members ()} {:name get-device-definition, :arglists ([get-device-definition-request]), :type :var, :members ()} {:name get-device-definition-version, :arglists ([get-device-definition-version-request]), :type :var, :members ()} {:name get-function-definition, :arglists ([get-function-definition-request]), :type :var, :members ()} {:name get-function-definition-version, :arglists ([get-function-definition-version-request]), :type :var, :members ()} {:name get-group, :arglists ([get-group-request]), :type :var, :members ()} {:name get-group-certificate-authority, :arglists ([get-group-certificate-authority-request]), :type :var, :members ()} {:name get-group-certificate-configuration, :arglists ([get-group-certificate-configuration-request]), :type :var, :members ()} {:name get-group-version, :arglists ([get-group-version-request]), :type :var, :members ()} {:name get-logger-definition, :arglists ([get-logger-definition-request]), :type :var, :members ()} {:name get-logger-definition-version, :arglists ([get-logger-definition-version-request]), :type :var, :members ()} {:name get-resource-definition, :arglists ([get-resource-definition-request]), :type :var, :members ()} {:name get-resource-definition-version, :arglists ([get-resource-definition-version-request]), :type :var, :members ()} {:name get-service-role-for-account, :arglists ([get-service-role-for-account-request]), :type :var, :members ()} {:name get-subscription-definition, :arglists ([get-subscription-definition-request]), :type :var, :members ()} {:name get-subscription-definition-version, :arglists ([get-subscription-definition-version-request]), :type :var, :members ()} {:name list-bulk-deployment-detailed-reports, :arglists ([list-bulk-deployment-detailed-reports-request]), :type :var, :members ()} {:name list-bulk-deployments, :arglists ([list-bulk-deployments-request]), :type :var, :members ()} {:name list-connector-definition-versions, :arglists ([list-connector-definition-versions-request]), :type :var, :members ()} {:name list-connector-definitions, :arglists ([list-connector-definitions-request]), :type :var, :members ()} {:name list-core-definition-versions, :arglists ([list-core-definition-versions-request]), :type :var, :members ()} {:name list-core-definitions, :arglists ([list-core-definitions-request]), :type :var, :members ()} {:name list-deployments, :arglists ([list-deployments-request]), :type :var, :members ()} {:name list-device-definition-versions, :arglists ([list-device-definition-versions-request]), :type :var, :members ()} {:name list-device-definitions, :arglists ([list-device-definitions-request]), :type :var, :members ()} {:name list-function-definition-versions, :arglists ([list-function-definition-versions-request]), :type :var, :members ()} {:name list-function-definitions, :arglists ([list-function-definitions-request]), :type :var, :members ()} {:name list-group-certificate-authorities, :arglists ([list-group-certificate-authorities-request]), :type :var, :members ()} {:name list-group-versions, :arglists ([list-group-versions-request]), :type :var, :members ()} {:name list-groups, :arglists ([list-groups-request]), :type :var, :members ()} {:name list-logger-definition-versions, :arglists ([list-logger-definition-versions-request]), :type :var, :members ()} {:name list-logger-definitions, :arglists ([list-logger-definitions-request]), :type :var, :members ()} {:name list-resource-definition-versions, :arglists ([list-resource-definition-versions-request]), :type :var, :members ()} {:name list-resource-definitions, :arglists ([list-resource-definitions-request]), :type :var, :members ()} {:name list-subscription-definition-versions, :arglists ([list-subscription-definition-versions-request]), :type :var, :members ()} {:name list-subscription-definitions, :arglists ([list-subscription-definitions-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name reset-deployments, :arglists ([reset-deployments-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name start-bulk-deployment, :arglists ([start-bulk-deployment-request]), :type :var, :members ()} {:name stop-bulk-deployment, :arglists ([stop-bulk-deployment-request]), :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-connectivity-info, :arglists ([update-connectivity-info-request]), :type :var, :members ()} {:name update-connector-definition, :arglists ([update-connector-definition-request]), :type :var, :members ()} {:name update-core-definition, :arglists ([update-core-definition-request]), :type :var, :members ()} {:name update-device-definition, :arglists ([update-device-definition-request]), :type :var, :members ()} {:name update-function-definition, :arglists ([update-function-definition-request]), :type :var, :members ()} {:name update-group, :arglists ([update-group-request]), :type :var, :members ()} {:name update-group-certificate-configuration, :arglists ([update-group-certificate-configuration-request]), :type :var, :members ()} {:name update-logger-definition, :arglists ([update-logger-definition-request]), :type :var, :members ()} {:name update-resource-definition, :arglists ([update-resource-definition-request]), :type :var, :members ()} {:name update-subscription-definition, :arglists ([update-subscription-definition-request]), :type :var, :members ()})} {:name amazonica.aws.iotdata, :publics ({:name client-class, :type :var, :members ()} {:name delete-thing-shadow, :arglists ([delete-thing-shadow-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-thing-shadow, :arglists ([get-thing-shadow-request]), :type :var, :members ()} {:name publish, :arglists ([publish-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name update-thing-shadow, :arglists ([update-thing-shadow-request]), :type :var, :members ()})} {:name amazonica.aws.elasticmapreduce, :publics ({:name add-instance-fleet, :arglists ([add-instance-fleet-request]), :type :var, :members ()} {:name add-instance-groups, :arglists ([add-instance-groups-request]), :type :var, :members ()} {:name add-job-flow-steps, :arglists ([add-job-flow-steps-request]), :type :var, :members ()} {:name add-tags, :arglists ([add-tags-request]), :type :var, :members ()} {:name cancel-steps, :arglists ([cancel-steps-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-security-configuration, :arglists ([create-security-configuration-request]), :type :var, :members ()} {:name delete-security-configuration, :arglists ([delete-security-configuration-request]), :type :var, :members ()} {:name describe-cluster, :arglists ([describe-cluster-request]), :type :var, :members ()} {:name describe-job-flows, :arglists ([] [describe-job-flows-request]), :type :var, :members ()} {:name describe-security-configuration, :arglists ([describe-security-configuration-request]), :type :var, :members ()} {:name describe-step, :arglists ([describe-step-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name list-bootstrap-actions, :arglists ([list-bootstrap-actions-request]), :type :var, :members ()} {:name list-clusters, :arglists ([] [list-clusters-request]), :type :var, :members ()} {:name list-instance-fleets, :arglists ([list-instance-fleets-request]), :type :var, :members ()} {:name list-instance-groups, :arglists ([list-instance-groups-request]), :type :var, :members ()} {:name list-instances, :arglists ([list-instances-request]), :type :var, :members ()} {:name list-security-configurations, :arglists ([list-security-configurations-request]), :type :var, :members ()} {:name list-steps, :arglists ([list-steps-request]), :type :var, :members ()} {:name modify-instance-fleet, :arglists ([modify-instance-fleet-request]), :type :var, :members ()} {:name modify-instance-groups, :arglists ([] [modify-instance-groups-request]), :type :var, :members ()} {:name put-auto-scaling-policy, :arglists ([put-auto-scaling-policy-request]), :type :var, :members ()} {:name remove-auto-scaling-policy, :arglists ([remove-auto-scaling-policy-request]), :type :var, :members ()} {:name remove-tags, :arglists ([remove-tags-request]), :type :var, :members ()} {:name run-job-flow, :arglists ([run-job-flow-request]), :type :var, :members ()} {:name set-termination-protection, :arglists ([set-termination-protection-request]), :type :var, :members ()} {:name set-visible-to-all-users, :arglists ([set-visible-to-all-users-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name shutdown, :arglists ([]), :type :var, :members ()} {:name terminate-job-flows, :arglists ([terminate-job-flows-request]), :type :var, :members ()} {:name waiters, :arglists ([]), :type :var, :members ()})} {:name amazonica.aws.s3, :publics ({:name abort-multipart-upload, :arglists ([abort-multipart-upload-request]), :type :var, :members ()} {:name change-object-storage-class, :arglists ([string-1 string-2 storage-class]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name complete-multipart-upload, :arglists ([complete-multipart-upload-request]), :type :var, :members ()} {:name copy-object, :arglists ([copy-object-request] [string-1 string-2 string-3 string-4]), :type :var, :members ()} {:name copy-part, :arglists ([copy-part-request]), :type :var, :members ()} {:name create-bucket, :arglists ([create-bucket-request] [string] [string region] [string-1 string-2]), :type :var, :members ()} {:name delete-bucket, :arglists ([delete-bucket-request] [string]), :type :var, :members ()} {:name delete-bucket-analytics-configuration, :arglists ([delete-bucket-analytics-configuration-request] [string-1 string-2]), :type :var, :members ()} {:name delete-bucket-cross-origin-configuration, :arglists ([delete-bucket-cross-origin-configuration-request] [string]), :type :var, :members ()} {:name delete-bucket-encryption, :arglists ([delete-bucket-encryption-request] [string]), :type :var, :members ()} {:name delete-bucket-inventory-configuration, :arglists ([delete-bucket-inventory-configuration-request] [string-1 string-2]), :type :var, :members ()} {:name delete-bucket-lifecycle-configuration, :arglists ([delete-bucket-lifecycle-configuration-request] [string]), :type :var, :members ()} {:name delete-bucket-metrics-configuration, :arglists ([delete-bucket-metrics-configuration-request] [string-1 string-2]), :type :var, :members ()} {:name delete-bucket-policy, :arglists ([delete-bucket-policy-request] [string]), :type :var, :members ()} {:name delete-bucket-replication-configuration, :arglists ([delete-bucket-replication-configuration-request] [string]), :type :var, :members ()} {:name delete-bucket-tagging-configuration, :arglists ([delete-bucket-tagging-configuration-request] [string]), :type :var, :members ()} {:name delete-bucket-website-configuration, :arglists ([delete-bucket-website-configuration-request] [string]), :type :var, :members ()} {:name delete-object, :arglists ([delete-object-request] [string-1 string-2]), :type :var, :members ()} {:name delete-object-tagging, :arglists ([delete-object-tagging-request]), :type :var, :members ()} {:name delete-objects, :arglists ([delete-objects-request]), :type :var, :members ()} {:name delete-public-access-block, :arglists ([delete-public-access-block-request]), :type :var, :members ()} {:name delete-version, :arglists ([delete-version-request] [string-1 string-2 string-3]), :type :var, :members ()} {:name disable-requester-pays, :arglists ([string]), :type :var, :members ()} {:name does-bucket-exist, :arglists ([string]), :type :var, :members ()} {:name does-bucket-exist-v2, :arglists ([string]), :type :var, :members ()} {:name does-object-exist, :arglists ([string-1 string-2]), :type :var, :members ()} {:name download, :arglists ([presigned-url-download-request] [presigned-url-download-request file]), :type :var, :members ()} {:name email-pattern, :file "amazonica/aws/s3.clj", :line 38, :type :var, :members ()} {:name enable-requester-pays, :arglists ([string]), :type :var, :members ()} {:name generate-presigned-url, :arglists ([generate-presigned-url-request] [string-1 string-2 date] [string-1 string-2 date http-method]), :type :var, :members ()} {:name get-bucket-accelerate-configuration, :arglists ([get-bucket-accelerate-configuration-request] [string]), :type :var, :members ()} {:name get-bucket-acl, :arglists ([get-bucket-acl-request] [string]), :type :var, :members ()} {:name get-bucket-analytics-configuration, :arglists ([get-bucket-analytics-configuration-request] [string-1 string-2]), :type :var, :members ()} {:name get-bucket-cross-origin-configuration, :arglists ([get-bucket-cross-origin-configuration-request] [string]), :type :var, :members ()} {:name get-bucket-encryption, :arglists ([get-bucket-encryption-request] [string]), :type :var, :members ()} {:name get-bucket-inventory-configuration, :arglists ([get-bucket-inventory-configuration-request] [string-1 string-2]), :type :var, :members ()} {:name get-bucket-lifecycle-configuration, :arglists ([get-bucket-lifecycle-configuration-request] [string]), :type :var, :members ()} {:name get-bucket-location, :arglists ([get-bucket-location-request] [string]), :type :var, :members ()} {:name get-bucket-logging-configuration, :arglists ([get-bucket-logging-configuration-request] [string]), :type :var, :members ()} {:name get-bucket-metrics-configuration, :arglists ([get-bucket-metrics-configuration-request] [string-1 string-2]), :type :var, :members ()} {:name get-bucket-notification-configuration, :arglists ([get-bucket-notification-configuration-request] [string]), :type :var, :members ()} {:name get-bucket-policy, :arglists ([get-bucket-policy-request] [string]), :type :var, :members ()} {:name get-bucket-policy-status, :arglists ([get-bucket-policy-status-request]), :type :var, :members ()} {:name get-bucket-replication-configuration, :arglists ([get-bucket-replication-configuration-request] [string]), :type :var, :members ()} {:name get-bucket-tagging-configuration, :arglists ([get-bucket-tagging-configuration-request] [string]), :type :var, :members ()} {:name get-bucket-versioning-configuration, :arglists ([get-bucket-versioning-configuration-request] [string]), :type :var, :members ()} {:name get-bucket-website-configuration, :arglists ([get-bucket-website-configuration-request] [string]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-object, :arglists ([get-object-request] [get-object-request file] [string-1 string-2]), :type :var, :members ()} {:name get-object-acl, :arglists ([get-object-acl-request] [string-1 string-2] [string-1 string-2 string-3]), :type :var, :members ()} {:name get-object-as-string, :arglists ([string-1 string-2]), :type :var, :members ()} {:name get-object-legal-hold, :arglists ([get-object-legal-hold-request]), :type :var, :members ()} {:name get-object-lock-configuration, :arglists ([get-object-lock-configuration-request]), :type :var, :members ()} {:name get-object-metadata, :arglists ([get-object-metadata-request] [string-1 string-2]), :type :var, :members ()} {:name get-object-retention, :arglists ([get-object-retention-request]), :type :var, :members ()} {:name get-object-tagging, :arglists ([get-object-tagging-request]), :type :var, :members ()} {:name get-public-access-block, :arglists ([get-public-access-block-request]), :type :var, :members ()} {:name get-region, :arglists ([]), :type :var, :members ()} {:name get-region-name, :arglists ([]), :type :var, :members ()} {:name get-resource-url, :arglists ([string-1 string-2]), :type :var, :members ()} {:name get-s3-account-owner, :arglists ([] [get-s3-account-owner-request]), :type :var, :members ()} {:name get-s3account-owner, :arglists ([] [get-s3-account-owner-request]), :type :var, :members ()} {:name get-url, :arglists ([string-1 string-2]), :type :var, :members ()} {:name head-bucket, :arglists ([head-bucket-request]), :type :var, :members ()} {:name initiate-multipart-upload, :arglists ([initiate-multipart-upload-request]), :type :var, :members ()} {:name is-requester-pays-enabled, :arglists ([string]), :type :var, :members ()} {:name list-bucket-analytics-configurations, :arglists ([list-bucket-analytics-configurations-request]), :type :var, :members ()} {:name list-bucket-inventory-configurations, :arglists ([list-bucket-inventory-configurations-request]), :type :var, :members ()} {:name list-bucket-metrics-configurations, :arglists ([list-bucket-metrics-configurations-request]), :type :var, :members ()} {:name list-buckets, :arglists ([] [list-buckets-request]), :type :var, :members ()} {:name list-multipart-uploads, :arglists ([list-multipart-uploads-request]), :type :var, :members ()} {:name list-next-batch-of-objects, :arglists ([list-next-batch-of-objects-request] [object-listing]), :type :var, :members ()} {:name list-next-batch-of-versions, :arglists ([list-next-batch-of-versions-request] [version-listing]), :type :var, :members ()} {:name list-objects, :arglists ([list-objects-request] [string] [string-1 string-2]), :type :var, :members ()} {:name list-objects-v2, :arglists ([list-objects-v2-request] [string] [string-1 string-2]), :type :var, :members ()} {:name list-parts, :arglists ([list-parts-request]), :type :var, :members ()} {:name list-versions, :arglists ([list-versions-request] [string-1 string-2] [string-1 string-2 string-3 string-4 string-5 integer]), :type :var, :members ()} {:name put-object, :arglists ([put-object-request] [string-1 string-2 file] [string-1 string-2 string-3] [string-1 string-2 input-stream object-metadata]), :type :var, :members ()} {:name restore-object, :arglists ([restore-object-request] [string-1 string-2 int]), :type :var, :members ()} {:name restore-object-v2, :arglists ([restore-object-request]), :type :var, :members ()} {:name select-object-content, :arglists ([select-object-content-request]), :type :var, :members ()} {:name set-bucket-accelerate-configuration, :arglists ([set-bucket-accelerate-configuration-request] [string bucket-accelerate-configuration]), :type :var, :members ()} {:name set-bucket-acl, :arglists ([set-bucket-acl-request] [string access-control-list] [string canned-access-control-list] [string access-control-list request-metric-collector] [string canned-access-control-list request-metric-collector]), :type :var, :members ()} {:name set-bucket-analytics-configuration, :arglists ([set-bucket-analytics-configuration-request] [string analytics-configuration]), :type :var, :members ()} {:name set-bucket-cross-origin-configuration, :arglists ([set-bucket-cross-origin-configuration-request] [string bucket-cross-origin-configuration]), :type :var, :members ()} {:name set-bucket-encryption, :arglists ([set-bucket-encryption-request]), :type :var, :members ()} {:name set-bucket-inventory-configuration, :arglists ([set-bucket-inventory-configuration-request] [string inventory-configuration]), :type :var, :members ()} {:name set-bucket-lifecycle-configuration, :arglists ([set-bucket-lifecycle-configuration-request] [string bucket-lifecycle-configuration]), :type :var, :members ()} {:name set-bucket-logging-configuration, :arglists ([set-bucket-logging-configuration-request]), :type :var, :members ()} {:name set-bucket-metrics-configuration, :arglists ([set-bucket-metrics-configuration-request] [string metrics-configuration]), :type :var, :members ()} {:name set-bucket-notification-configuration, :arglists ([set-bucket-notification-configuration-request] [string bucket-notification-configuration]), :type :var, :members ()} {:name set-bucket-policy, :arglists ([set-bucket-policy-request] [string-1 string-2]), :type :var, :members ()} {:name set-bucket-replication-configuration, :arglists ([set-bucket-replication-configuration-request] [string bucket-replication-configuration]), :type :var, :members ()} {:name set-bucket-tagging-configuration, :arglists ([set-bucket-tagging-configuration-request] [string bucket-tagging-configuration]), :type :var, :members ()} {:name set-bucket-versioning-configuration, :arglists ([set-bucket-versioning-configuration-request]), :type :var, :members ()} {:name set-bucket-website-configuration, :arglists ([set-bucket-website-configuration-request] [string bucket-website-configuration]), :type :var, :members ()} {:name set-endpoint, :arglists ([string]), :type :var, :members ()} {:name set-object-acl, :arglists ([set-object-acl-request] [string-1 string-2 access-control-list] [string-1 string-2 canned-access-control-list] [string-1 string-2 string-3 access-control-list] [string-1 string-2 string-3 canned-access-control-list] [string-1 string-2 string-3 access-control-list request-metric-collector] [string-1 string-2 string-3 canned-access-control-list request-metric-collector]), :type :var, :members ()} {:name set-object-legal-hold, :arglists ([set-object-legal-hold-request]), :type :var, :members ()} {:name set-object-lock-configuration, :arglists ([set-object-lock-configuration-request]), :type :var, :members ()} {:name set-object-redirect-location, :arglists ([string-1 string-2 string-3]), :type :var, :members ()} {:name set-object-retention, :arglists ([set-object-retention-request]), :type :var, :members ()} {:name set-object-tagging, :arglists ([set-object-tagging-request]), :type :var, :members ()} {:name set-public-access-block, :arglists ([set-public-access-block-request]), :type :var, :members ()} {:name set-region, :arglists ([region]), :type :var, :members ()} {:name set-s3-client-options, :arglists ([s3-client-options]), :type :var, :members ()} {:name set-s3client-options, :arglists ([s3-client-options]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name upload, :arglists ([presigned-url-upload-request]), :type :var, :members ()} {:name upload-part, :arglists ([upload-part-request]), :type :var, :members ()} {:name waiters, :arglists ([]), :type :var, :members ()})} {:name amazonica.aws.ec2instanceconnect, :publics ({:name client-class, :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name send-ssh-public-key, :arglists ([send-sshpublic-key-request]), :type :var, :members ()} {:name send-sshpublic-key, :arglists ([send-sshpublic-key-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()})} {:name amazonica.aws.securitytoken, :publics ({:name assume-role, :arglists ([assume-role-request]), :type :var, :members ()} {:name assume-role-with-saml, :arglists ([assume-role-with-samlrequest]), :type :var, :members ()} {:name assume-role-with-web-identity, :arglists ([assume-role-with-web-identity-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name decode-authorization-message, :arglists ([decode-authorization-message-request]), :type :var, :members ()} {:name get-access-key-info, :arglists ([get-access-key-info-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-caller-identity, :arglists ([get-caller-identity-request]), :type :var, :members ()} {:name get-federation-token, :arglists ([get-federation-token-request]), :type :var, :members ()} {:name get-session-token, :arglists ([] [get-session-token-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()})} {:name amazonica.aws.elasticloadbalancing, :publics ({:name add-tags, :arglists ([add-tags-request]), :type :var, :members ()} {:name apply-security-groups-to-load-balancer, :arglists ([apply-security-groups-to-load-balancer-request]), :type :var, :members ()} {:name attach-load-balancer-to-subnets, :arglists ([attach-load-balancer-to-subnets-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name configure-health-check, :arglists ([configure-health-check-request]), :type :var, :members ()} {:name create-app-cookie-stickiness-policy, :arglists ([create-app-cookie-stickiness-policy-request]), :type :var, :members ()} {:name create-lb-cookie-stickiness-policy, :arglists ([create-lbcookie-stickiness-policy-request]), :type :var, :members ()} {:name create-lbcookie-stickiness-policy, :arglists ([create-lbcookie-stickiness-policy-request]), :type :var, :members ()} {:name create-load-balancer, :arglists ([create-load-balancer-request]), :type :var, :members ()} {:name create-load-balancer-listeners, :arglists ([create-load-balancer-listeners-request]), :type :var, :members ()} {:name create-load-balancer-policy, :arglists ([create-load-balancer-policy-request]), :type :var, :members ()} {:name delete-load-balancer, :arglists ([delete-load-balancer-request]), :type :var, :members ()} {:name delete-load-balancer-listeners, :arglists ([delete-load-balancer-listeners-request]), :type :var, :members ()} {:name delete-load-balancer-policy, :arglists ([delete-load-balancer-policy-request]), :type :var, :members ()} {:name deregister-instances-from-load-balancer, :arglists ([deregister-instances-from-load-balancer-request]), :type :var, :members ()} {:name describe-account-limits, :arglists ([describe-account-limits-request]), :type :var, :members ()} {:name describe-instance-health, :arglists ([describe-instance-health-request]), :type :var, :members ()} {:name describe-load-balancer-attributes, :arglists ([describe-load-balancer-attributes-request]), :type :var, :members ()} {:name describe-load-balancer-policies, :arglists ([] [describe-load-balancer-policies-request]), :type :var, :members ()} {:name describe-load-balancer-policy-types, :arglists ([] [describe-load-balancer-policy-types-request]), :type :var, :members ()} {:name describe-load-balancers, :arglists ([] [describe-load-balancers-request]), :type :var, :members ()} {:name describe-tags, :arglists ([describe-tags-request]), :type :var, :members ()} {:name detach-load-balancer-from-subnets, :arglists ([detach-load-balancer-from-subnets-request]), :type :var, :members ()} {:name disable-availability-zones-for-load-balancer, :arglists ([disable-availability-zones-for-load-balancer-request]), :type :var, :members ()} {:name enable-availability-zones-for-load-balancer, :arglists ([enable-availability-zones-for-load-balancer-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name modify-load-balancer-attributes, :arglists ([modify-load-balancer-attributes-request]), :type :var, :members ()} {:name register-instances-with-load-balancer, :arglists ([register-instances-with-load-balancer-request]), :type :var, :members ()} {:name remove-tags, :arglists ([remove-tags-request]), :type :var, :members ()} {:name set-load-balancer-listener-ssl-certificate, :arglists ([set-load-balancer-listener-sslcertificate-request]), :type :var, :members ()} {:name set-load-balancer-listener-sslcertificate, :arglists ([set-load-balancer-listener-sslcertificate-request]), :type :var, :members ()} {:name set-load-balancer-policies-for-backend-server, :arglists ([set-load-balancer-policies-for-backend-server-request]), :type :var, :members ()} {:name set-load-balancer-policies-of-listener, :arglists ([set-load-balancer-policies-of-listener-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name shutdown, :arglists ([]), :type :var, :members ()} {:name waiters, :arglists ([]), :type :var, :members ()})} {:name amazonica.aws.codecommit, :publics ({:name batch-describe-merge-conflicts, :arglists ([batch-describe-merge-conflicts-request]), :type :var, :members ()} {:name batch-get-repositories, :arglists ([batch-get-repositories-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-branch, :arglists ([create-branch-request]), :type :var, :members ()} {:name create-commit, :arglists ([create-commit-request]), :type :var, :members ()} {:name create-pull-request, :arglists ([create-pull-request-request]), :type :var, :members ()} {:name create-repository, :arglists ([create-repository-request]), :type :var, :members ()} {:name create-unreferenced-merge-commit, :arglists ([create-unreferenced-merge-commit-request]), :type :var, :members ()} {:name delete-branch, :arglists ([delete-branch-request]), :type :var, :members ()} {:name delete-comment-content, :arglists ([delete-comment-content-request]), :type :var, :members ()} {:name delete-file, :arglists ([delete-file-request]), :type :var, :members ()} {:name delete-repository, :arglists ([delete-repository-request]), :type :var, :members ()} {:name describe-merge-conflicts, :arglists ([describe-merge-conflicts-request]), :type :var, :members ()} {:name describe-pull-request-events, :arglists ([describe-pull-request-events-request]), :type :var, :members ()} {:name get-blob, :arglists ([get-blob-request]), :type :var, :members ()} {:name get-branch, :arglists ([get-branch-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-comment, :arglists ([get-comment-request]), :type :var, :members ()} {:name get-comments-for-compared-commit, :arglists ([get-comments-for-compared-commit-request]), :type :var, :members ()} {:name get-comments-for-pull-request, :arglists ([get-comments-for-pull-request-request]), :type :var, :members ()} {:name get-commit, :arglists ([get-commit-request]), :type :var, :members ()} {:name get-differences, :arglists ([get-differences-request]), :type :var, :members ()} {:name get-file, :arglists ([get-file-request]), :type :var, :members ()} {:name get-folder, :arglists ([get-folder-request]), :type :var, :members ()} {:name get-merge-commit, :arglists ([get-merge-commit-request]), :type :var, :members ()} {:name get-merge-conflicts, :arglists ([get-merge-conflicts-request]), :type :var, :members ()} {:name get-merge-options, :arglists ([get-merge-options-request]), :type :var, :members ()} {:name get-pull-request, :arglists ([get-pull-request-request]), :type :var, :members ()} {:name get-repository, :arglists ([get-repository-request]), :type :var, :members ()} {:name get-repository-triggers, :arglists ([get-repository-triggers-request]), :type :var, :members ()} {:name list-branches, :arglists ([list-branches-request]), :type :var, :members ()} {:name list-pull-requests, :arglists ([list-pull-requests-request]), :type :var, :members ()} {:name list-repositories, :arglists ([list-repositories-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name merge-branches-by-fast-forward, :arglists ([merge-branches-by-fast-forward-request]), :type :var, :members ()} {:name merge-branches-by-squash, :arglists ([merge-branches-by-squash-request]), :type :var, :members ()} {:name merge-branches-by-three-way, :arglists ([merge-branches-by-three-way-request]), :type :var, :members ()} {:name merge-pull-request-by-fast-forward, :arglists ([merge-pull-request-by-fast-forward-request]), :type :var, :members ()} {:name merge-pull-request-by-squash, :arglists ([merge-pull-request-by-squash-request]), :type :var, :members ()} {:name merge-pull-request-by-three-way, :arglists ([merge-pull-request-by-three-way-request]), :type :var, :members ()} {:name post-comment-for-compared-commit, :arglists ([post-comment-for-compared-commit-request]), :type :var, :members ()} {:name post-comment-for-pull-request, :arglists ([post-comment-for-pull-request-request]), :type :var, :members ()} {:name post-comment-reply, :arglists ([post-comment-reply-request]), :type :var, :members ()} {:name put-file, :arglists ([put-file-request]), :type :var, :members ()} {:name put-repository-triggers, :arglists ([put-repository-triggers-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name test-repository-triggers, :arglists ([test-repository-triggers-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-comment, :arglists ([update-comment-request]), :type :var, :members ()} {:name update-default-branch, :arglists ([update-default-branch-request]), :type :var, :members ()} {:name update-pull-request-description, :arglists ([update-pull-request-description-request]), :type :var, :members ()} {:name update-pull-request-status, :arglists ([update-pull-request-status-request]), :type :var, :members ()} {:name update-pull-request-title, :arglists ([update-pull-request-title-request]), :type :var, :members ()} {:name update-repository-description, :arglists ([update-repository-description-request]), :type :var, :members ()} {:name update-repository-name, :arglists ([update-repository-name-request]), :type :var, :members ()})} {:name amazonica.aws.codepipeline, :publics ({:name acknowledge-job, :arglists ([acknowledge-job-request]), :type :var, :members ()} {:name acknowledge-third-party-job, :arglists ([acknowledge-third-party-job-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-custom-action-type, :arglists ([create-custom-action-type-request]), :type :var, :members ()} {:name create-pipeline, :arglists ([create-pipeline-request]), :type :var, :members ()} {:name delete-custom-action-type, :arglists ([delete-custom-action-type-request]), :type :var, :members ()} {:name delete-pipeline, :arglists ([delete-pipeline-request]), :type :var, :members ()} {:name delete-webhook, :arglists ([delete-webhook-request]), :type :var, :members ()} {:name deregister-webhook-with-third-party, :arglists ([deregister-webhook-with-third-party-request]), :type :var, :members ()} {:name disable-stage-transition, :arglists ([disable-stage-transition-request]), :type :var, :members ()} {:name enable-stage-transition, :arglists ([enable-stage-transition-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-job-details, :arglists ([get-job-details-request]), :type :var, :members ()} {:name get-pipeline, :arglists ([get-pipeline-request]), :type :var, :members ()} {:name get-pipeline-execution, :arglists ([get-pipeline-execution-request]), :type :var, :members ()} {:name get-pipeline-state, :arglists ([get-pipeline-state-request]), :type :var, :members ()} {:name get-third-party-job-details, :arglists ([get-third-party-job-details-request]), :type :var, :members ()} {:name list-action-executions, :arglists ([list-action-executions-request]), :type :var, :members ()} {:name list-action-types, :arglists ([list-action-types-request]), :type :var, :members ()} {:name list-pipeline-executions, :arglists ([list-pipeline-executions-request]), :type :var, :members ()} {:name list-pipelines, :arglists ([list-pipelines-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name list-webhooks, :arglists ([list-webhooks-request]), :type :var, :members ()} {:name poll-for-jobs, :arglists ([poll-for-jobs-request]), :type :var, :members ()} {:name poll-for-third-party-jobs, :arglists ([poll-for-third-party-jobs-request]), :type :var, :members ()} {:name put-action-revision, :arglists ([put-action-revision-request]), :type :var, :members ()} {:name put-approval-result, :arglists ([put-approval-result-request]), :type :var, :members ()} {:name put-job-failure-result, :arglists ([put-job-failure-result-request]), :type :var, :members ()} {:name put-job-success-result, :arglists ([put-job-success-result-request]), :type :var, :members ()} {:name put-third-party-job-failure-result, :arglists ([put-third-party-job-failure-result-request]), :type :var, :members ()} {:name put-third-party-job-success-result, :arglists ([put-third-party-job-success-result-request]), :type :var, :members ()} {:name put-webhook, :arglists ([put-webhook-request]), :type :var, :members ()} {:name register-webhook-with-third-party, :arglists ([register-webhook-with-third-party-request]), :type :var, :members ()} {:name retry-stage-execution, :arglists ([retry-stage-execution-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name start-pipeline-execution, :arglists ([start-pipeline-execution-request]), :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-pipeline, :arglists ([update-pipeline-request]), :type :var, :members ()})} {:name amazonica.aws.autoscaling, :publics ({:name attach-instances, :arglists ([attach-instances-request]), :type :var, :members ()} {:name attach-load-balancer-target-groups, :arglists ([attach-load-balancer-target-groups-request]), :type :var, :members ()} {:name attach-load-balancers, :arglists ([] [attach-load-balancers-request]), :type :var, :members ()} {:name batch-delete-scheduled-action, :arglists ([batch-delete-scheduled-action-request]), :type :var, :members ()} {:name batch-put-scheduled-update-group-action, :arglists ([batch-put-scheduled-update-group-action-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name complete-lifecycle-action, :arglists ([complete-lifecycle-action-request]), :type :var, :members ()} {:name create-auto-scaling-group, :arglists ([create-auto-scaling-group-request]), :type :var, :members ()} {:name create-launch-configuration, :arglists ([create-launch-configuration-request]), :type :var, :members ()} {:name create-or-update-tags, :arglists ([create-or-update-tags-request]), :type :var, :members ()} {:name delete-auto-scaling-group, :arglists ([delete-auto-scaling-group-request]), :type :var, :members ()} {:name delete-launch-configuration, :arglists ([delete-launch-configuration-request]), :type :var, :members ()} {:name delete-lifecycle-hook, :arglists ([delete-lifecycle-hook-request]), :type :var, :members ()} {:name delete-notification-configuration, :arglists ([delete-notification-configuration-request]), :type :var, :members ()} {:name delete-policy, :arglists ([delete-policy-request]), :type :var, :members ()} {:name delete-scheduled-action, :arglists ([delete-scheduled-action-request]), :type :var, :members ()} {:name delete-tags, :arglists ([delete-tags-request]), :type :var, :members ()} {:name describe-account-limits, :arglists ([] [describe-account-limits-request]), :type :var, :members ()} {:name describe-adjustment-types, :arglists ([] [describe-adjustment-types-request]), :type :var, :members ()} {:name describe-auto-scaling-groups, :arglists ([] [describe-auto-scaling-groups-request]), :type :var, :members ()} {:name describe-auto-scaling-instances, :arglists ([] [describe-auto-scaling-instances-request]), :type :var, :members ()} {:name describe-auto-scaling-notification-types, :arglists ([] [describe-auto-scaling-notification-types-request]), :type :var, :members ()} {:name describe-launch-configurations, :arglists ([] [describe-launch-configurations-request]), :type :var, :members ()} {:name describe-lifecycle-hook-types, :arglists ([] [describe-lifecycle-hook-types-request]), :type :var, :members ()} {:name describe-lifecycle-hooks, :arglists ([describe-lifecycle-hooks-request]), :type :var, :members ()} {:name describe-load-balancer-target-groups, :arglists ([describe-load-balancer-target-groups-request]), :type :var, :members ()} {:name describe-load-balancers, :arglists ([describe-load-balancers-request]), :type :var, :members ()} {:name describe-metric-collection-types, :arglists ([] [describe-metric-collection-types-request]), :type :var, :members ()} {:name describe-notification-configurations, :arglists ([] [describe-notification-configurations-request]), :type :var, :members ()} {:name describe-policies, :arglists ([] [describe-policies-request]), :type :var, :members ()} {:name describe-scaling-activities, :arglists ([] [describe-scaling-activities-request]), :type :var, :members ()} {:name describe-scaling-process-types, :arglists ([] [describe-scaling-process-types-request]), :type :var, :members ()} {:name describe-scheduled-actions, :arglists ([] [describe-scheduled-actions-request]), :type :var, :members ()} {:name describe-tags, :arglists ([] [describe-tags-request]), :type :var, :members ()} {:name describe-termination-policy-types, :arglists ([] [describe-termination-policy-types-request]), :type :var, :members ()} {:name detach-instances, :arglists ([detach-instances-request]), :type :var, :members ()} {:name detach-load-balancer-target-groups, :arglists ([detach-load-balancer-target-groups-request]), :type :var, :members ()} {:name detach-load-balancers, :arglists ([] [detach-load-balancers-request]), :type :var, :members ()} {:name disable-metrics-collection, :arglists ([disable-metrics-collection-request]), :type :var, :members ()} {:name enable-metrics-collection, :arglists ([enable-metrics-collection-request]), :type :var, :members ()} {:name enter-standby, :arglists ([enter-standby-request]), :type :var, :members ()} {:name execute-policy, :arglists ([execute-policy-request]), :type :var, :members ()} {:name exit-standby, :arglists ([exit-standby-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name put-lifecycle-hook, :arglists ([put-lifecycle-hook-request]), :type :var, :members ()} {:name put-notification-configuration, :arglists ([put-notification-configuration-request]), :type :var, :members ()} {:name put-scaling-policy, :arglists ([put-scaling-policy-request]), :type :var, :members ()} {:name put-scheduled-update-group-action, :arglists ([put-scheduled-update-group-action-request]), :type :var, :members ()} {:name record-lifecycle-action-heartbeat, :arglists ([record-lifecycle-action-heartbeat-request]), :type :var, :members ()} {:name resume-processes, :arglists ([resume-processes-request]), :type :var, :members ()} {:name set-desired-capacity, :arglists ([set-desired-capacity-request]), :type :var, :members ()} {:name set-instance-health, :arglists ([set-instance-health-request]), :type :var, :members ()} {:name set-instance-protection, :arglists ([set-instance-protection-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name shutdown, :arglists ([]), :type :var, :members ()} {:name suspend-processes, :arglists ([suspend-processes-request]), :type :var, :members ()} {:name terminate-instance-in-auto-scaling-group, :arglists ([terminate-instance-in-auto-scaling-group-request]), :type :var, :members ()} {:name update-auto-scaling-group, :arglists ([update-auto-scaling-group-request]), :type :var, :members ()} {:name waiters, :arglists ([]), :type :var, :members ()})} {:name amazonica.aws.ecr, :publics ({:name batch-check-layer-availability, :arglists ([batch-check-layer-availability-request]), :type :var, :members ()} {:name batch-delete-image, :arglists ([batch-delete-image-request]), :type :var, :members ()} {:name batch-get-image, :arglists ([batch-get-image-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name complete-layer-upload, :arglists ([complete-layer-upload-request]), :type :var, :members ()} {:name create-repository, :arglists ([create-repository-request]), :type :var, :members ()} {:name delete-lifecycle-policy, :arglists ([delete-lifecycle-policy-request]), :type :var, :members ()} {:name delete-repository, :arglists ([delete-repository-request]), :type :var, :members ()} {:name delete-repository-policy, :arglists ([delete-repository-policy-request]), :type :var, :members ()} {:name describe-images, :arglists ([describe-images-request]), :type :var, :members ()} {:name describe-repositories, :arglists ([describe-repositories-request]), :type :var, :members ()} {:name get-authorization-token, :arglists ([get-authorization-token-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-download-url-for-layer, :arglists ([get-download-url-for-layer-request]), :type :var, :members ()} {:name get-lifecycle-policy, :arglists ([get-lifecycle-policy-request]), :type :var, :members ()} {:name get-lifecycle-policy-preview, :arglists ([get-lifecycle-policy-preview-request]), :type :var, :members ()} {:name get-repository-policy, :arglists ([get-repository-policy-request]), :type :var, :members ()} {:name initiate-layer-upload, :arglists ([initiate-layer-upload-request]), :type :var, :members ()} {:name list-images, :arglists ([list-images-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name put-image, :arglists ([put-image-request]), :type :var, :members ()} {:name put-image-tag-mutability, :arglists ([put-image-tag-mutability-request]), :type :var, :members ()} {:name put-lifecycle-policy, :arglists ([put-lifecycle-policy-request]), :type :var, :members ()} {:name set-repository-policy, :arglists ([set-repository-policy-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name start-lifecycle-policy-preview, :arglists ([start-lifecycle-policy-preview-request]), :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name upload-layer-part, :arglists ([upload-layer-part-request]), :type :var, :members ()})} {:name amazonica.aws.opsworks, :publics ({:name assign-instance, :arglists ([assign-instance-request]), :type :var, :members ()} {:name assign-volume, :arglists ([assign-volume-request]), :type :var, :members ()} {:name associate-elastic-ip, :arglists ([associate-elastic-ip-request]), :type :var, :members ()} {:name attach-elastic-load-balancer, :arglists ([attach-elastic-load-balancer-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name clone-stack, :arglists ([clone-stack-request]), :type :var, :members ()} {:name create-app, :arglists ([create-app-request]), :type :var, :members ()} {:name create-deployment, :arglists ([create-deployment-request]), :type :var, :members ()} {:name create-instance, :arglists ([create-instance-request]), :type :var, :members ()} {:name create-layer, :arglists ([create-layer-request]), :type :var, :members ()} {:name create-stack, :arglists ([create-stack-request]), :type :var, :members ()} {:name create-user-profile, :arglists ([create-user-profile-request]), :type :var, :members ()} {:name delete-app, :arglists ([delete-app-request]), :type :var, :members ()} {:name delete-instance, :arglists ([delete-instance-request]), :type :var, :members ()} {:name delete-layer, :arglists ([delete-layer-request]), :type :var, :members ()} {:name delete-stack, :arglists ([delete-stack-request]), :type :var, :members ()} {:name delete-user-profile, :arglists ([delete-user-profile-request]), :type :var, :members ()} {:name deregister-ecs-cluster, :arglists ([deregister-ecs-cluster-request]), :type :var, :members ()} {:name deregister-elastic-ip, :arglists ([deregister-elastic-ip-request]), :type :var, :members ()} {:name deregister-instance, :arglists ([deregister-instance-request]), :type :var, :members ()} {:name deregister-rds-db-instance, :arglists ([deregister-rds-db-instance-request]), :type :var, :members ()} {:name deregister-volume, :arglists ([deregister-volume-request]), :type :var, :members ()} {:name describe-agent-versions, :arglists ([describe-agent-versions-request]), :type :var, :members ()} {:name describe-apps, :arglists ([describe-apps-request]), :type :var, :members ()} {:name describe-commands, :arglists ([describe-commands-request]), :type :var, :members ()} {:name describe-deployments, :arglists ([describe-deployments-request]), :type :var, :members ()} {:name describe-ecs-clusters, :arglists ([describe-ecs-clusters-request]), :type :var, :members ()} {:name describe-elastic-ips, :arglists ([describe-elastic-ips-request]), :type :var, :members ()} {:name describe-elastic-load-balancers, :arglists ([describe-elastic-load-balancers-request]), :type :var, :members ()} {:name describe-instances, :arglists ([describe-instances-request]), :type :var, :members ()} {:name describe-layers, :arglists ([describe-layers-request]), :type :var, :members ()} {:name describe-load-based-auto-scaling, :arglists ([describe-load-based-auto-scaling-request]), :type :var, :members ()} {:name describe-my-user-profile, :arglists ([describe-my-user-profile-request]), :type :var, :members ()} {:name describe-operating-systems, :arglists ([describe-operating-systems-request]), :type :var, :members ()} {:name describe-permissions, :arglists ([describe-permissions-request]), :type :var, :members ()} {:name describe-raid-arrays, :arglists ([describe-raid-arrays-request]), :type :var, :members ()} {:name describe-rds-db-instances, :arglists ([describe-rds-db-instances-request]), :type :var, :members ()} {:name describe-service-errors, :arglists ([describe-service-errors-request]), :type :var, :members ()} {:name describe-stack-provisioning-parameters, :arglists ([describe-stack-provisioning-parameters-request]), :type :var, :members ()} {:name describe-stack-summary, :arglists ([describe-stack-summary-request]), :type :var, :members ()} {:name describe-stacks, :arglists ([describe-stacks-request]), :type :var, :members ()} {:name describe-time-based-auto-scaling, :arglists ([describe-time-based-auto-scaling-request]), :type :var, :members ()} {:name describe-user-profiles, :arglists ([describe-user-profiles-request]), :type :var, :members ()} {:name describe-volumes, :arglists ([describe-volumes-request]), :type :var, :members ()} {:name detach-elastic-load-balancer, :arglists ([detach-elastic-load-balancer-request]), :type :var, :members ()} {:name disassociate-elastic-ip, :arglists ([disassociate-elastic-ip-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-hostname-suggestion, :arglists ([get-hostname-suggestion-request]), :type :var, :members ()} {:name grant-access, :arglists ([grant-access-request]), :type :var, :members ()} {:name list-tags, :arglists ([list-tags-request]), :type :var, :members ()} {:name reboot-instance, :arglists ([reboot-instance-request]), :type :var, :members ()} {:name register-ecs-cluster, :arglists ([register-ecs-cluster-request]), :type :var, :members ()} {:name register-elastic-ip, :arglists ([register-elastic-ip-request]), :type :var, :members ()} {:name register-instance, :arglists ([register-instance-request]), :type :var, :members ()} {:name register-rds-db-instance, :arglists ([register-rds-db-instance-request]), :type :var, :members ()} {:name register-volume, :arglists ([register-volume-request]), :type :var, :members ()} {:name set-load-based-auto-scaling, :arglists ([set-load-based-auto-scaling-request]), :type :var, :members ()} {:name set-permission, :arglists ([set-permission-request]), :type :var, :members ()} {:name set-time-based-auto-scaling, :arglists ([set-time-based-auto-scaling-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name shutdown, :arglists ([]), :type :var, :members ()} {:name start-instance, :arglists ([start-instance-request]), :type :var, :members ()} {:name start-stack, :arglists ([start-stack-request]), :type :var, :members ()} {:name stop-instance, :arglists ([stop-instance-request]), :type :var, :members ()} {:name stop-stack, :arglists ([stop-stack-request]), :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name unassign-instance, :arglists ([unassign-instance-request]), :type :var, :members ()} {:name unassign-volume, :arglists ([unassign-volume-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-app, :arglists ([update-app-request]), :type :var, :members ()} {:name update-elastic-ip, :arglists ([update-elastic-ip-request]), :type :var, :members ()} {:name update-instance, :arglists ([update-instance-request]), :type :var, :members ()} {:name update-layer, :arglists ([update-layer-request]), :type :var, :members ()} {:name update-my-user-profile, :arglists ([update-my-user-profile-request]), :type :var, :members ()} {:name update-rds-db-instance, :arglists ([update-rds-db-instance-request]), :type :var, :members ()} {:name update-stack, :arglists ([update-stack-request]), :type :var, :members ()} {:name update-user-profile, :arglists ([update-user-profile-request]), :type :var, :members ()} {:name update-volume, :arglists ([update-volume-request]), :type :var, :members ()} {:name waiters, :arglists ([]), :type :var, :members ()})} {:name amazonica.aws.ecs, :publics ({:name client-class, :type :var, :members ()} {:name create-cluster, :arglists ([] [create-cluster-request]), :type :var, :members ()} {:name create-service, :arglists ([create-service-request]), :type :var, :members ()} {:name create-task-set, :arglists ([create-task-set-request]), :type :var, :members ()} {:name delete-account-setting, :arglists ([delete-account-setting-request]), :type :var, :members ()} {:name delete-attributes, :arglists ([delete-attributes-request]), :type :var, :members ()} {:name delete-cluster, :arglists ([delete-cluster-request]), :type :var, :members ()} {:name delete-service, :arglists ([delete-service-request]), :type :var, :members ()} {:name delete-task-set, :arglists ([delete-task-set-request]), :type :var, :members ()} {:name deregister-container-instance, :arglists ([deregister-container-instance-request]), :type :var, :members ()} {:name deregister-task-definition, :arglists ([deregister-task-definition-request]), :type :var, :members ()} {:name describe-clusters, :arglists ([] [describe-clusters-request]), :type :var, :members ()} {:name describe-container-instances, :arglists ([describe-container-instances-request]), :type :var, :members ()} {:name describe-services, :arglists ([describe-services-request]), :type :var, :members ()} {:name describe-task-definition, :arglists ([describe-task-definition-request]), :type :var, :members ()} {:name describe-task-sets, :arglists ([describe-task-sets-request]), :type :var, :members ()} {:name describe-tasks, :arglists ([describe-tasks-request]), :type :var, :members ()} {:name discover-poll-endpoint, :arglists ([] [discover-poll-endpoint-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name list-account-settings, :arglists ([list-account-settings-request]), :type :var, :members ()} {:name list-attributes, :arglists ([list-attributes-request]), :type :var, :members ()} {:name list-clusters, :arglists ([] [list-clusters-request]), :type :var, :members ()} {:name list-container-instances, :arglists ([] [list-container-instances-request]), :type :var, :members ()} {:name list-services, :arglists ([] [list-services-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name list-task-definition-families, :arglists ([] [list-task-definition-families-request]), :type :var, :members ()} {:name list-task-definitions, :arglists ([] [list-task-definitions-request]), :type :var, :members ()} {:name list-tasks, :arglists ([] [list-tasks-request]), :type :var, :members ()} {:name put-account-setting, :arglists ([put-account-setting-request]), :type :var, :members ()} {:name put-account-setting-default, :arglists ([put-account-setting-default-request]), :type :var, :members ()} {:name put-attributes, :arglists ([put-attributes-request]), :type :var, :members ()} {:name register-container-instance, :arglists ([register-container-instance-request]), :type :var, :members ()} {:name register-task-definition, :arglists ([register-task-definition-request]), :type :var, :members ()} {:name run-task, :arglists ([run-task-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name shutdown, :arglists ([]), :type :var, :members ()} {:name start-task, :arglists ([start-task-request]), :type :var, :members ()} {:name stop-task, :arglists ([stop-task-request]), :type :var, :members ()} {:name submit-attachment-state-changes, :arglists ([submit-attachment-state-changes-request]), :type :var, :members ()} {:name submit-container-state-change, :arglists ([] [submit-container-state-change-request]), :type :var, :members ()} {:name submit-task-state-change, :arglists ([submit-task-state-change-request]), :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-container-agent, :arglists ([update-container-agent-request]), :type :var, :members ()} {:name update-container-instances-state, :arglists ([update-container-instances-state-request]), :type :var, :members ()} {:name update-service, :arglists ([update-service-request]), :type :var, :members ()} {:name update-service-primary-task-set, :arglists ([update-service-primary-task-set-request]), :type :var, :members ()} {:name update-task-set, :arglists ([update-task-set-request]), :type :var, :members ()} {:name waiters, :arglists ([]), :type :var, :members ()})} {:name amazonica.aws.comprehend, :publics ({:name batch-detect-dominant-language, :arglists ([batch-detect-dominant-language-request]), :type :var, :members ()} {:name batch-detect-entities, :arglists ([batch-detect-entities-request]), :type :var, :members ()} {:name batch-detect-key-phrases, :arglists ([batch-detect-key-phrases-request]), :type :var, :members ()} {:name batch-detect-sentiment, :arglists ([batch-detect-sentiment-request]), :type :var, :members ()} {:name batch-detect-syntax, :arglists ([batch-detect-syntax-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-document-classifier, :arglists ([create-document-classifier-request]), :type :var, :members ()} {:name create-entity-recognizer, :arglists ([create-entity-recognizer-request]), :type :var, :members ()} {:name delete-document-classifier, :arglists ([delete-document-classifier-request]), :type :var, :members ()} {:name delete-entity-recognizer, :arglists ([delete-entity-recognizer-request]), :type :var, :members ()} {:name describe-document-classification-job, :arglists ([describe-document-classification-job-request]), :type :var, :members ()} {:name describe-document-classifier, :arglists ([describe-document-classifier-request]), :type :var, :members ()} {:name describe-dominant-language-detection-job, :arglists ([describe-dominant-language-detection-job-request]), :type :var, :members ()} {:name describe-entities-detection-job, :arglists ([describe-entities-detection-job-request]), :type :var, :members ()} {:name describe-entity-recognizer, :arglists ([describe-entity-recognizer-request]), :type :var, :members ()} {:name describe-key-phrases-detection-job, :arglists ([describe-key-phrases-detection-job-request]), :type :var, :members ()} {:name describe-sentiment-detection-job, :arglists ([describe-sentiment-detection-job-request]), :type :var, :members ()} {:name describe-topics-detection-job, :arglists ([describe-topics-detection-job-request]), :type :var, :members ()} {:name detect-dominant-language, :arglists ([detect-dominant-language-request]), :type :var, :members ()} {:name detect-entities, :arglists ([detect-entities-request]), :type :var, :members ()} {:name detect-key-phrases, :arglists ([detect-key-phrases-request]), :type :var, :members ()} {:name detect-sentiment, :arglists ([detect-sentiment-request]), :type :var, :members ()} {:name detect-syntax, :arglists ([detect-syntax-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name list-document-classification-jobs, :arglists ([list-document-classification-jobs-request]), :type :var, :members ()} {:name list-document-classifiers, :arglists ([list-document-classifiers-request]), :type :var, :members ()} {:name list-dominant-language-detection-jobs, :arglists ([list-dominant-language-detection-jobs-request]), :type :var, :members ()} {:name list-entities-detection-jobs, :arglists ([list-entities-detection-jobs-request]), :type :var, :members ()} {:name list-entity-recognizers, :arglists ([list-entity-recognizers-request]), :type :var, :members ()} {:name list-key-phrases-detection-jobs, :arglists ([list-key-phrases-detection-jobs-request]), :type :var, :members ()} {:name list-sentiment-detection-jobs, :arglists ([list-sentiment-detection-jobs-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name list-topics-detection-jobs, :arglists ([list-topics-detection-jobs-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name start-document-classification-job, :arglists ([start-document-classification-job-request]), :type :var, :members ()} {:name start-dominant-language-detection-job, :arglists ([start-dominant-language-detection-job-request]), :type :var, :members ()} {:name start-entities-detection-job, :arglists ([start-entities-detection-job-request]), :type :var, :members ()} {:name start-key-phrases-detection-job, :arglists ([start-key-phrases-detection-job-request]), :type :var, :members ()} {:name start-sentiment-detection-job, :arglists ([start-sentiment-detection-job-request]), :type :var, :members ()} {:name start-topics-detection-job, :arglists ([start-topics-detection-job-request]), :type :var, :members ()} {:name stop-dominant-language-detection-job, :arglists ([stop-dominant-language-detection-job-request]), :type :var, :members ()} {:name stop-entities-detection-job, :arglists ([stop-entities-detection-job-request]), :type :var, :members ()} {:name stop-key-phrases-detection-job, :arglists ([stop-key-phrases-detection-job-request]), :type :var, :members ()} {:name stop-sentiment-detection-job, :arglists ([stop-sentiment-detection-job-request]), :type :var, :members ()} {:name stop-training-document-classifier, :arglists ([stop-training-document-classifier-request]), :type :var, :members ()} {:name stop-training-entity-recognizer, :arglists ([stop-training-entity-recognizer-request]), :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()})} {:name amazonica.aws.directconnect, :publics ({:name accept-direct-connect-gateway-association-proposal, :arglists ([accept-direct-connect-gateway-association-proposal-request]), :type :var, :members ()} {:name allocate-connection-on-interconnect, :arglists ([allocate-connection-on-interconnect-request]), :type :var, :members ()} {:name allocate-hosted-connection, :arglists ([allocate-hosted-connection-request]), :type :var, :members ()} {:name allocate-private-virtual-interface, :arglists ([allocate-private-virtual-interface-request]), :type :var, :members ()} {:name allocate-public-virtual-interface, :arglists ([allocate-public-virtual-interface-request]), :type :var, :members ()} {:name allocate-transit-virtual-interface, :arglists ([allocate-transit-virtual-interface-request]), :type :var, :members ()} {:name associate-connection-with-lag, :arglists ([associate-connection-with-lag-request]), :type :var, :members ()} {:name associate-hosted-connection, :arglists ([associate-hosted-connection-request]), :type :var, :members ()} {:name associate-virtual-interface, :arglists ([associate-virtual-interface-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name confirm-connection, :arglists ([confirm-connection-request]), :type :var, :members ()} {:name confirm-private-virtual-interface, :arglists ([confirm-private-virtual-interface-request]), :type :var, :members ()} {:name confirm-public-virtual-interface, :arglists ([confirm-public-virtual-interface-request]), :type :var, :members ()} {:name confirm-transit-virtual-interface, :arglists ([confirm-transit-virtual-interface-request]), :type :var, :members ()} {:name create-bgp-peer, :arglists ([create-bgppeer-request]), :type :var, :members ()} {:name create-bgppeer, :arglists ([create-bgppeer-request]), :type :var, :members ()} {:name create-connection, :arglists ([create-connection-request]), :type :var, :members ()} {:name create-direct-connect-gateway, :arglists ([create-direct-connect-gateway-request]), :type :var, :members ()} {:name create-direct-connect-gateway-association, :arglists ([create-direct-connect-gateway-association-request]), :type :var, :members ()} {:name create-direct-connect-gateway-association-proposal, :arglists ([create-direct-connect-gateway-association-proposal-request]), :type :var, :members ()} {:name create-interconnect, :arglists ([create-interconnect-request]), :type :var, :members ()} {:name create-lag, :arglists ([create-lag-request]), :type :var, :members ()} {:name create-private-virtual-interface, :arglists ([create-private-virtual-interface-request]), :type :var, :members ()} {:name create-public-virtual-interface, :arglists ([create-public-virtual-interface-request]), :type :var, :members ()} {:name create-transit-virtual-interface, :arglists ([create-transit-virtual-interface-request]), :type :var, :members ()} {:name delete-bgp-peer, :arglists ([delete-bgppeer-request]), :type :var, :members ()} {:name delete-bgppeer, :arglists ([delete-bgppeer-request]), :type :var, :members ()} {:name delete-connection, :arglists ([delete-connection-request]), :type :var, :members ()} {:name delete-direct-connect-gateway, :arglists ([delete-direct-connect-gateway-request]), :type :var, :members ()} {:name delete-direct-connect-gateway-association, :arglists ([delete-direct-connect-gateway-association-request]), :type :var, :members ()} {:name delete-direct-connect-gateway-association-proposal, :arglists ([delete-direct-connect-gateway-association-proposal-request]), :type :var, :members ()} {:name delete-interconnect, :arglists ([delete-interconnect-request]), :type :var, :members ()} {:name delete-lag, :arglists ([delete-lag-request]), :type :var, :members ()} {:name delete-virtual-interface, :arglists ([delete-virtual-interface-request]), :type :var, :members ()} {:name describe-connection-loa, :arglists ([describe-connection-loa-request]), :type :var, :members ()} {:name describe-connections, :arglists ([] [describe-connections-request]), :type :var, :members ()} {:name describe-connections-on-interconnect, :arglists ([describe-connections-on-interconnect-request]), :type :var, :members ()} {:name describe-direct-connect-gateway-association-proposals, :arglists ([describe-direct-connect-gateway-association-proposals-request]), :type :var, :members ()} {:name describe-direct-connect-gateway-associations, :arglists ([describe-direct-connect-gateway-associations-request]), :type :var, :members ()} {:name describe-direct-connect-gateway-attachments, :arglists ([describe-direct-connect-gateway-attachments-request]), :type :var, :members ()} {:name describe-direct-connect-gateways, :arglists ([describe-direct-connect-gateways-request]), :type :var, :members ()} {:name describe-hosted-connections, :arglists ([describe-hosted-connections-request]), :type :var, :members ()} {:name describe-interconnect-loa, :arglists ([describe-interconnect-loa-request]), :type :var, :members ()} {:name describe-interconnects, :arglists ([] [describe-interconnects-request]), :type :var, :members ()} {:name describe-lags, :arglists ([describe-lags-request]), :type :var, :members ()} {:name describe-loa, :arglists ([describe-loa-request]), :type :var, :members ()} {:name describe-locations, :arglists ([] [describe-locations-request]), :type :var, :members ()} {:name describe-tags, :arglists ([describe-tags-request]), :type :var, :members ()} {:name describe-virtual-gateways, :arglists ([] [describe-virtual-gateways-request]), :type :var, :members ()} {:name describe-virtual-interfaces, :arglists ([] [describe-virtual-interfaces-request]), :type :var, :members ()} {:name disassociate-connection-from-lag, :arglists ([disassociate-connection-from-lag-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-direct-connect-gateway-association, :arglists ([update-direct-connect-gateway-association-request]), :type :var, :members ()} {:name update-lag, :arglists ([update-lag-request]), :type :var, :members ()} {:name update-virtual-interface-attributes, :arglists ([update-virtual-interface-attributes-request]), :type :var, :members ()})} {:name amazonica.aws.kinesisanalytics, :publics ({:name add-application-cloud-watch-logging-option, :arglists ([add-application-cloud-watch-logging-option-request]), :type :var, :members ()} {:name add-application-input, :arglists ([add-application-input-request]), :type :var, :members ()} {:name add-application-input-processing-configuration, :arglists ([add-application-input-processing-configuration-request]), :type :var, :members ()} {:name add-application-output, :arglists ([add-application-output-request]), :type :var, :members ()} {:name add-application-reference-data-source, :arglists ([add-application-reference-data-source-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-application, :arglists ([create-application-request]), :type :var, :members ()} {:name delete-application, :arglists ([delete-application-request]), :type :var, :members ()} {:name delete-application-cloud-watch-logging-option, :arglists ([delete-application-cloud-watch-logging-option-request]), :type :var, :members ()} {:name delete-application-input-processing-configuration, :arglists ([delete-application-input-processing-configuration-request]), :type :var, :members ()} {:name delete-application-output, :arglists ([delete-application-output-request]), :type :var, :members ()} {:name delete-application-reference-data-source, :arglists ([delete-application-reference-data-source-request]), :type :var, :members ()} {:name describe-application, :arglists ([describe-application-request]), :type :var, :members ()} {:name discover-input-schema, :arglists ([discover-input-schema-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name list-applications, :arglists ([list-applications-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name start-application, :arglists ([start-application-request]), :type :var, :members ()} {:name stop-application, :arglists ([stop-application-request]), :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-application, :arglists ([update-application-request]), :type :var, :members ()})} {:name amazonica.aws.rekognition, :publics ({:name client-class, :type :var, :members ()} {:name compare-faces, :arglists ([compare-faces-request]), :type :var, :members ()} {:name create-collection, :arglists ([create-collection-request]), :type :var, :members ()} {:name create-stream-processor, :arglists ([create-stream-processor-request]), :type :var, :members ()} {:name delete-collection, :arglists ([delete-collection-request]), :type :var, :members ()} {:name delete-faces, :arglists ([delete-faces-request]), :type :var, :members ()} {:name delete-stream-processor, :arglists ([delete-stream-processor-request]), :type :var, :members ()} {:name describe-collection, :arglists ([describe-collection-request]), :type :var, :members ()} {:name describe-stream-processor, :arglists ([describe-stream-processor-request]), :type :var, :members ()} {:name detect-faces, :arglists ([detect-faces-request]), :type :var, :members ()} {:name detect-labels, :arglists ([detect-labels-request]), :type :var, :members ()} {:name detect-moderation-labels, :arglists ([detect-moderation-labels-request]), :type :var, :members ()} {:name detect-text, :arglists ([detect-text-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-celebrity-info, :arglists ([get-celebrity-info-request]), :type :var, :members ()} {:name get-celebrity-recognition, :arglists ([get-celebrity-recognition-request]), :type :var, :members ()} {:name get-content-moderation, :arglists ([get-content-moderation-request]), :type :var, :members ()} {:name get-face-detection, :arglists ([get-face-detection-request]), :type :var, :members ()} {:name get-face-search, :arglists ([get-face-search-request]), :type :var, :members ()} {:name get-label-detection, :arglists ([get-label-detection-request]), :type :var, :members ()} {:name get-person-tracking, :arglists ([get-person-tracking-request]), :type :var, :members ()} {:name index-faces, :arglists ([index-faces-request]), :type :var, :members ()} {:name list-collections, :arglists ([list-collections-request]), :type :var, :members ()} {:name list-faces, :arglists ([list-faces-request]), :type :var, :members ()} {:name list-stream-processors, :arglists ([list-stream-processors-request]), :type :var, :members ()} {:name recognize-celebrities, :arglists ([recognize-celebrities-request]), :type :var, :members ()} {:name search-faces, :arglists ([search-faces-request]), :type :var, :members ()} {:name search-faces-by-image, :arglists ([search-faces-by-image-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name start-celebrity-recognition, :arglists ([start-celebrity-recognition-request]), :type :var, :members ()} {:name start-content-moderation, :arglists ([start-content-moderation-request]), :type :var, :members ()} {:name start-face-detection, :arglists ([start-face-detection-request]), :type :var, :members ()} {:name start-face-search, :arglists ([start-face-search-request]), :type :var, :members ()} {:name start-label-detection, :arglists ([start-label-detection-request]), :type :var, :members ()} {:name start-person-tracking, :arglists ([start-person-tracking-request]), :type :var, :members ()} {:name start-stream-processor, :arglists ([start-stream-processor-request]), :type :var, :members ()} {:name stop-stream-processor, :arglists ([stop-stream-processor-request]), :type :var, :members ()})} {:name amazonica.aws.sns, :publics ({:name add-permission, :arglists ([add-permission-request] [string-1 string-2 list-1 list-2]), :type :var, :members ()} {:name check-if-phone-number-is-opted-out, :arglists ([check-if-phone-number-is-opted-out-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name confirm-subscription, :arglists ([confirm-subscription-request] [string-1 string-2] [string-1 string-2 string-3]), :type :var, :members ()} {:name create-platform-application, :arglists ([create-platform-application-request]), :type :var, :members ()} {:name create-platform-endpoint, :arglists ([create-platform-endpoint-request]), :type :var, :members ()} {:name create-topic, :arglists ([create-topic-request] [string]), :type :var, :members ()} {:name delete-endpoint, :arglists ([delete-endpoint-request]), :type :var, :members ()} {:name delete-platform-application, :arglists ([delete-platform-application-request]), :type :var, :members ()} {:name delete-topic, :arglists ([delete-topic-request] [string]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-endpoint-attributes, :arglists ([get-endpoint-attributes-request]), :type :var, :members ()} {:name get-platform-application-attributes, :arglists ([get-platform-application-attributes-request]), :type :var, :members ()} {:name get-sms-attributes, :arglists ([get-smsattributes-request]), :type :var, :members ()} {:name get-smsattributes, :arglists ([get-smsattributes-request]), :type :var, :members ()} {:name get-subscription-attributes, :arglists ([get-subscription-attributes-request] [string]), :type :var, :members ()} {:name get-topic-attributes, :arglists ([get-topic-attributes-request] [string]), :type :var, :members ()} {:name list-endpoints-by-platform-application, :arglists ([list-endpoints-by-platform-application-request]), :type :var, :members ()} {:name list-phone-numbers-opted-out, :arglists ([list-phone-numbers-opted-out-request]), :type :var, :members ()} {:name list-platform-applications, :arglists ([] [list-platform-applications-request]), :type :var, :members ()} {:name list-subscriptions, :arglists ([] [list-subscriptions-request] [string]), :type :var, :members ()} {:name list-subscriptions-by-topic, :arglists ([list-subscriptions-by-topic-request] [string] [string-1 string-2]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name list-topics, :arglists ([] [list-topics-request] [string]), :type :var, :members ()} {:name opt-in-phone-number, :arglists ([opt-in-phone-number-request]), :type :var, :members ()} {:name publish, :arglists ([publish-request] [string-1 string-2] [string-1 string-2 string-3]), :type :var, :members ()} {:name remove-permission, :arglists ([remove-permission-request] [string-1 string-2]), :type :var, :members ()} {:name set-endpoint-attributes, :arglists ([set-endpoint-attributes-request]), :type :var, :members ()} {:name set-platform-application-attributes, :arglists ([set-platform-application-attributes-request]), :type :var, :members ()} {:name set-sms-attributes, :arglists ([set-smsattributes-request]), :type :var, :members ()} {:name set-smsattributes, :arglists ([set-smsattributes-request]), :type :var, :members ()} {:name set-subscription-attributes, :arglists ([set-subscription-attributes-request] [string-1 string-2 string-3]), :type :var, :members ()} {:name set-topic-attributes, :arglists ([set-topic-attributes-request] [string-1 string-2 string-3]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name subscribe, :arglists ([subscribe-request] [string-1 string-2 string-3]), :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name unsubscribe, :arglists ([string] [unsubscribe-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()})} {:name amazonica.aws.stepfunctions, :publics ({:name client-class, :type :var, :members ()} {:name create-activity, :arglists ([create-activity-request]), :type :var, :members ()} {:name create-state-machine, :arglists ([create-state-machine-request]), :type :var, :members ()} {:name delete-activity, :arglists ([delete-activity-request]), :type :var, :members ()} {:name delete-state-machine, :arglists ([delete-state-machine-request]), :type :var, :members ()} {:name describe-activity, :arglists ([describe-activity-request]), :type :var, :members ()} {:name describe-execution, :arglists ([describe-execution-request]), :type :var, :members ()} {:name describe-state-machine, :arglists ([describe-state-machine-request]), :type :var, :members ()} {:name describe-state-machine-for-execution, :arglists ([describe-state-machine-for-execution-request]), :type :var, :members ()} {:name get-activity-task, :arglists ([get-activity-task-request]), :type :var, :members ()} {:name get-activity-task-result, :file "amazonica/aws/stepfunctions.clj", :line 9, :arglists ([arn]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-execution-history, :arglists ([get-execution-history-request]), :type :var, :members ()} {:name list-activities, :arglists ([list-activities-request]), :type :var, :members ()} {:name list-executions, :arglists ([list-executions-request]), :type :var, :members ()} {:name list-state-machines, :arglists ([list-state-machines-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name mark-task-failure, :file "amazonica/aws/stepfunctions.clj", :line 18, :arglists ([token]), :type :var, :members ()} {:name mark-task-success, :file "amazonica/aws/stepfunctions.clj", :line 13, :arglists ([output token]), :type :var, :members ()} {:name send-heartbeat, :file "amazonica/aws/stepfunctions.clj", :line 22, :arglists ([token]), :type :var, :members ()} {:name send-task-failure, :arglists ([send-task-failure-request]), :type :var, :members ()} {:name send-task-heartbeat, :arglists ([send-task-heartbeat-request]), :type :var, :members ()} {:name send-task-success, :arglists ([send-task-success-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name start-execution, :arglists ([start-execution-request]), :type :var, :members ()} {:name start-state-machine, :file "amazonica/aws/stepfunctions.clj", :line 26, :arglists ([input state-machine-arn]), :type :var, :members ()} {:name stop-execution, :arglists ([stop-execution-request]), :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-state-machine, :arglists ([update-state-machine-request]), :type :var, :members ()})} {:name amazonica.aws.cloudformation, :publics ({:name cancel-update-stack, :arglists ([cancel-update-stack-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name continue-update-rollback, :arglists ([continue-update-rollback-request]), :type :var, :members ()} {:name create-change-set, :arglists ([create-change-set-request]), :type :var, :members ()} {:name create-stack, :arglists ([create-stack-request]), :type :var, :members ()} {:name create-stack-instances, :arglists ([create-stack-instances-request]), :type :var, :members ()} {:name create-stack-set, :arglists ([create-stack-set-request]), :type :var, :members ()} {:name delete-change-set, :arglists ([delete-change-set-request]), :type :var, :members ()} {:name delete-stack, :arglists ([delete-stack-request]), :type :var, :members ()} {:name delete-stack-instances, :arglists ([delete-stack-instances-request]), :type :var, :members ()} {:name delete-stack-set, :arglists ([delete-stack-set-request]), :type :var, :members ()} {:name describe-account-limits, :arglists ([describe-account-limits-request]), :type :var, :members ()} {:name describe-change-set, :arglists ([describe-change-set-request]), :type :var, :members ()} {:name describe-stack-drift-detection-status, :arglists ([describe-stack-drift-detection-status-request]), :type :var, :members ()} {:name describe-stack-events, :arglists ([describe-stack-events-request]), :type :var, :members ()} {:name describe-stack-instance, :arglists ([describe-stack-instance-request]), :type :var, :members ()} {:name describe-stack-resource, :arglists ([describe-stack-resource-request]), :type :var, :members ()} {:name describe-stack-resource-drifts, :arglists ([describe-stack-resource-drifts-request]), :type :var, :members ()} {:name describe-stack-resources, :arglists ([describe-stack-resources-request]), :type :var, :members ()} {:name describe-stack-set, :arglists ([describe-stack-set-request]), :type :var, :members ()} {:name describe-stack-set-operation, :arglists ([describe-stack-set-operation-request]), :type :var, :members ()} {:name describe-stacks, :arglists ([] [describe-stacks-request]), :type :var, :members ()} {:name detect-stack-drift, :arglists ([detect-stack-drift-request]), :type :var, :members ()} {:name detect-stack-resource-drift, :arglists ([detect-stack-resource-drift-request]), :type :var, :members ()} {:name estimate-template-cost, :arglists ([] [estimate-template-cost-request]), :type :var, :members ()} {:name execute-change-set, :arglists ([execute-change-set-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-stack-policy, :arglists ([get-stack-policy-request]), :type :var, :members ()} {:name get-template, :arglists ([get-template-request]), :type :var, :members ()} {:name get-template-summary, :arglists ([] [get-template-summary-request]), :type :var, :members ()} {:name list-change-sets, :arglists ([list-change-sets-request]), :type :var, :members ()} {:name list-exports, :arglists ([list-exports-request]), :type :var, :members ()} {:name list-imports, :arglists ([list-imports-request]), :type :var, :members ()} {:name list-stack-instances, :arglists ([list-stack-instances-request]), :type :var, :members ()} {:name list-stack-resources, :arglists ([list-stack-resources-request]), :type :var, :members ()} {:name list-stack-set-operation-results, :arglists ([list-stack-set-operation-results-request]), :type :var, :members ()} {:name list-stack-set-operations, :arglists ([list-stack-set-operations-request]), :type :var, :members ()} {:name list-stack-sets, :arglists ([list-stack-sets-request]), :type :var, :members ()} {:name list-stacks, :arglists ([] [list-stacks-request]), :type :var, :members ()} {:name set-stack-policy, :arglists ([set-stack-policy-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name shutdown, :arglists ([]), :type :var, :members ()} {:name signal-resource, :arglists ([signal-resource-request]), :type :var, :members ()} {:name stop-stack-set-operation, :arglists ([stop-stack-set-operation-request]), :type :var, :members ()} {:name update-stack, :arglists ([update-stack-request]), :type :var, :members ()} {:name update-stack-instances, :arglists ([update-stack-instances-request]), :type :var, :members ()} {:name update-stack-set, :arglists ([update-stack-set-request]), :type :var, :members ()} {:name update-termination-protection, :arglists ([update-termination-protection-request]), :type :var, :members ()} {:name validate-template, :arglists ([validate-template-request]), :type :var, :members ()} {:name waiters, :arglists ([]), :type :var, :members ()})} {:name amazonica.aws.rds, :publics ({:name add-role-to-db-cluster, :arglists ([add-role-to-dbcluster-request]), :type :var, :members ()} {:name add-role-to-db-instance, :arglists ([add-role-to-dbinstance-request]), :type :var, :members ()} {:name add-role-to-dbcluster, :arglists ([add-role-to-dbcluster-request]), :type :var, :members ()} {:name add-role-to-dbinstance, :arglists ([add-role-to-dbinstance-request]), :type :var, :members ()} {:name add-source-identifier-to-subscription, :arglists ([add-source-identifier-to-subscription-request]), :type :var, :members ()} {:name add-tags-to-resource, :arglists ([add-tags-to-resource-request]), :type :var, :members ()} {:name apply-pending-maintenance-action, :arglists ([apply-pending-maintenance-action-request]), :type :var, :members ()} {:name authorize-db-security-group-ingress, :arglists ([authorize-dbsecurity-group-ingress-request]), :type :var, :members ()} {:name authorize-dbsecurity-group-ingress, :arglists ([authorize-dbsecurity-group-ingress-request]), :type :var, :members ()} {:name backtrack-db-cluster, :arglists ([backtrack-dbcluster-request]), :type :var, :members ()} {:name backtrack-dbcluster, :arglists ([backtrack-dbcluster-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name copy-db-cluster-parameter-group, :arglists ([copy-dbcluster-parameter-group-request]), :type :var, :members ()} {:name copy-db-cluster-snapshot, :arglists ([copy-dbcluster-snapshot-request]), :type :var, :members ()} {:name copy-db-parameter-group, :arglists ([copy-dbparameter-group-request]), :type :var, :members ()} {:name copy-db-snapshot, :arglists ([copy-dbsnapshot-request]), :type :var, :members ()} {:name copy-dbcluster-parameter-group, :arglists ([copy-dbcluster-parameter-group-request]), :type :var, :members ()} {:name copy-dbcluster-snapshot, :arglists ([copy-dbcluster-snapshot-request]), :type :var, :members ()} {:name copy-dbparameter-group, :arglists ([copy-dbparameter-group-request]), :type :var, :members ()} {:name copy-dbsnapshot, :arglists ([copy-dbsnapshot-request]), :type :var, :members ()} {:name copy-option-group, :arglists ([copy-option-group-request]), :type :var, :members ()} {:name create-db-cluster, :arglists ([create-dbcluster-request]), :type :var, :members ()} {:name create-db-cluster-endpoint, :arglists ([create-dbcluster-endpoint-request]), :type :var, :members ()} {:name create-db-cluster-parameter-group, :arglists ([create-dbcluster-parameter-group-request]), :type :var, :members ()} {:name create-db-cluster-snapshot, :arglists ([create-dbcluster-snapshot-request]), :type :var, :members ()} {:name create-db-instance, :arglists ([create-dbinstance-request]), :type :var, :members ()} {:name create-db-instance-read-replica, :arglists ([create-dbinstance-read-replica-request]), :type :var, :members ()} {:name create-db-parameter-group, :arglists ([create-dbparameter-group-request]), :type :var, :members ()} {:name create-db-security-group, :arglists ([create-dbsecurity-group-request]), :type :var, :members ()} {:name create-db-snapshot, :arglists ([create-dbsnapshot-request]), :type :var, :members ()} {:name create-db-subnet-group, :arglists ([create-dbsubnet-group-request]), :type :var, :members ()} {:name create-dbcluster, :arglists ([create-dbcluster-request]), :type :var, :members ()} {:name create-dbcluster-endpoint, :arglists ([create-dbcluster-endpoint-request]), :type :var, :members ()} {:name create-dbcluster-parameter-group, :arglists ([create-dbcluster-parameter-group-request]), :type :var, :members ()} {:name create-dbcluster-snapshot, :arglists ([create-dbcluster-snapshot-request]), :type :var, :members ()} {:name create-dbinstance, :arglists ([create-dbinstance-request]), :type :var, :members ()} {:name create-dbinstance-read-replica, :arglists ([create-dbinstance-read-replica-request]), :type :var, :members ()} {:name create-dbparameter-group, :arglists ([create-dbparameter-group-request]), :type :var, :members ()} {:name create-dbsecurity-group, :arglists ([create-dbsecurity-group-request]), :type :var, :members ()} {:name create-dbsnapshot, :arglists ([create-dbsnapshot-request]), :type :var, :members ()} {:name create-dbsubnet-group, :arglists ([create-dbsubnet-group-request]), :type :var, :members ()} {:name create-event-subscription, :arglists ([create-event-subscription-request]), :type :var, :members ()} {:name create-global-cluster, :arglists ([create-global-cluster-request]), :type :var, :members ()} {:name create-option-group, :arglists ([create-option-group-request]), :type :var, :members ()} {:name delete-db-cluster, :arglists ([delete-dbcluster-request]), :type :var, :members ()} {:name delete-db-cluster-endpoint, :arglists ([delete-dbcluster-endpoint-request]), :type :var, :members ()} {:name delete-db-cluster-parameter-group, :arglists ([delete-dbcluster-parameter-group-request]), :type :var, :members ()} {:name delete-db-cluster-snapshot, :arglists ([delete-dbcluster-snapshot-request]), :type :var, :members ()} {:name delete-db-instance, :arglists ([delete-dbinstance-request]), :type :var, :members ()} {:name delete-db-instance-automated-backup, :arglists ([delete-dbinstance-automated-backup-request]), :type :var, :members ()} {:name delete-db-parameter-group, :arglists ([delete-dbparameter-group-request]), :type :var, :members ()} {:name delete-db-security-group, :arglists ([delete-dbsecurity-group-request]), :type :var, :members ()} {:name delete-db-snapshot, :arglists ([delete-dbsnapshot-request]), :type :var, :members ()} {:name delete-db-subnet-group, :arglists ([delete-dbsubnet-group-request]), :type :var, :members ()} {:name delete-dbcluster, :arglists ([delete-dbcluster-request]), :type :var, :members ()} {:name delete-dbcluster-endpoint, :arglists ([delete-dbcluster-endpoint-request]), :type :var, :members ()} {:name delete-dbcluster-parameter-group, :arglists ([delete-dbcluster-parameter-group-request]), :type :var, :members ()} {:name delete-dbcluster-snapshot, :arglists ([delete-dbcluster-snapshot-request]), :type :var, :members ()} {:name delete-dbinstance, :arglists ([delete-dbinstance-request]), :type :var, :members ()} {:name delete-dbinstance-automated-backup, :arglists ([delete-dbinstance-automated-backup-request]), :type :var, :members ()} {:name delete-dbparameter-group, :arglists ([delete-dbparameter-group-request]), :type :var, :members ()} {:name delete-dbsecurity-group, :arglists ([delete-dbsecurity-group-request]), :type :var, :members ()} {:name delete-dbsnapshot, :arglists ([delete-dbsnapshot-request]), :type :var, :members ()} {:name delete-dbsubnet-group, :arglists ([delete-dbsubnet-group-request]), :type :var, :members ()} {:name delete-event-subscription, :arglists ([delete-event-subscription-request]), :type :var, :members ()} {:name delete-global-cluster, :arglists ([delete-global-cluster-request]), :type :var, :members ()} {:name delete-option-group, :arglists ([delete-option-group-request]), :type :var, :members ()} {:name describe-account-attributes, :arglists ([] [describe-account-attributes-request]), :type :var, :members ()} {:name describe-certificates, :arglists ([] [describe-certificates-request]), :type :var, :members ()} {:name describe-db-cluster-backtracks, :arglists ([describe-dbcluster-backtracks-request]), :type :var, :members ()} {:name describe-db-cluster-endpoints, :arglists ([describe-dbcluster-endpoints-request]), :type :var, :members ()} {:name describe-db-cluster-parameter-groups, :arglists ([] [describe-dbcluster-parameter-groups-request]), :type :var, :members ()} {:name describe-db-cluster-parameters, :arglists ([describe-dbcluster-parameters-request]), :type :var, :members ()} {:name describe-db-cluster-snapshot-attributes, :arglists ([describe-dbcluster-snapshot-attributes-request]), :type :var, :members ()} {:name describe-db-cluster-snapshots, :arglists ([] [describe-dbcluster-snapshots-request]), :type :var, :members ()} {:name describe-db-clusters, :arglists ([] [describe-dbclusters-request]), :type :var, :members ()} {:name describe-db-engine-versions, :arglists ([] [describe-dbengine-versions-request]), :type :var, :members ()} {:name describe-db-instance-automated-backups, :arglists ([describe-dbinstance-automated-backups-request]), :type :var, :members ()} {:name describe-db-instances, :arglists ([] [describe-dbinstances-request]), :type :var, :members ()} {:name describe-db-log-files, :arglists ([describe-dblog-files-request]), :type :var, :members ()} {:name describe-db-parameter-groups, :arglists ([] [describe-dbparameter-groups-request]), :type :var, :members ()} {:name describe-db-parameters, :arglists ([describe-dbparameters-request]), :type :var, :members ()} {:name describe-db-security-groups, :arglists ([] [describe-dbsecurity-groups-request]), :type :var, :members ()} {:name describe-db-snapshot-attributes, :arglists ([] [describe-dbsnapshot-attributes-request]), :type :var, :members ()} {:name describe-db-snapshots, :arglists ([] [describe-dbsnapshots-request]), :type :var, :members ()} {:name describe-db-subnet-groups, :arglists ([] [describe-dbsubnet-groups-request]), :type :var, :members ()} {:name describe-dbcluster-backtracks, :arglists ([describe-dbcluster-backtracks-request]), :type :var, :members ()} {:name describe-dbcluster-endpoints, :arglists ([describe-dbcluster-endpoints-request]), :type :var, :members ()} {:name describe-dbcluster-parameter-groups, :arglists ([] [describe-dbcluster-parameter-groups-request]), :type :var, :members ()} {:name describe-dbcluster-parameters, :arglists ([describe-dbcluster-parameters-request]), :type :var, :members ()} {:name describe-dbcluster-snapshot-attributes, :arglists ([describe-dbcluster-snapshot-attributes-request]), :type :var, :members ()} {:name describe-dbcluster-snapshots, :arglists ([] [describe-dbcluster-snapshots-request]), :type :var, :members ()} {:name describe-dbclusters, :arglists ([] [describe-dbclusters-request]), :type :var, :members ()} {:name describe-dbengine-versions, :arglists ([] [describe-dbengine-versions-request]), :type :var, :members ()} {:name describe-dbinstance-automated-backups, :arglists ([describe-dbinstance-automated-backups-request]), :type :var, :members ()} {:name describe-dbinstances, :arglists ([] [describe-dbinstances-request]), :type :var, :members ()} {:name describe-dblog-files, :arglists ([describe-dblog-files-request]), :type :var, :members ()} {:name describe-dbparameter-groups, :arglists ([] [describe-dbparameter-groups-request]), :type :var, :members ()} {:name describe-dbparameters, :arglists ([describe-dbparameters-request]), :type :var, :members ()} {:name describe-dbsecurity-groups, :arglists ([] [describe-dbsecurity-groups-request]), :type :var, :members ()} {:name describe-dbsnapshot-attributes, :arglists ([] [describe-dbsnapshot-attributes-request]), :type :var, :members ()} {:name describe-dbsnapshots, :arglists ([] [describe-dbsnapshots-request]), :type :var, :members ()} {:name describe-dbsubnet-groups, :arglists ([] [describe-dbsubnet-groups-request]), :type :var, :members ()} {:name describe-engine-default-cluster-parameters, :arglists ([describe-engine-default-cluster-parameters-request]), :type :var, :members ()} {:name describe-engine-default-parameters, :arglists ([describe-engine-default-parameters-request]), :type :var, :members ()} {:name describe-event-categories, :arglists ([] [describe-event-categories-request]), :type :var, :members ()} {:name describe-event-subscriptions, :arglists ([] [describe-event-subscriptions-request]), :type :var, :members ()} {:name describe-events, :arglists ([] [describe-events-request]), :type :var, :members ()} {:name describe-global-clusters, :arglists ([describe-global-clusters-request]), :type :var, :members ()} {:name describe-option-group-options, :arglists ([describe-option-group-options-request]), :type :var, :members ()} {:name describe-option-groups, :arglists ([] [describe-option-groups-request]), :type :var, :members ()} {:name describe-orderable-db-instance-options, :arglists ([describe-orderable-dbinstance-options-request]), :type :var, :members ()} {:name describe-orderable-dbinstance-options, :arglists ([describe-orderable-dbinstance-options-request]), :type :var, :members ()} {:name describe-pending-maintenance-actions, :arglists ([] [describe-pending-maintenance-actions-request]), :type :var, :members ()} {:name describe-reserved-db-instances, :arglists ([] [describe-reserved-dbinstances-request]), :type :var, :members ()} {:name describe-reserved-db-instances-offerings, :arglists ([] [describe-reserved-dbinstances-offerings-request]), :type :var, :members ()} {:name describe-reserved-dbinstances, :arglists ([] [describe-reserved-dbinstances-request]), :type :var, :members ()} {:name describe-reserved-dbinstances-offerings, :arglists ([] [describe-reserved-dbinstances-offerings-request]), :type :var, :members ()} {:name describe-source-regions, :arglists ([describe-source-regions-request]), :type :var, :members ()} {:name describe-valid-db-instance-modifications, :arglists ([describe-valid-dbinstance-modifications-request]), :type :var, :members ()} {:name describe-valid-dbinstance-modifications, :arglists ([describe-valid-dbinstance-modifications-request]), :type :var, :members ()} {:name download-db-log-file-portion, :arglists ([download-dblog-file-portion-request]), :type :var, :members ()} {:name download-dblog-file-portion, :arglists ([download-dblog-file-portion-request]), :type :var, :members ()} {:name failover-db-cluster, :arglists ([] [failover-dbcluster-request]), :type :var, :members ()} {:name failover-dbcluster, :arglists ([] [failover-dbcluster-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name modify-current-db-cluster-capacity, :arglists ([modify-current-dbcluster-capacity-request]), :type :var, :members ()} {:name modify-current-dbcluster-capacity, :arglists ([modify-current-dbcluster-capacity-request]), :type :var, :members ()} {:name modify-db-cluster, :arglists ([modify-dbcluster-request]), :type :var, :members ()} {:name modify-db-cluster-endpoint, :arglists ([modify-dbcluster-endpoint-request]), :type :var, :members ()} {:name modify-db-cluster-parameter-group, :arglists ([modify-dbcluster-parameter-group-request]), :type :var, :members ()} {:name modify-db-cluster-snapshot-attribute, :arglists ([modify-dbcluster-snapshot-attribute-request]), :type :var, :members ()} {:name modify-db-instance, :arglists ([modify-dbinstance-request]), :type :var, :members ()} {:name modify-db-parameter-group, :arglists ([modify-dbparameter-group-request]), :type :var, :members ()} {:name modify-db-snapshot, :arglists ([modify-dbsnapshot-request]), :type :var, :members ()} {:name modify-db-snapshot-attribute, :arglists ([modify-dbsnapshot-attribute-request]), :type :var, :members ()} {:name modify-db-subnet-group, :arglists ([modify-dbsubnet-group-request]), :type :var, :members ()} {:name modify-dbcluster, :arglists ([modify-dbcluster-request]), :type :var, :members ()} {:name modify-dbcluster-endpoint, :arglists ([modify-dbcluster-endpoint-request]), :type :var, :members ()} {:name modify-dbcluster-parameter-group, :arglists ([modify-dbcluster-parameter-group-request]), :type :var, :members ()} {:name modify-dbcluster-snapshot-attribute, :arglists ([modify-dbcluster-snapshot-attribute-request]), :type :var, :members ()} {:name modify-dbinstance, :arglists ([modify-dbinstance-request]), :type :var, :members ()} {:name modify-dbparameter-group, :arglists ([modify-dbparameter-group-request]), :type :var, :members ()} {:name modify-dbsnapshot, :arglists ([modify-dbsnapshot-request]), :type :var, :members ()} {:name modify-dbsnapshot-attribute, :arglists ([modify-dbsnapshot-attribute-request]), :type :var, :members ()} {:name modify-dbsubnet-group, :arglists ([modify-dbsubnet-group-request]), :type :var, :members ()} {:name modify-event-subscription, :arglists ([modify-event-subscription-request]), :type :var, :members ()} {:name modify-global-cluster, :arglists ([modify-global-cluster-request]), :type :var, :members ()} {:name modify-option-group, :arglists ([modify-option-group-request]), :type :var, :members ()} {:name promote-read-replica, :arglists ([promote-read-replica-request]), :type :var, :members ()} {:name promote-read-replica-db-cluster, :arglists ([promote-read-replica-dbcluster-request]), :type :var, :members ()} {:name promote-read-replica-dbcluster, :arglists ([promote-read-replica-dbcluster-request]), :type :var, :members ()} {:name purchase-reserved-db-instances-offering, :arglists ([purchase-reserved-dbinstances-offering-request]), :type :var, :members ()} {:name purchase-reserved-dbinstances-offering, :arglists ([purchase-reserved-dbinstances-offering-request]), :type :var, :members ()} {:name reboot-db-instance, :arglists ([reboot-dbinstance-request]), :type :var, :members ()} {:name reboot-dbinstance, :arglists ([reboot-dbinstance-request]), :type :var, :members ()} {:name remove-from-global-cluster, :arglists ([remove-from-global-cluster-request]), :type :var, :members ()} {:name remove-role-from-db-cluster, :arglists ([remove-role-from-dbcluster-request]), :type :var, :members ()} {:name remove-role-from-db-instance, :arglists ([remove-role-from-dbinstance-request]), :type :var, :members ()} {:name remove-role-from-dbcluster, :arglists ([remove-role-from-dbcluster-request]), :type :var, :members ()} {:name remove-role-from-dbinstance, :arglists ([remove-role-from-dbinstance-request]), :type :var, :members ()} {:name remove-source-identifier-from-subscription, :arglists ([remove-source-identifier-from-subscription-request]), :type :var, :members ()} {:name remove-tags-from-resource, :arglists ([remove-tags-from-resource-request]), :type :var, :members ()} {:name reset-db-cluster-parameter-group, :arglists ([reset-dbcluster-parameter-group-request]), :type :var, :members ()} {:name reset-db-parameter-group, :arglists ([reset-dbparameter-group-request]), :type :var, :members ()} {:name reset-dbcluster-parameter-group, :arglists ([reset-dbcluster-parameter-group-request]), :type :var, :members ()} {:name reset-dbparameter-group, :arglists ([reset-dbparameter-group-request]), :type :var, :members ()} {:name restore-db-cluster-from-s3, :arglists ([restore-dbcluster-from-s3-request]), :type :var, :members ()} {:name restore-db-cluster-from-snapshot, :arglists ([restore-dbcluster-from-snapshot-request]), :type :var, :members ()} {:name restore-db-cluster-to-point-in-time, :arglists ([restore-dbcluster-to-point-in-time-request]), :type :var, :members ()} {:name restore-db-instance-from-db-snapshot, :arglists ([restore-dbinstance-from-dbsnapshot-request]), :type :var, :members ()} {:name restore-db-instance-from-s3, :arglists ([restore-dbinstance-from-s3-request]), :type :var, :members ()} {:name restore-db-instance-to-point-in-time, :arglists ([restore-dbinstance-to-point-in-time-request]), :type :var, :members ()} {:name restore-dbcluster-from-s3, :arglists ([restore-dbcluster-from-s3-request]), :type :var, :members ()} {:name restore-dbcluster-from-snapshot, :arglists ([restore-dbcluster-from-snapshot-request]), :type :var, :members ()} {:name restore-dbcluster-to-point-in-time, :arglists ([restore-dbcluster-to-point-in-time-request]), :type :var, :members ()} {:name restore-dbinstance-from-dbsnapshot, :arglists ([restore-dbinstance-from-dbsnapshot-request]), :type :var, :members ()} {:name restore-dbinstance-from-s3, :arglists ([restore-dbinstance-from-s3-request]), :type :var, :members ()} {:name restore-dbinstance-to-point-in-time, :arglists ([restore-dbinstance-to-point-in-time-request]), :type :var, :members ()} {:name revoke-db-security-group-ingress, :arglists ([revoke-dbsecurity-group-ingress-request]), :type :var, :members ()} {:name revoke-dbsecurity-group-ingress, :arglists ([revoke-dbsecurity-group-ingress-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name shutdown, :arglists ([]), :type :var, :members ()} {:name start-activity-stream, :arglists ([start-activity-stream-request]), :type :var, :members ()} {:name start-db-cluster, :arglists ([start-dbcluster-request]), :type :var, :members ()} {:name start-db-instance, :arglists ([start-dbinstance-request]), :type :var, :members ()} {:name start-dbcluster, :arglists ([start-dbcluster-request]), :type :var, :members ()} {:name start-dbinstance, :arglists ([start-dbinstance-request]), :type :var, :members ()} {:name stop-activity-stream, :arglists ([stop-activity-stream-request]), :type :var, :members ()} {:name stop-db-cluster, :arglists ([stop-dbcluster-request]), :type :var, :members ()} {:name stop-db-instance, :arglists ([stop-dbinstance-request]), :type :var, :members ()} {:name stop-dbcluster, :arglists ([stop-dbcluster-request]), :type :var, :members ()} {:name stop-dbinstance, :arglists ([stop-dbinstance-request]), :type :var, :members ()} {:name waiters, :arglists ([]), :type :var, :members ()})} {:name amazonica.aws.elasticloadbalancingv2, :publics ({:name add-listener-certificates, :arglists ([add-listener-certificates-request]), :type :var, :members ()} {:name add-tags, :arglists ([add-tags-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-listener, :arglists ([create-listener-request]), :type :var, :members ()} {:name create-load-balancer, :arglists ([create-load-balancer-request]), :type :var, :members ()} {:name create-rule, :arglists ([create-rule-request]), :type :var, :members ()} {:name create-target-group, :arglists ([create-target-group-request]), :type :var, :members ()} {:name delete-listener, :arglists ([delete-listener-request]), :type :var, :members ()} {:name delete-load-balancer, :arglists ([delete-load-balancer-request]), :type :var, :members ()} {:name delete-rule, :arglists ([delete-rule-request]), :type :var, :members ()} {:name delete-target-group, :arglists ([delete-target-group-request]), :type :var, :members ()} {:name deregister-targets, :arglists ([deregister-targets-request]), :type :var, :members ()} {:name describe-account-limits, :arglists ([describe-account-limits-request]), :type :var, :members ()} {:name describe-listener-certificates, :arglists ([describe-listener-certificates-request]), :type :var, :members ()} {:name describe-listeners, :arglists ([describe-listeners-request]), :type :var, :members ()} {:name describe-load-balancer-attributes, :arglists ([describe-load-balancer-attributes-request]), :type :var, :members ()} {:name describe-load-balancers, :arglists ([describe-load-balancers-request]), :type :var, :members ()} {:name describe-rules, :arglists ([describe-rules-request]), :type :var, :members ()} {:name describe-ssl-policies, :arglists ([describe-sslpolicies-request]), :type :var, :members ()} {:name describe-sslpolicies, :arglists ([describe-sslpolicies-request]), :type :var, :members ()} {:name describe-tags, :arglists ([describe-tags-request]), :type :var, :members ()} {:name describe-target-group-attributes, :arglists ([describe-target-group-attributes-request]), :type :var, :members ()} {:name describe-target-groups, :arglists ([describe-target-groups-request]), :type :var, :members ()} {:name describe-target-health, :arglists ([describe-target-health-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name modify-listener, :arglists ([modify-listener-request]), :type :var, :members ()} {:name modify-load-balancer-attributes, :arglists ([modify-load-balancer-attributes-request]), :type :var, :members ()} {:name modify-rule, :arglists ([modify-rule-request]), :type :var, :members ()} {:name modify-target-group, :arglists ([modify-target-group-request]), :type :var, :members ()} {:name modify-target-group-attributes, :arglists ([modify-target-group-attributes-request]), :type :var, :members ()} {:name register-targets, :arglists ([register-targets-request]), :type :var, :members ()} {:name remove-listener-certificates, :arglists ([remove-listener-certificates-request]), :type :var, :members ()} {:name remove-tags, :arglists ([remove-tags-request]), :type :var, :members ()} {:name set-ip-address-type, :arglists ([set-ip-address-type-request]), :type :var, :members ()} {:name set-rule-priorities, :arglists ([set-rule-priorities-request]), :type :var, :members ()} {:name set-security-groups, :arglists ([set-security-groups-request]), :type :var, :members ()} {:name set-subnets, :arglists ([set-subnets-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name shutdown, :arglists ([]), :type :var, :members ()} {:name waiters, :arglists ([]), :type :var, :members ()})} {:name amazonica.aws.eks, :publics ({:name client-class, :type :var, :members ()} {:name create-cluster, :arglists ([create-cluster-request]), :type :var, :members ()} {:name delete-cluster, :arglists ([delete-cluster-request]), :type :var, :members ()} {:name describe-cluster, :arglists ([describe-cluster-request]), :type :var, :members ()} {:name describe-update, :arglists ([describe-update-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name list-clusters, :arglists ([list-clusters-request]), :type :var, :members ()} {:name list-updates, :arglists ([list-updates-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name shutdown, :arglists ([]), :type :var, :members ()} {:name update-cluster-config, :arglists ([update-cluster-config-request]), :type :var, :members ()} {:name update-cluster-version, :arglists ([update-cluster-version-request]), :type :var, :members ()} {:name waiters, :arglists ([]), :type :var, :members ()})} {:name amazonica.aws.macie, :publics ({:name associate-member-account, :arglists ([associate-member-account-request]), :type :var, :members ()} {:name associate-s3-resources, :arglists ([associate-s3-resources-request]), :type :var, :members ()} {:name associate-s3resources, :arglists ([associate-s3-resources-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name disassociate-member-account, :arglists ([disassociate-member-account-request]), :type :var, :members ()} {:name disassociate-s3-resources, :arglists ([disassociate-s3-resources-request]), :type :var, :members ()} {:name disassociate-s3resources, :arglists ([disassociate-s3-resources-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name list-member-accounts, :arglists ([list-member-accounts-request]), :type :var, :members ()} {:name list-s3-resources, :arglists ([list-s3-resources-request]), :type :var, :members ()} {:name list-s3resources, :arglists ([list-s3-resources-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name update-s3-resources, :arglists ([update-s3-resources-request]), :type :var, :members ()} {:name update-s3resources, :arglists ([update-s3-resources-request]), :type :var, :members ()})} {:name amazonica.aws.waf, :publics ({:name client-class, :type :var, :members ()} {:name create-byte-match-set, :arglists ([create-byte-match-set-request]), :type :var, :members ()} {:name create-geo-match-set, :arglists ([create-geo-match-set-request]), :type :var, :members ()} {:name create-ip-set, :arglists ([create-ipset-request]), :type :var, :members ()} {:name create-ipset, :arglists ([create-ipset-request]), :type :var, :members ()} {:name create-rate-based-rule, :arglists ([create-rate-based-rule-request]), :type :var, :members ()} {:name create-regex-match-set, :arglists ([create-regex-match-set-request]), :type :var, :members ()} {:name create-regex-pattern-set, :arglists ([create-regex-pattern-set-request]), :type :var, :members ()} {:name create-rule, :arglists ([create-rule-request]), :type :var, :members ()} {:name create-rule-group, :arglists ([create-rule-group-request]), :type :var, :members ()} {:name create-size-constraint-set, :arglists ([create-size-constraint-set-request]), :type :var, :members ()} {:name create-sql-injection-match-set, :arglists ([create-sql-injection-match-set-request]), :type :var, :members ()} {:name create-web-acl, :arglists ([create-web-aclrequest]), :type :var, :members ()} {:name create-xss-match-set, :arglists ([create-xss-match-set-request]), :type :var, :members ()} {:name delete-byte-match-set, :arglists ([delete-byte-match-set-request]), :type :var, :members ()} {:name delete-geo-match-set, :arglists ([delete-geo-match-set-request]), :type :var, :members ()} {:name delete-ip-set, :arglists ([delete-ipset-request]), :type :var, :members ()} {:name delete-ipset, :arglists ([delete-ipset-request]), :type :var, :members ()} {:name delete-logging-configuration, :arglists ([delete-logging-configuration-request]), :type :var, :members ()} {:name delete-permission-policy, :arglists ([delete-permission-policy-request]), :type :var, :members ()} {:name delete-rate-based-rule, :arglists ([delete-rate-based-rule-request]), :type :var, :members ()} {:name delete-regex-match-set, :arglists ([delete-regex-match-set-request]), :type :var, :members ()} {:name delete-regex-pattern-set, :arglists ([delete-regex-pattern-set-request]), :type :var, :members ()} {:name delete-rule, :arglists ([delete-rule-request]), :type :var, :members ()} {:name delete-rule-group, :arglists ([delete-rule-group-request]), :type :var, :members ()} {:name delete-size-constraint-set, :arglists ([delete-size-constraint-set-request]), :type :var, :members ()} {:name delete-sql-injection-match-set, :arglists ([delete-sql-injection-match-set-request]), :type :var, :members ()} {:name delete-web-acl, :arglists ([delete-web-aclrequest]), :type :var, :members ()} {:name delete-xss-match-set, :arglists ([delete-xss-match-set-request]), :type :var, :members ()} {:name get-byte-match-set, :arglists ([get-byte-match-set-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-change-token, :arglists ([get-change-token-request]), :type :var, :members ()} {:name get-change-token-status, :arglists ([get-change-token-status-request]), :type :var, :members ()} {:name get-geo-match-set, :arglists ([get-geo-match-set-request]), :type :var, :members ()} {:name get-ip-set, :arglists ([get-ipset-request]), :type :var, :members ()} {:name get-ipset, :arglists ([get-ipset-request]), :type :var, :members ()} {:name get-logging-configuration, :arglists ([get-logging-configuration-request]), :type :var, :members ()} {:name get-permission-policy, :arglists ([get-permission-policy-request]), :type :var, :members ()} {:name get-rate-based-rule, :arglists ([get-rate-based-rule-request]), :type :var, :members ()} {:name get-rate-based-rule-managed-keys, :arglists ([get-rate-based-rule-managed-keys-request]), :type :var, :members ()} {:name get-regex-match-set, :arglists ([get-regex-match-set-request]), :type :var, :members ()} {:name get-regex-pattern-set, :arglists ([get-regex-pattern-set-request]), :type :var, :members ()} {:name get-rule, :arglists ([get-rule-request]), :type :var, :members ()} {:name get-rule-group, :arglists ([get-rule-group-request]), :type :var, :members ()} {:name get-sampled-requests, :arglists ([get-sampled-requests-request]), :type :var, :members ()} {:name get-size-constraint-set, :arglists ([get-size-constraint-set-request]), :type :var, :members ()} {:name get-sql-injection-match-set, :arglists ([get-sql-injection-match-set-request]), :type :var, :members ()} {:name get-web-acl, :arglists ([get-web-aclrequest]), :type :var, :members ()} {:name get-xss-match-set, :arglists ([get-xss-match-set-request]), :type :var, :members ()} {:name list-activated-rules-in-rule-group, :arglists ([list-activated-rules-in-rule-group-request]), :type :var, :members ()} {:name list-byte-match-sets, :arglists ([list-byte-match-sets-request]), :type :var, :members ()} {:name list-geo-match-sets, :arglists ([list-geo-match-sets-request]), :type :var, :members ()} {:name list-ip-sets, :arglists ([list-ipsets-request]), :type :var, :members ()} {:name list-ipsets, :arglists ([list-ipsets-request]), :type :var, :members ()} {:name list-logging-configurations, :arglists ([list-logging-configurations-request]), :type :var, :members ()} {:name list-rate-based-rules, :arglists ([list-rate-based-rules-request]), :type :var, :members ()} {:name list-regex-match-sets, :arglists ([list-regex-match-sets-request]), :type :var, :members ()} {:name list-regex-pattern-sets, :arglists ([list-regex-pattern-sets-request]), :type :var, :members ()} {:name list-rule-groups, :arglists ([list-rule-groups-request]), :type :var, :members ()} {:name list-rules, :arglists ([list-rules-request]), :type :var, :members ()} {:name list-size-constraint-sets, :arglists ([list-size-constraint-sets-request]), :type :var, :members ()} {:name list-sql-injection-match-sets, :arglists ([list-sql-injection-match-sets-request]), :type :var, :members ()} {:name list-subscribed-rule-groups, :arglists ([list-subscribed-rule-groups-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name list-web-ac-ls, :arglists ([list-web-acls-request]), :type :var, :members ()} {:name list-web-acls, :arglists ([list-web-acls-request]), :type :var, :members ()} {:name list-xss-match-sets, :arglists ([list-xss-match-sets-request]), :type :var, :members ()} {:name put-logging-configuration, :arglists ([put-logging-configuration-request]), :type :var, :members ()} {:name put-permission-policy, :arglists ([put-permission-policy-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-byte-match-set, :arglists ([update-byte-match-set-request]), :type :var, :members ()} {:name update-geo-match-set, :arglists ([update-geo-match-set-request]), :type :var, :members ()} {:name update-ip-set, :arglists ([update-ipset-request]), :type :var, :members ()} {:name update-ipset, :arglists ([update-ipset-request]), :type :var, :members ()} {:name update-rate-based-rule, :arglists ([update-rate-based-rule-request]), :type :var, :members ()} {:name update-regex-match-set, :arglists ([update-regex-match-set-request]), :type :var, :members ()} {:name update-regex-pattern-set, :arglists ([update-regex-pattern-set-request]), :type :var, :members ()} {:name update-rule, :arglists ([update-rule-request]), :type :var, :members ()} {:name update-rule-group, :arglists ([update-rule-group-request]), :type :var, :members ()} {:name update-size-constraint-set, :arglists ([update-size-constraint-set-request]), :type :var, :members ()} {:name update-sql-injection-match-set, :arglists ([update-sql-injection-match-set-request]), :type :var, :members ()} {:name update-web-acl, :arglists ([update-web-aclrequest]), :type :var, :members ()} {:name update-xss-match-set, :arglists ([update-xss-match-set-request]), :type :var, :members ()})} {:name amazonica.aws.ec2, :publics ({:name accept-reserved-instances-exchange-quote, :arglists ([accept-reserved-instances-exchange-quote-request]), :type :var, :members ()} {:name accept-transit-gateway-vpc-attachment, :arglists ([accept-transit-gateway-vpc-attachment-request]), :type :var, :members ()} {:name accept-vpc-endpoint-connections, :arglists ([accept-vpc-endpoint-connections-request]), :type :var, :members ()} {:name accept-vpc-peering-connection, :arglists ([] [accept-vpc-peering-connection-request]), :type :var, :members ()} {:name advertise-byoip-cidr, :arglists ([advertise-byoip-cidr-request]), :type :var, :members ()} {:name allocate-address, :arglists ([] [allocate-address-request]), :type :var, :members ()} {:name allocate-hosts, :arglists ([allocate-hosts-request]), :type :var, :members ()} {:name apply-security-groups-to-client-vpn-target-network, :arglists ([apply-security-groups-to-client-vpn-target-network-request]), :type :var, :members ()} {:name assign-ipv6-addresses, :arglists ([assign-ipv6-addresses-request]), :type :var, :members ()} {:name assign-ipv6addresses, :arglists ([assign-ipv6-addresses-request]), :type :var, :members ()} {:name assign-private-ip-addresses, :arglists ([assign-private-ip-addresses-request]), :type :var, :members ()} {:name associate-address, :arglists ([associate-address-request]), :type :var, :members ()} {:name associate-client-vpn-target-network, :arglists ([associate-client-vpn-target-network-request]), :type :var, :members ()} {:name associate-dhcp-options, :arglists ([associate-dhcp-options-request]), :type :var, :members ()} {:name associate-iam-instance-profile, :arglists ([associate-iam-instance-profile-request]), :type :var, :members ()} {:name associate-route-table, :arglists ([associate-route-table-request]), :type :var, :members ()} {:name associate-subnet-cidr-block, :arglists ([associate-subnet-cidr-block-request]), :type :var, :members ()} {:name associate-transit-gateway-route-table, :arglists ([associate-transit-gateway-route-table-request]), :type :var, :members ()} {:name associate-vpc-cidr-block, :arglists ([associate-vpc-cidr-block-request]), :type :var, :members ()} {:name attach-classic-link-vpc, :arglists ([attach-classic-link-vpc-request]), :type :var, :members ()} {:name attach-internet-gateway, :arglists ([attach-internet-gateway-request]), :type :var, :members ()} {:name attach-network-interface, :arglists ([attach-network-interface-request]), :type :var, :members ()} {:name attach-volume, :arglists ([attach-volume-request]), :type :var, :members ()} {:name attach-vpn-gateway, :arglists ([attach-vpn-gateway-request]), :type :var, :members ()} {:name authorize-client-vpn-ingress, :arglists ([authorize-client-vpn-ingress-request]), :type :var, :members ()} {:name authorize-security-group-egress, :arglists ([authorize-security-group-egress-request]), :type :var, :members ()} {:name authorize-security-group-ingress, :arglists ([authorize-security-group-ingress-request]), :type :var, :members ()} {:name bundle-instance, :arglists ([bundle-instance-request]), :type :var, :members ()} {:name cancel-bundle-task, :arglists ([cancel-bundle-task-request]), :type :var, :members ()} {:name cancel-capacity-reservation, :arglists ([cancel-capacity-reservation-request]), :type :var, :members ()} {:name cancel-conversion-task, :arglists ([cancel-conversion-task-request]), :type :var, :members ()} {:name cancel-export-task, :arglists ([cancel-export-task-request]), :type :var, :members ()} {:name cancel-import-task, :arglists ([] [cancel-import-task-request]), :type :var, :members ()} {:name cancel-reserved-instances-listing, :arglists ([cancel-reserved-instances-listing-request]), :type :var, :members ()} {:name cancel-spot-fleet-requests, :arglists ([cancel-spot-fleet-requests-request]), :type :var, :members ()} {:name cancel-spot-instance-requests, :arglists ([cancel-spot-instance-requests-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name confirm-product-instance, :arglists ([confirm-product-instance-request]), :type :var, :members ()} {:name copy-fpga-image, :arglists ([copy-fpga-image-request]), :type :var, :members ()} {:name copy-image, :arglists ([copy-image-request]), :type :var, :members ()} {:name copy-snapshot, :arglists ([copy-snapshot-request]), :type :var, :members ()} {:name create-capacity-reservation, :arglists ([create-capacity-reservation-request]), :type :var, :members ()} {:name create-client-vpn-endpoint, :arglists ([create-client-vpn-endpoint-request]), :type :var, :members ()} {:name create-client-vpn-route, :arglists ([create-client-vpn-route-request]), :type :var, :members ()} {:name create-customer-gateway, :arglists ([create-customer-gateway-request]), :type :var, :members ()} {:name create-default-subnet, :arglists ([create-default-subnet-request]), :type :var, :members ()} {:name create-default-vpc, :arglists ([create-default-vpc-request]), :type :var, :members ()} {:name create-dhcp-options, :arglists ([create-dhcp-options-request]), :type :var, :members ()} {:name create-egress-only-internet-gateway, :arglists ([create-egress-only-internet-gateway-request]), :type :var, :members ()} {:name create-fleet, :arglists ([create-fleet-request]), :type :var, :members ()} {:name create-flow-logs, :arglists ([create-flow-logs-request]), :type :var, :members ()} {:name create-fpga-image, :arglists ([create-fpga-image-request]), :type :var, :members ()} {:name create-image, :arglists ([create-image-request]), :type :var, :members ()} {:name create-instance-export-task, :arglists ([create-instance-export-task-request]), :type :var, :members ()} {:name create-internet-gateway, :arglists ([] [create-internet-gateway-request]), :type :var, :members ()} {:name create-key-pair, :arglists ([create-key-pair-request]), :type :var, :members ()} {:name create-launch-template, :arglists ([create-launch-template-request]), :type :var, :members ()} {:name create-launch-template-version, :arglists ([create-launch-template-version-request]), :type :var, :members ()} {:name create-nat-gateway, :arglists ([create-nat-gateway-request]), :type :var, :members ()} {:name create-network-acl, :arglists ([create-network-acl-request]), :type :var, :members ()} {:name create-network-acl-entry, :arglists ([create-network-acl-entry-request]), :type :var, :members ()} {:name create-network-interface, :arglists ([create-network-interface-request]), :type :var, :members ()} {:name create-network-interface-permission, :arglists ([create-network-interface-permission-request]), :type :var, :members ()} {:name create-placement-group, :arglists ([create-placement-group-request]), :type :var, :members ()} {:name create-reserved-instances-listing, :arglists ([create-reserved-instances-listing-request]), :type :var, :members ()} {:name create-route, :arglists ([create-route-request]), :type :var, :members ()} {:name create-route-table, :arglists ([create-route-table-request]), :type :var, :members ()} {:name create-security-group, :arglists ([create-security-group-request]), :type :var, :members ()} {:name create-snapshot, :arglists ([create-snapshot-request]), :type :var, :members ()} {:name create-snapshots, :arglists ([create-snapshots-request]), :type :var, :members ()} {:name create-spot-datafeed-subscription, :arglists ([create-spot-datafeed-subscription-request]), :type :var, :members ()} {:name create-subnet, :arglists ([create-subnet-request]), :type :var, :members ()} {:name create-tags, :arglists ([create-tags-request]), :type :var, :members ()} {:name create-traffic-mirror-filter, :arglists ([create-traffic-mirror-filter-request]), :type :var, :members ()} {:name create-traffic-mirror-filter-rule, :arglists ([create-traffic-mirror-filter-rule-request]), :type :var, :members ()} {:name create-traffic-mirror-session, :arglists ([create-traffic-mirror-session-request]), :type :var, :members ()} {:name create-traffic-mirror-target, :arglists ([create-traffic-mirror-target-request]), :type :var, :members ()} {:name create-transit-gateway, :arglists ([create-transit-gateway-request]), :type :var, :members ()} {:name create-transit-gateway-route, :arglists ([create-transit-gateway-route-request]), :type :var, :members ()} {:name create-transit-gateway-route-table, :arglists ([create-transit-gateway-route-table-request]), :type :var, :members ()} {:name create-transit-gateway-vpc-attachment, :arglists ([create-transit-gateway-vpc-attachment-request]), :type :var, :members ()} {:name create-volume, :arglists ([create-volume-request]), :type :var, :members ()} {:name create-vpc, :arglists ([create-vpc-request]), :type :var, :members ()} {:name create-vpc-endpoint, :arglists ([create-vpc-endpoint-request]), :type :var, :members ()} {:name create-vpc-endpoint-connection-notification, :arglists ([create-vpc-endpoint-connection-notification-request]), :type :var, :members ()} {:name create-vpc-endpoint-service-configuration, :arglists ([create-vpc-endpoint-service-configuration-request]), :type :var, :members ()} {:name create-vpc-peering-connection, :arglists ([] [create-vpc-peering-connection-request]), :type :var, :members ()} {:name create-vpn-connection, :arglists ([create-vpn-connection-request]), :type :var, :members ()} {:name create-vpn-connection-route, :arglists ([create-vpn-connection-route-request]), :type :var, :members ()} {:name create-vpn-gateway, :arglists ([create-vpn-gateway-request]), :type :var, :members ()} {:name delete-client-vpn-endpoint, :arglists ([delete-client-vpn-endpoint-request]), :type :var, :members ()} {:name delete-client-vpn-route, :arglists ([delete-client-vpn-route-request]), :type :var, :members ()} {:name delete-customer-gateway, :arglists ([delete-customer-gateway-request]), :type :var, :members ()} {:name delete-dhcp-options, :arglists ([delete-dhcp-options-request]), :type :var, :members ()} {:name delete-egress-only-internet-gateway, :arglists ([delete-egress-only-internet-gateway-request]), :type :var, :members ()} {:name delete-fleets, :arglists ([delete-fleets-request]), :type :var, :members ()} {:name delete-flow-logs, :arglists ([delete-flow-logs-request]), :type :var, :members ()} {:name delete-fpga-image, :arglists ([delete-fpga-image-request]), :type :var, :members ()} {:name delete-internet-gateway, :arglists ([delete-internet-gateway-request]), :type :var, :members ()} {:name delete-key-pair, :arglists ([delete-key-pair-request]), :type :var, :members ()} {:name delete-launch-template, :arglists ([delete-launch-template-request]), :type :var, :members ()} {:name delete-launch-template-versions, :arglists ([delete-launch-template-versions-request]), :type :var, :members ()} {:name delete-nat-gateway, :arglists ([delete-nat-gateway-request]), :type :var, :members ()} {:name delete-network-acl, :arglists ([delete-network-acl-request]), :type :var, :members ()} {:name delete-network-acl-entry, :arglists ([delete-network-acl-entry-request]), :type :var, :members ()} {:name delete-network-interface, :arglists ([delete-network-interface-request]), :type :var, :members ()} {:name delete-network-interface-permission, :arglists ([delete-network-interface-permission-request]), :type :var, :members ()} {:name delete-placement-group, :arglists ([delete-placement-group-request]), :type :var, :members ()} {:name delete-route, :arglists ([delete-route-request]), :type :var, :members ()} {:name delete-route-table, :arglists ([delete-route-table-request]), :type :var, :members ()} {:name delete-security-group, :arglists ([delete-security-group-request]), :type :var, :members ()} {:name delete-snapshot, :arglists ([delete-snapshot-request]), :type :var, :members ()} {:name delete-spot-datafeed-subscription, :arglists ([] [delete-spot-datafeed-subscription-request]), :type :var, :members ()} {:name delete-subnet, :arglists ([delete-subnet-request]), :type :var, :members ()} {:name delete-tags, :arglists ([delete-tags-request]), :type :var, :members ()} {:name delete-traffic-mirror-filter, :arglists ([delete-traffic-mirror-filter-request]), :type :var, :members ()} {:name delete-traffic-mirror-filter-rule, :arglists ([delete-traffic-mirror-filter-rule-request]), :type :var, :members ()} {:name delete-traffic-mirror-session, :arglists ([delete-traffic-mirror-session-request]), :type :var, :members ()} {:name delete-traffic-mirror-target, :arglists ([delete-traffic-mirror-target-request]), :type :var, :members ()} {:name delete-transit-gateway, :arglists ([delete-transit-gateway-request]), :type :var, :members ()} {:name delete-transit-gateway-route, :arglists ([delete-transit-gateway-route-request]), :type :var, :members ()} {:name delete-transit-gateway-route-table, :arglists ([delete-transit-gateway-route-table-request]), :type :var, :members ()} {:name delete-transit-gateway-vpc-attachment, :arglists ([delete-transit-gateway-vpc-attachment-request]), :type :var, :members ()} {:name delete-volume, :arglists ([delete-volume-request]), :type :var, :members ()} {:name delete-vpc, :arglists ([delete-vpc-request]), :type :var, :members ()} {:name delete-vpc-endpoint-connection-notifications, :arglists ([delete-vpc-endpoint-connection-notifications-request]), :type :var, :members ()} {:name delete-vpc-endpoint-service-configurations, :arglists ([delete-vpc-endpoint-service-configurations-request]), :type :var, :members ()} {:name delete-vpc-endpoints, :arglists ([delete-vpc-endpoints-request]), :type :var, :members ()} {:name delete-vpc-peering-connection, :arglists ([delete-vpc-peering-connection-request]), :type :var, :members ()} {:name delete-vpn-connection, :arglists ([delete-vpn-connection-request]), :type :var, :members ()} {:name delete-vpn-connection-route, :arglists ([delete-vpn-connection-route-request]), :type :var, :members ()} {:name delete-vpn-gateway, :arglists ([delete-vpn-gateway-request]), :type :var, :members ()} {:name deprovision-byoip-cidr, :arglists ([deprovision-byoip-cidr-request]), :type :var, :members ()} {:name deregister-image, :arglists ([deregister-image-request]), :type :var, :members ()} {:name describe-account-attributes, :arglists ([] [describe-account-attributes-request]), :type :var, :members ()} {:name describe-addresses, :arglists ([] [describe-addresses-request]), :type :var, :members ()} {:name describe-aggregate-id-format, :arglists ([describe-aggregate-id-format-request]), :type :var, :members ()} {:name describe-availability-zones, :arglists ([] [describe-availability-zones-request]), :type :var, :members ()} {:name describe-bundle-tasks, :arglists ([] [describe-bundle-tasks-request]), :type :var, :members ()} {:name describe-byoip-cidrs, :arglists ([describe-byoip-cidrs-request]), :type :var, :members ()} {:name describe-capacity-reservations, :arglists ([describe-capacity-reservations-request]), :type :var, :members ()} {:name describe-classic-link-instances, :arglists ([] [describe-classic-link-instances-request]), :type :var, :members ()} {:name describe-client-vpn-authorization-rules, :arglists ([describe-client-vpn-authorization-rules-request]), :type :var, :members ()} {:name describe-client-vpn-connections, :arglists ([describe-client-vpn-connections-request]), :type :var, :members ()} {:name describe-client-vpn-endpoints, :arglists ([describe-client-vpn-endpoints-request]), :type :var, :members ()} {:name describe-client-vpn-routes, :arglists ([describe-client-vpn-routes-request]), :type :var, :members ()} {:name describe-client-vpn-target-networks, :arglists ([describe-client-vpn-target-networks-request]), :type :var, :members ()} {:name describe-conversion-tasks, :arglists ([] [describe-conversion-tasks-request]), :type :var, :members ()} {:name describe-customer-gateways, :arglists ([] [describe-customer-gateways-request]), :type :var, :members ()} {:name describe-dhcp-options, :arglists ([] [describe-dhcp-options-request]), :type :var, :members ()} {:name describe-egress-only-internet-gateways, :arglists ([describe-egress-only-internet-gateways-request]), :type :var, :members ()} {:name describe-elastic-gpus, :arglists ([describe-elastic-gpus-request]), :type :var, :members ()} {:name describe-export-tasks, :arglists ([] [describe-export-tasks-request]), :type :var, :members ()} {:name describe-fleet-history, :arglists ([describe-fleet-history-request]), :type :var, :members ()} {:name describe-fleet-instances, :arglists ([describe-fleet-instances-request]), :type :var, :members ()} {:name describe-fleets, :arglists ([describe-fleets-request]), :type :var, :members ()} {:name describe-flow-logs, :arglists ([] [describe-flow-logs-request]), :type :var, :members ()} {:name describe-fpga-image-attribute, :arglists ([describe-fpga-image-attribute-request]), :type :var, :members ()} {:name describe-fpga-images, :arglists ([describe-fpga-images-request]), :type :var, :members ()} {:name describe-host-reservation-offerings, :arglists ([describe-host-reservation-offerings-request]), :type :var, :members ()} {:name describe-host-reservations, :arglists ([describe-host-reservations-request]), :type :var, :members ()} {:name describe-hosts, :arglists ([] [describe-hosts-request]), :type :var, :members ()} {:name describe-iam-instance-profile-associations, :arglists ([describe-iam-instance-profile-associations-request]), :type :var, :members ()} {:name describe-id-format, :arglists ([] [describe-id-format-request]), :type :var, :members ()} {:name describe-identity-id-format, :arglists ([describe-identity-id-format-request]), :type :var, :members ()} {:name describe-image-attribute, :arglists ([describe-image-attribute-request]), :type :var, :members ()} {:name describe-images, :arglists ([] [describe-images-request]), :type :var, :members ()} {:name describe-import-image-tasks, :arglists ([] [describe-import-image-tasks-request]), :type :var, :members ()} {:name describe-import-snapshot-tasks, :arglists ([] [describe-import-snapshot-tasks-request]), :type :var, :members ()} {:name describe-instance-attribute, :arglists ([describe-instance-attribute-request]), :type :var, :members ()} {:name describe-instance-credit-specifications, :arglists ([describe-instance-credit-specifications-request]), :type :var, :members ()} {:name describe-instance-status, :arglists ([] [describe-instance-status-request]), :type :var, :members ()} {:name describe-instances, :arglists ([] [describe-instances-request]), :type :var, :members ()} {:name describe-internet-gateways, :arglists ([] [describe-internet-gateways-request]), :type :var, :members ()} {:name describe-key-pairs, :arglists ([] [describe-key-pairs-request]), :type :var, :members ()} {:name describe-launch-template-versions, :arglists ([describe-launch-template-versions-request]), :type :var, :members ()} {:name describe-launch-templates, :arglists ([describe-launch-templates-request]), :type :var, :members ()} {:name describe-moving-addresses, :arglists ([] [describe-moving-addresses-request]), :type :var, :members ()} {:name describe-nat-gateways, :arglists ([describe-nat-gateways-request]), :type :var, :members ()} {:name describe-network-acls, :arglists ([] [describe-network-acls-request]), :type :var, :members ()} {:name describe-network-interface-attribute, :arglists ([describe-network-interface-attribute-request]), :type :var, :members ()} {:name describe-network-interface-permissions, :arglists ([describe-network-interface-permissions-request]), :type :var, :members ()} {:name describe-network-interfaces, :arglists ([] [describe-network-interfaces-request]), :type :var, :members ()} {:name describe-placement-groups, :arglists ([] [describe-placement-groups-request]), :type :var, :members ()} {:name describe-prefix-lists, :arglists ([] [describe-prefix-lists-request]), :type :var, :members ()} {:name describe-principal-id-format, :arglists ([describe-principal-id-format-request]), :type :var, :members ()} {:name describe-public-ipv4-pools, :arglists ([describe-public-ipv4-pools-request]), :type :var, :members ()} {:name describe-public-ipv4pools, :arglists ([describe-public-ipv4-pools-request]), :type :var, :members ()} {:name describe-regions, :arglists ([] [describe-regions-request]), :type :var, :members ()} {:name describe-reserved-instances, :arglists ([] [describe-reserved-instances-request]), :type :var, :members ()} {:name describe-reserved-instances-listings, :arglists ([] [describe-reserved-instances-listings-request]), :type :var, :members ()} {:name describe-reserved-instances-modifications, :arglists ([] [describe-reserved-instances-modifications-request]), :type :var, :members ()} {:name describe-reserved-instances-offerings, :arglists ([] [describe-reserved-instances-offerings-request]), :type :var, :members ()} {:name describe-route-tables, :arglists ([] [describe-route-tables-request]), :type :var, :members ()} {:name describe-scheduled-instance-availability, :arglists ([describe-scheduled-instance-availability-request]), :type :var, :members ()} {:name describe-scheduled-instances, :arglists ([describe-scheduled-instances-request]), :type :var, :members ()} {:name describe-security-group-references, :arglists ([describe-security-group-references-request]), :type :var, :members ()} {:name describe-security-groups, :arglists ([] [describe-security-groups-request]), :type :var, :members ()} {:name describe-snapshot-attribute, :arglists ([describe-snapshot-attribute-request]), :type :var, :members ()} {:name describe-snapshots, :arglists ([] [describe-snapshots-request]), :type :var, :members ()} {:name describe-spot-datafeed-subscription, :arglists ([] [describe-spot-datafeed-subscription-request]), :type :var, :members ()} {:name describe-spot-fleet-instances, :arglists ([describe-spot-fleet-instances-request]), :type :var, :members ()} {:name describe-spot-fleet-request-history, :arglists ([describe-spot-fleet-request-history-request]), :type :var, :members ()} {:name describe-spot-fleet-requests, :arglists ([] [describe-spot-fleet-requests-request]), :type :var, :members ()} {:name describe-spot-instance-requests, :arglists ([] [describe-spot-instance-requests-request]), :type :var, :members ()} {:name describe-spot-price-history, :arglists ([] [describe-spot-price-history-request]), :type :var, :members ()} {:name describe-stale-security-groups, :arglists ([describe-stale-security-groups-request]), :type :var, :members ()} {:name describe-subnets, :arglists ([] [describe-subnets-request]), :type :var, :members ()} {:name describe-tags, :arglists ([] [describe-tags-request]), :type :var, :members ()} {:name describe-traffic-mirror-filters, :arglists ([describe-traffic-mirror-filters-request]), :type :var, :members ()} {:name describe-traffic-mirror-sessions, :arglists ([describe-traffic-mirror-sessions-request]), :type :var, :members ()} {:name describe-traffic-mirror-targets, :arglists ([describe-traffic-mirror-targets-request]), :type :var, :members ()} {:name describe-transit-gateway-attachments, :arglists ([describe-transit-gateway-attachments-request]), :type :var, :members ()} {:name describe-transit-gateway-route-tables, :arglists ([describe-transit-gateway-route-tables-request]), :type :var, :members ()} {:name describe-transit-gateway-vpc-attachments, :arglists ([describe-transit-gateway-vpc-attachments-request]), :type :var, :members ()} {:name describe-transit-gateways, :arglists ([describe-transit-gateways-request]), :type :var, :members ()} {:name describe-volume-attribute, :arglists ([describe-volume-attribute-request]), :type :var, :members ()} {:name describe-volume-status, :arglists ([] [describe-volume-status-request]), :type :var, :members ()} {:name describe-volumes, :arglists ([] [describe-volumes-request]), :type :var, :members ()} {:name describe-volumes-modifications, :arglists ([describe-volumes-modifications-request]), :type :var, :members ()} {:name describe-vpc-attribute, :arglists ([describe-vpc-attribute-request]), :type :var, :members ()} {:name describe-vpc-classic-link, :arglists ([] [describe-vpc-classic-link-request]), :type :var, :members ()} {:name describe-vpc-classic-link-dns-support, :arglists ([describe-vpc-classic-link-dns-support-request]), :type :var, :members ()} {:name describe-vpc-endpoint-connection-notifications, :arglists ([describe-vpc-endpoint-connection-notifications-request]), :type :var, :members ()} {:name describe-vpc-endpoint-connections, :arglists ([describe-vpc-endpoint-connections-request]), :type :var, :members ()} {:name describe-vpc-endpoint-service-configurations, :arglists ([describe-vpc-endpoint-service-configurations-request]), :type :var, :members ()} {:name describe-vpc-endpoint-service-permissions, :arglists ([describe-vpc-endpoint-service-permissions-request]), :type :var, :members ()} {:name describe-vpc-endpoint-services, :arglists ([] [describe-vpc-endpoint-services-request]), :type :var, :members ()} {:name describe-vpc-endpoints, :arglists ([] [describe-vpc-endpoints-request]), :type :var, :members ()} {:name describe-vpc-peering-connections, :arglists ([] [describe-vpc-peering-connections-request]), :type :var, :members ()} {:name describe-vpcs, :arglists ([] [describe-vpcs-request]), :type :var, :members ()} {:name describe-vpn-connections, :arglists ([] [describe-vpn-connections-request]), :type :var, :members ()} {:name describe-vpn-gateways, :arglists ([] [describe-vpn-gateways-request]), :type :var, :members ()} {:name detach-classic-link-vpc, :arglists ([detach-classic-link-vpc-request]), :type :var, :members ()} {:name detach-internet-gateway, :arglists ([detach-internet-gateway-request]), :type :var, :members ()} {:name detach-network-interface, :arglists ([detach-network-interface-request]), :type :var, :members ()} {:name detach-volume, :arglists ([detach-volume-request]), :type :var, :members ()} {:name detach-vpn-gateway, :arglists ([detach-vpn-gateway-request]), :type :var, :members ()} {:name disable-ebs-encryption-by-default, :arglists ([disable-ebs-encryption-by-default-request]), :type :var, :members ()} {:name disable-transit-gateway-route-table-propagation, :arglists ([disable-transit-gateway-route-table-propagation-request]), :type :var, :members ()} {:name disable-vgw-route-propagation, :arglists ([disable-vgw-route-propagation-request]), :type :var, :members ()} {:name disable-vpc-classic-link, :arglists ([disable-vpc-classic-link-request]), :type :var, :members ()} {:name disable-vpc-classic-link-dns-support, :arglists ([disable-vpc-classic-link-dns-support-request]), :type :var, :members ()} {:name disassociate-address, :arglists ([disassociate-address-request]), :type :var, :members ()} {:name disassociate-client-vpn-target-network, :arglists ([disassociate-client-vpn-target-network-request]), :type :var, :members ()} {:name disassociate-iam-instance-profile, :arglists ([disassociate-iam-instance-profile-request]), :type :var, :members ()} {:name disassociate-route-table, :arglists ([disassociate-route-table-request]), :type :var, :members ()} {:name disassociate-subnet-cidr-block, :arglists ([disassociate-subnet-cidr-block-request]), :type :var, :members ()} {:name disassociate-transit-gateway-route-table, :arglists ([disassociate-transit-gateway-route-table-request]), :type :var, :members ()} {:name disassociate-vpc-cidr-block, :arglists ([disassociate-vpc-cidr-block-request]), :type :var, :members ()} {:name dry-run, :arglists ([dry-run-supported-request]), :type :var, :members ()} {:name enable-ebs-encryption-by-default, :arglists ([enable-ebs-encryption-by-default-request]), :type :var, :members ()} {:name enable-transit-gateway-route-table-propagation, :arglists ([enable-transit-gateway-route-table-propagation-request]), :type :var, :members ()} {:name enable-vgw-route-propagation, :arglists ([enable-vgw-route-propagation-request]), :type :var, :members ()} {:name enable-volume-io, :arglists ([enable-volume-iorequest]), :type :var, :members ()} {:name enable-vpc-classic-link, :arglists ([enable-vpc-classic-link-request]), :type :var, :members ()} {:name enable-vpc-classic-link-dns-support, :arglists ([enable-vpc-classic-link-dns-support-request]), :type :var, :members ()} {:name export-client-vpn-client-certificate-revocation-list, :arglists ([export-client-vpn-client-certificate-revocation-list-request]), :type :var, :members ()} {:name export-client-vpn-client-configuration, :arglists ([export-client-vpn-client-configuration-request]), :type :var, :members ()} {:name export-transit-gateway-routes, :arglists ([export-transit-gateway-routes-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-capacity-reservation-usage, :arglists ([get-capacity-reservation-usage-request]), :type :var, :members ()} {:name get-console-output, :arglists ([get-console-output-request]), :type :var, :members ()} {:name get-console-screenshot, :arglists ([get-console-screenshot-request]), :type :var, :members ()} {:name get-ebs-default-kms-key-id, :arglists ([get-ebs-default-kms-key-id-request]), :type :var, :members ()} {:name get-ebs-encryption-by-default, :arglists ([get-ebs-encryption-by-default-request]), :type :var, :members ()} {:name get-host-reservation-purchase-preview, :arglists ([get-host-reservation-purchase-preview-request]), :type :var, :members ()} {:name get-launch-template-data, :arglists ([get-launch-template-data-request]), :type :var, :members ()} {:name get-password-data, :arglists ([get-password-data-request]), :type :var, :members ()} {:name get-reserved-instances-exchange-quote, :arglists ([get-reserved-instances-exchange-quote-request]), :type :var, :members ()} {:name get-transit-gateway-attachment-propagations, :arglists ([get-transit-gateway-attachment-propagations-request]), :type :var, :members ()} {:name get-transit-gateway-route-table-associations, :arglists ([get-transit-gateway-route-table-associations-request]), :type :var, :members ()} {:name get-transit-gateway-route-table-propagations, :arglists ([get-transit-gateway-route-table-propagations-request]), :type :var, :members ()} {:name import-client-vpn-client-certificate-revocation-list, :arglists ([import-client-vpn-client-certificate-revocation-list-request]), :type :var, :members ()} {:name import-image, :arglists ([] [import-image-request]), :type :var, :members ()} {:name import-instance, :arglists ([import-instance-request]), :type :var, :members ()} {:name import-key-pair, :arglists ([import-key-pair-request]), :type :var, :members ()} {:name import-snapshot, :arglists ([] [import-snapshot-request]), :type :var, :members ()} {:name import-volume, :arglists ([import-volume-request]), :type :var, :members ()} {:name modify-capacity-reservation, :arglists ([modify-capacity-reservation-request]), :type :var, :members ()} {:name modify-client-vpn-endpoint, :arglists ([modify-client-vpn-endpoint-request]), :type :var, :members ()} {:name modify-ebs-default-kms-key-id, :arglists ([modify-ebs-default-kms-key-id-request]), :type :var, :members ()} {:name modify-fleet, :arglists ([modify-fleet-request]), :type :var, :members ()} {:name modify-fpga-image-attribute, :arglists ([modify-fpga-image-attribute-request]), :type :var, :members ()} {:name modify-hosts, :arglists ([modify-hosts-request]), :type :var, :members ()} {:name modify-id-format, :arglists ([modify-id-format-request]), :type :var, :members ()} {:name modify-identity-id-format, :arglists ([modify-identity-id-format-request]), :type :var, :members ()} {:name modify-image-attribute, :arglists ([modify-image-attribute-request]), :type :var, :members ()} {:name modify-instance-attribute, :arglists ([modify-instance-attribute-request]), :type :var, :members ()} {:name modify-instance-capacity-reservation-attributes, :arglists ([modify-instance-capacity-reservation-attributes-request]), :type :var, :members ()} {:name modify-instance-credit-specification, :arglists ([modify-instance-credit-specification-request]), :type :var, :members ()} {:name modify-instance-event-start-time, :arglists ([modify-instance-event-start-time-request]), :type :var, :members ()} {:name modify-instance-placement, :arglists ([modify-instance-placement-request]), :type :var, :members ()} {:name modify-launch-template, :arglists ([modify-launch-template-request]), :type :var, :members ()} {:name modify-network-interface-attribute, :arglists ([modify-network-interface-attribute-request]), :type :var, :members ()} {:name modify-reserved-instances, :arglists ([modify-reserved-instances-request]), :type :var, :members ()} {:name modify-snapshot-attribute, :arglists ([modify-snapshot-attribute-request]), :type :var, :members ()} {:name modify-spot-fleet-request, :arglists ([modify-spot-fleet-request-request]), :type :var, :members ()} {:name modify-subnet-attribute, :arglists ([modify-subnet-attribute-request]), :type :var, :members ()} {:name modify-traffic-mirror-filter-network-services, :arglists ([modify-traffic-mirror-filter-network-services-request]), :type :var, :members ()} {:name modify-traffic-mirror-filter-rule, :arglists ([modify-traffic-mirror-filter-rule-request]), :type :var, :members ()} {:name modify-traffic-mirror-session, :arglists ([modify-traffic-mirror-session-request]), :type :var, :members ()} {:name modify-transit-gateway-vpc-attachment, :arglists ([modify-transit-gateway-vpc-attachment-request]), :type :var, :members ()} {:name modify-volume, :arglists ([modify-volume-request]), :type :var, :members ()} {:name modify-volume-attribute, :arglists ([modify-volume-attribute-request]), :type :var, :members ()} {:name modify-vpc-attribute, :arglists ([modify-vpc-attribute-request]), :type :var, :members ()} {:name modify-vpc-endpoint, :arglists ([modify-vpc-endpoint-request]), :type :var, :members ()} {:name modify-vpc-endpoint-connection-notification, :arglists ([modify-vpc-endpoint-connection-notification-request]), :type :var, :members ()} {:name modify-vpc-endpoint-service-configuration, :arglists ([modify-vpc-endpoint-service-configuration-request]), :type :var, :members ()} {:name modify-vpc-endpoint-service-permissions, :arglists ([modify-vpc-endpoint-service-permissions-request]), :type :var, :members ()} {:name modify-vpc-peering-connection-options, :arglists ([modify-vpc-peering-connection-options-request]), :type :var, :members ()} {:name modify-vpc-tenancy, :arglists ([modify-vpc-tenancy-request]), :type :var, :members ()} {:name modify-vpn-connection, :arglists ([modify-vpn-connection-request]), :type :var, :members ()} {:name monitor-instances, :arglists ([monitor-instances-request]), :type :var, :members ()} {:name move-address-to-vpc, :arglists ([move-address-to-vpc-request]), :type :var, :members ()} {:name provision-byoip-cidr, :arglists ([provision-byoip-cidr-request]), :type :var, :members ()} {:name purchase-host-reservation, :arglists ([purchase-host-reservation-request]), :type :var, :members ()} {:name purchase-reserved-instances-offering, :arglists ([purchase-reserved-instances-offering-request]), :type :var, :members ()} {:name purchase-scheduled-instances, :arglists ([purchase-scheduled-instances-request]), :type :var, :members ()} {:name reboot-instances, :arglists ([reboot-instances-request]), :type :var, :members ()} {:name register-image, :arglists ([register-image-request]), :type :var, :members ()} {:name reject-transit-gateway-vpc-attachment, :arglists ([reject-transit-gateway-vpc-attachment-request]), :type :var, :members ()} {:name reject-vpc-endpoint-connections, :arglists ([reject-vpc-endpoint-connections-request]), :type :var, :members ()} {:name reject-vpc-peering-connection, :arglists ([reject-vpc-peering-connection-request]), :type :var, :members ()} {:name release-address, :arglists ([release-address-request]), :type :var, :members ()} {:name release-hosts, :arglists ([release-hosts-request]), :type :var, :members ()} {:name replace-iam-instance-profile-association, :arglists ([replace-iam-instance-profile-association-request]), :type :var, :members ()} {:name replace-network-acl-association, :arglists ([replace-network-acl-association-request]), :type :var, :members ()} {:name replace-network-acl-entry, :arglists ([replace-network-acl-entry-request]), :type :var, :members ()} {:name replace-route, :arglists ([replace-route-request]), :type :var, :members ()} {:name replace-route-table-association, :arglists ([replace-route-table-association-request]), :type :var, :members ()} {:name replace-transit-gateway-route, :arglists ([replace-transit-gateway-route-request]), :type :var, :members ()} {:name report-instance-status, :arglists ([report-instance-status-request]), :type :var, :members ()} {:name request-spot-fleet, :arglists ([request-spot-fleet-request]), :type :var, :members ()} {:name request-spot-instances, :arglists ([request-spot-instances-request]), :type :var, :members ()} {:name reset-ebs-default-kms-key-id, :arglists ([reset-ebs-default-kms-key-id-request]), :type :var, :members ()} {:name reset-fpga-image-attribute, :arglists ([reset-fpga-image-attribute-request]), :type :var, :members ()} {:name reset-image-attribute, :arglists ([reset-image-attribute-request]), :type :var, :members ()} {:name reset-instance-attribute, :arglists ([reset-instance-attribute-request]), :type :var, :members ()} {:name reset-network-interface-attribute, :arglists ([reset-network-interface-attribute-request]), :type :var, :members ()} {:name reset-snapshot-attribute, :arglists ([reset-snapshot-attribute-request]), :type :var, :members ()} {:name restore-address-to-classic, :arglists ([restore-address-to-classic-request]), :type :var, :members ()} {:name revoke-client-vpn-ingress, :arglists ([revoke-client-vpn-ingress-request]), :type :var, :members ()} {:name revoke-security-group-egress, :arglists ([revoke-security-group-egress-request]), :type :var, :members ()} {:name revoke-security-group-ingress, :arglists ([] [revoke-security-group-ingress-request]), :type :var, :members ()} {:name run-instances, :arglists ([run-instances-request]), :type :var, :members ()} {:name run-scheduled-instances, :arglists ([run-scheduled-instances-request]), :type :var, :members ()} {:name search-transit-gateway-routes, :arglists ([search-transit-gateway-routes-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name shutdown, :arglists ([]), :type :var, :members ()} {:name start-instances, :arglists ([start-instances-request]), :type :var, :members ()} {:name stop-instances, :arglists ([stop-instances-request]), :type :var, :members ()} {:name terminate-client-vpn-connections, :arglists ([terminate-client-vpn-connections-request]), :type :var, :members ()} {:name terminate-instances, :arglists ([terminate-instances-request]), :type :var, :members ()} {:name unassign-ipv6-addresses, :arglists ([unassign-ipv6-addresses-request]), :type :var, :members ()} {:name unassign-ipv6addresses, :arglists ([unassign-ipv6-addresses-request]), :type :var, :members ()} {:name unassign-private-ip-addresses, :arglists ([unassign-private-ip-addresses-request]), :type :var, :members ()} {:name unmonitor-instances, :arglists ([unmonitor-instances-request]), :type :var, :members ()} {:name update-security-group-rule-descriptions-egress, :arglists ([update-security-group-rule-descriptions-egress-request]), :type :var, :members ()} {:name update-security-group-rule-descriptions-ingress, :arglists ([update-security-group-rule-descriptions-ingress-request]), :type :var, :members ()} {:name waiters, :arglists ([]), :type :var, :members ()} {:name withdraw-byoip-cidr, :arglists ([withdraw-byoip-cidr-request]), :type :var, :members ()})} {:name amazonica.aws.dax, :publics ({:name client-class, :type :var, :members ()} {:name create-cluster, :arglists ([create-cluster-request]), :type :var, :members ()} {:name create-parameter-group, :arglists ([create-parameter-group-request]), :type :var, :members ()} {:name create-subnet-group, :arglists ([create-subnet-group-request]), :type :var, :members ()} {:name decrease-replication-factor, :arglists ([decrease-replication-factor-request]), :type :var, :members ()} {:name delete-cluster, :arglists ([delete-cluster-request]), :type :var, :members ()} {:name delete-parameter-group, :arglists ([delete-parameter-group-request]), :type :var, :members ()} {:name delete-subnet-group, :arglists ([delete-subnet-group-request]), :type :var, :members ()} {:name describe-clusters, :arglists ([describe-clusters-request]), :type :var, :members ()} {:name describe-default-parameters, :arglists ([describe-default-parameters-request]), :type :var, :members ()} {:name describe-events, :arglists ([describe-events-request]), :type :var, :members ()} {:name describe-parameter-groups, :arglists ([describe-parameter-groups-request]), :type :var, :members ()} {:name describe-parameters, :arglists ([describe-parameters-request]), :type :var, :members ()} {:name describe-subnet-groups, :arglists ([describe-subnet-groups-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name increase-replication-factor, :arglists ([increase-replication-factor-request]), :type :var, :members ()} {:name list-tags, :arglists ([list-tags-request]), :type :var, :members ()} {:name reboot-node, :arglists ([reboot-node-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-cluster, :arglists ([update-cluster-request]), :type :var, :members ()} {:name update-parameter-group, :arglists ([update-parameter-group-request]), :type :var, :members ()} {:name update-subnet-group, :arglists ([update-subnet-group-request]), :type :var, :members ()})} {:name amazonica.aws.servicecatalog, :publics ({:name accept-portfolio-share, :arglists ([accept-portfolio-share-request]), :type :var, :members ()} {:name associate-budget-with-resource, :arglists ([associate-budget-with-resource-request]), :type :var, :members ()} {:name associate-principal-with-portfolio, :arglists ([associate-principal-with-portfolio-request]), :type :var, :members ()} {:name associate-product-with-portfolio, :arglists ([associate-product-with-portfolio-request]), :type :var, :members ()} {:name associate-service-action-with-provisioning-artifact, :arglists ([associate-service-action-with-provisioning-artifact-request]), :type :var, :members ()} {:name associate-tag-option-with-resource, :arglists ([associate-tag-option-with-resource-request]), :type :var, :members ()} {:name batch-associate-service-action-with-provisioning-artifact, :arglists ([batch-associate-service-action-with-provisioning-artifact-request]), :type :var, :members ()} {:name batch-disassociate-service-action-from-provisioning-artifact, :arglists ([batch-disassociate-service-action-from-provisioning-artifact-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name copy-product, :arglists ([copy-product-request]), :type :var, :members ()} {:name create-constraint, :arglists ([create-constraint-request]), :type :var, :members ()} {:name create-portfolio, :arglists ([create-portfolio-request]), :type :var, :members ()} {:name create-portfolio-share, :arglists ([create-portfolio-share-request]), :type :var, :members ()} {:name create-product, :arglists ([create-product-request]), :type :var, :members ()} {:name create-provisioned-product-plan, :arglists ([create-provisioned-product-plan-request]), :type :var, :members ()} {:name create-provisioning-artifact, :arglists ([create-provisioning-artifact-request]), :type :var, :members ()} {:name create-service-action, :arglists ([create-service-action-request]), :type :var, :members ()} {:name create-tag-option, :arglists ([create-tag-option-request]), :type :var, :members ()} {:name delete-constraint, :arglists ([delete-constraint-request]), :type :var, :members ()} {:name delete-portfolio, :arglists ([delete-portfolio-request]), :type :var, :members ()} {:name delete-portfolio-share, :arglists ([delete-portfolio-share-request]), :type :var, :members ()} {:name delete-product, :arglists ([delete-product-request]), :type :var, :members ()} {:name delete-provisioned-product-plan, :arglists ([delete-provisioned-product-plan-request]), :type :var, :members ()} {:name delete-provisioning-artifact, :arglists ([delete-provisioning-artifact-request]), :type :var, :members ()} {:name delete-service-action, :arglists ([delete-service-action-request]), :type :var, :members ()} {:name delete-tag-option, :arglists ([delete-tag-option-request]), :type :var, :members ()} {:name describe-constraint, :arglists ([describe-constraint-request]), :type :var, :members ()} {:name describe-copy-product-status, :arglists ([describe-copy-product-status-request]), :type :var, :members ()} {:name describe-portfolio, :arglists ([describe-portfolio-request]), :type :var, :members ()} {:name describe-portfolio-share-status, :arglists ([describe-portfolio-share-status-request]), :type :var, :members ()} {:name describe-product, :arglists ([describe-product-request]), :type :var, :members ()} {:name describe-product-as-admin, :arglists ([describe-product-as-admin-request]), :type :var, :members ()} {:name describe-product-view, :arglists ([describe-product-view-request]), :type :var, :members ()} {:name describe-provisioned-product, :arglists ([describe-provisioned-product-request]), :type :var, :members ()} {:name describe-provisioned-product-plan, :arglists ([describe-provisioned-product-plan-request]), :type :var, :members ()} {:name describe-provisioning-artifact, :arglists ([describe-provisioning-artifact-request]), :type :var, :members ()} {:name describe-provisioning-parameters, :arglists ([describe-provisioning-parameters-request]), :type :var, :members ()} {:name describe-record, :arglists ([describe-record-request]), :type :var, :members ()} {:name describe-service-action, :arglists ([describe-service-action-request]), :type :var, :members ()} {:name describe-service-action-execution-parameters, :arglists ([describe-service-action-execution-parameters-request]), :type :var, :members ()} {:name describe-tag-option, :arglists ([describe-tag-option-request]), :type :var, :members ()} {:name disable-aws-organizations-access, :arglists ([disable-awsorganizations-access-request]), :type :var, :members ()} {:name disable-awsorganizations-access, :arglists ([disable-awsorganizations-access-request]), :type :var, :members ()} {:name disassociate-budget-from-resource, :arglists ([disassociate-budget-from-resource-request]), :type :var, :members ()} {:name disassociate-principal-from-portfolio, :arglists ([disassociate-principal-from-portfolio-request]), :type :var, :members ()} {:name disassociate-product-from-portfolio, :arglists ([disassociate-product-from-portfolio-request]), :type :var, :members ()} {:name disassociate-service-action-from-provisioning-artifact, :arglists ([disassociate-service-action-from-provisioning-artifact-request]), :type :var, :members ()} {:name disassociate-tag-option-from-resource, :arglists ([disassociate-tag-option-from-resource-request]), :type :var, :members ()} {:name enable-aws-organizations-access, :arglists ([enable-awsorganizations-access-request]), :type :var, :members ()} {:name enable-awsorganizations-access, :arglists ([enable-awsorganizations-access-request]), :type :var, :members ()} {:name execute-provisioned-product-plan, :arglists ([execute-provisioned-product-plan-request]), :type :var, :members ()} {:name execute-provisioned-product-service-action, :arglists ([execute-provisioned-product-service-action-request]), :type :var, :members ()} {:name get-aws-organizations-access-status, :arglists ([get-awsorganizations-access-status-request]), :type :var, :members ()} {:name get-awsorganizations-access-status, :arglists ([get-awsorganizations-access-status-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name list-accepted-portfolio-shares, :arglists ([list-accepted-portfolio-shares-request]), :type :var, :members ()} {:name list-budgets-for-resource, :arglists ([list-budgets-for-resource-request]), :type :var, :members ()} {:name list-constraints-for-portfolio, :arglists ([list-constraints-for-portfolio-request]), :type :var, :members ()} {:name list-launch-paths, :arglists ([list-launch-paths-request]), :type :var, :members ()} {:name list-organization-portfolio-access, :arglists ([list-organization-portfolio-access-request]), :type :var, :members ()} {:name list-portfolio-access, :arglists ([list-portfolio-access-request]), :type :var, :members ()} {:name list-portfolios, :arglists ([list-portfolios-request]), :type :var, :members ()} {:name list-portfolios-for-product, :arglists ([list-portfolios-for-product-request]), :type :var, :members ()} {:name list-principals-for-portfolio, :arglists ([list-principals-for-portfolio-request]), :type :var, :members ()} {:name list-provisioned-product-plans, :arglists ([list-provisioned-product-plans-request]), :type :var, :members ()} {:name list-provisioning-artifacts, :arglists ([list-provisioning-artifacts-request]), :type :var, :members ()} {:name list-provisioning-artifacts-for-service-action, :arglists ([list-provisioning-artifacts-for-service-action-request]), :type :var, :members ()} {:name list-record-history, :arglists ([list-record-history-request]), :type :var, :members ()} {:name list-resources-for-tag-option, :arglists ([list-resources-for-tag-option-request]), :type :var, :members ()} {:name list-service-actions, :arglists ([list-service-actions-request]), :type :var, :members ()} {:name list-service-actions-for-provisioning-artifact, :arglists ([list-service-actions-for-provisioning-artifact-request]), :type :var, :members ()} {:name list-stack-instances-for-provisioned-product, :arglists ([list-stack-instances-for-provisioned-product-request]), :type :var, :members ()} {:name list-tag-options, :arglists ([list-tag-options-request]), :type :var, :members ()} {:name provision-product, :arglists ([provision-product-request]), :type :var, :members ()} {:name reject-portfolio-share, :arglists ([reject-portfolio-share-request]), :type :var, :members ()} {:name scan-provisioned-products, :arglists ([scan-provisioned-products-request]), :type :var, :members ()} {:name search-products, :arglists ([search-products-request]), :type :var, :members ()} {:name search-products-as-admin, :arglists ([search-products-as-admin-request]), :type :var, :members ()} {:name search-provisioned-products, :arglists ([search-provisioned-products-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name terminate-provisioned-product, :arglists ([terminate-provisioned-product-request]), :type :var, :members ()} {:name update-constraint, :arglists ([update-constraint-request]), :type :var, :members ()} {:name update-portfolio, :arglists ([update-portfolio-request]), :type :var, :members ()} {:name update-product, :arglists ([update-product-request]), :type :var, :members ()} {:name update-provisioned-product, :arglists ([update-provisioned-product-request]), :type :var, :members ()} {:name update-provisioned-product-properties, :arglists ([update-provisioned-product-properties-request]), :type :var, :members ()} {:name update-provisioning-artifact, :arglists ([update-provisioning-artifact-request]), :type :var, :members ()} {:name update-service-action, :arglists ([update-service-action-request]), :type :var, :members ()} {:name update-tag-option, :arglists ([update-tag-option-request]), :type :var, :members ()})} {:name amazonica.aws.medialive, :publics ({:name batch-update-schedule, :arglists ([batch-update-schedule-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-channel, :arglists ([create-channel-request]), :type :var, :members ()} {:name create-input, :arglists ([create-input-request]), :type :var, :members ()} {:name create-input-security-group, :arglists ([create-input-security-group-request]), :type :var, :members ()} {:name create-tags, :arglists ([create-tags-request]), :type :var, :members ()} {:name delete-channel, :arglists ([delete-channel-request]), :type :var, :members ()} {:name delete-input, :arglists ([delete-input-request]), :type :var, :members ()} {:name delete-input-security-group, :arglists ([delete-input-security-group-request]), :type :var, :members ()} {:name delete-reservation, :arglists ([delete-reservation-request]), :type :var, :members ()} {:name delete-schedule, :arglists ([delete-schedule-request]), :type :var, :members ()} {:name delete-tags, :arglists ([delete-tags-request]), :type :var, :members ()} {:name describe-channel, :arglists ([describe-channel-request]), :type :var, :members ()} {:name describe-input, :arglists ([describe-input-request]), :type :var, :members ()} {:name describe-input-security-group, :arglists ([describe-input-security-group-request]), :type :var, :members ()} {:name describe-offering, :arglists ([describe-offering-request]), :type :var, :members ()} {:name describe-reservation, :arglists ([describe-reservation-request]), :type :var, :members ()} {:name describe-schedule, :arglists ([describe-schedule-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name list-channels, :arglists ([list-channels-request]), :type :var, :members ()} {:name list-input-security-groups, :arglists ([list-input-security-groups-request]), :type :var, :members ()} {:name list-inputs, :arglists ([list-inputs-request]), :type :var, :members ()} {:name list-offerings, :arglists ([list-offerings-request]), :type :var, :members ()} {:name list-reservations, :arglists ([list-reservations-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name purchase-offering, :arglists ([purchase-offering-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name shutdown, :arglists ([]), :type :var, :members ()} {:name start-channel, :arglists ([start-channel-request]), :type :var, :members ()} {:name stop-channel, :arglists ([stop-channel-request]), :type :var, :members ()} {:name update-channel, :arglists ([update-channel-request]), :type :var, :members ()} {:name update-channel-class, :arglists ([update-channel-class-request]), :type :var, :members ()} {:name update-input, :arglists ([update-input-request]), :type :var, :members ()} {:name update-input-security-group, :arglists ([update-input-security-group-request]), :type :var, :members ()} {:name update-reservation, :arglists ([update-reservation-request]), :type :var, :members ()} {:name waiters, :arglists ([]), :type :var, :members ()})} {:name amazonica.aws.cognitosync, :publics ({:name bulk-publish, :arglists ([bulk-publish-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name delete-dataset, :arglists ([delete-dataset-request]), :type :var, :members ()} {:name describe-dataset, :arglists ([describe-dataset-request]), :type :var, :members ()} {:name describe-identity-pool-usage, :arglists ([describe-identity-pool-usage-request]), :type :var, :members ()} {:name describe-identity-usage, :arglists ([describe-identity-usage-request]), :type :var, :members ()} {:name get-bulk-publish-details, :arglists ([get-bulk-publish-details-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-cognito-events, :arglists ([get-cognito-events-request]), :type :var, :members ()} {:name get-identity-pool-configuration, :arglists ([get-identity-pool-configuration-request]), :type :var, :members ()} {:name list-datasets, :arglists ([list-datasets-request]), :type :var, :members ()} {:name list-identity-pool-usage, :arglists ([list-identity-pool-usage-request]), :type :var, :members ()} {:name list-records, :arglists ([list-records-request]), :type :var, :members ()} {:name register-device, :arglists ([register-device-request]), :type :var, :members ()} {:name set-cognito-events, :arglists ([set-cognito-events-request]), :type :var, :members ()} {:name set-identity-pool-configuration, :arglists ([set-identity-pool-configuration-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name subscribe-to-dataset, :arglists ([subscribe-to-dataset-request]), :type :var, :members ()} {:name unsubscribe-from-dataset, :arglists ([unsubscribe-from-dataset-request]), :type :var, :members ()} {:name update-records, :arglists ([update-records-request]), :type :var, :members ()})} {:name amazonica.aws.resourcegroupstaggingapi, :publics ({:name client-class, :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-resources, :arglists ([get-resources-request]), :type :var, :members ()} {:name get-tag-keys, :arglists ([get-tag-keys-request]), :type :var, :members ()} {:name get-tag-values, :arglists ([get-tag-values-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name tag-resources, :arglists ([tag-resources-request]), :type :var, :members ()} {:name untag-resources, :arglists ([untag-resources-request]), :type :var, :members ()})} {:name amazonica.aws.directory, :publics ({:name accept-shared-directory, :arglists ([accept-shared-directory-request]), :type :var, :members ()} {:name add-ip-routes, :arglists ([add-ip-routes-request]), :type :var, :members ()} {:name add-tags-to-resource, :arglists ([add-tags-to-resource-request]), :type :var, :members ()} {:name cancel-schema-extension, :arglists ([cancel-schema-extension-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name connect-directory, :arglists ([connect-directory-request]), :type :var, :members ()} {:name create-alias, :arglists ([create-alias-request]), :type :var, :members ()} {:name create-computer, :arglists ([create-computer-request]), :type :var, :members ()} {:name create-conditional-forwarder, :arglists ([create-conditional-forwarder-request]), :type :var, :members ()} {:name create-directory, :arglists ([create-directory-request]), :type :var, :members ()} {:name create-log-subscription, :arglists ([create-log-subscription-request]), :type :var, :members ()} {:name create-microsoft-ad, :arglists ([create-microsoft-adrequest]), :type :var, :members ()} {:name create-snapshot, :arglists ([create-snapshot-request]), :type :var, :members ()} {:name create-trust, :arglists ([create-trust-request]), :type :var, :members ()} {:name delete-conditional-forwarder, :arglists ([delete-conditional-forwarder-request]), :type :var, :members ()} {:name delete-directory, :arglists ([delete-directory-request]), :type :var, :members ()} {:name delete-log-subscription, :arglists ([delete-log-subscription-request]), :type :var, :members ()} {:name delete-snapshot, :arglists ([delete-snapshot-request]), :type :var, :members ()} {:name delete-trust, :arglists ([delete-trust-request]), :type :var, :members ()} {:name deregister-event-topic, :arglists ([deregister-event-topic-request]), :type :var, :members ()} {:name describe-conditional-forwarders, :arglists ([describe-conditional-forwarders-request]), :type :var, :members ()} {:name describe-directories, :arglists ([] [describe-directories-request]), :type :var, :members ()} {:name describe-domain-controllers, :arglists ([describe-domain-controllers-request]), :type :var, :members ()} {:name describe-event-topics, :arglists ([describe-event-topics-request]), :type :var, :members ()} {:name describe-shared-directories, :arglists ([describe-shared-directories-request]), :type :var, :members ()} {:name describe-snapshots, :arglists ([] [describe-snapshots-request]), :type :var, :members ()} {:name describe-trusts, :arglists ([describe-trusts-request]), :type :var, :members ()} {:name disable-radius, :arglists ([disable-radius-request]), :type :var, :members ()} {:name disable-sso, :arglists ([disable-sso-request]), :type :var, :members ()} {:name enable-radius, :arglists ([enable-radius-request]), :type :var, :members ()} {:name enable-sso, :arglists ([enable-sso-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-directory-limits, :arglists ([] [get-directory-limits-request]), :type :var, :members ()} {:name get-snapshot-limits, :arglists ([get-snapshot-limits-request]), :type :var, :members ()} {:name list-ip-routes, :arglists ([list-ip-routes-request]), :type :var, :members ()} {:name list-log-subscriptions, :arglists ([list-log-subscriptions-request]), :type :var, :members ()} {:name list-schema-extensions, :arglists ([list-schema-extensions-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name register-event-topic, :arglists ([register-event-topic-request]), :type :var, :members ()} {:name reject-shared-directory, :arglists ([reject-shared-directory-request]), :type :var, :members ()} {:name remove-ip-routes, :arglists ([remove-ip-routes-request]), :type :var, :members ()} {:name remove-tags-from-resource, :arglists ([remove-tags-from-resource-request]), :type :var, :members ()} {:name reset-user-password, :arglists ([reset-user-password-request]), :type :var, :members ()} {:name restore-from-snapshot, :arglists ([restore-from-snapshot-request]), :type :var, :members ()} {:name share-directory, :arglists ([share-directory-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name start-schema-extension, :arglists ([start-schema-extension-request]), :type :var, :members ()} {:name unshare-directory, :arglists ([unshare-directory-request]), :type :var, :members ()} {:name update-conditional-forwarder, :arglists ([update-conditional-forwarder-request]), :type :var, :members ()} {:name update-number-of-domain-controllers, :arglists ([update-number-of-domain-controllers-request]), :type :var, :members ()} {:name update-radius, :arglists ([update-radius-request]), :type :var, :members ()} {:name update-trust, :arglists ([update-trust-request]), :type :var, :members ()} {:name verify-trust, :arglists ([verify-trust-request]), :type :var, :members ()})} {:name amazonica.aws.sqs, :publics ({:name add-permission, :arglists ([add-permission-request] [string-1 string-2 list-1 list-2]), :type :var, :members ()} {:name arn, :file "amazonica/aws/sqs.clj", :line 73, :arglists ([q]), :type :var, :members ()} {:name assign-dead-letter-queue, :file "amazonica/aws/sqs.clj", :line 75, :arglists ([queue dlq max-receive-count]), :type :var, :members ()} {:name change-message-visibility, :arglists ([change-message-visibility-request] [string-1 string-2 integer]), :type :var, :members ()} {:name change-message-visibility-batch, :arglists ([change-message-visibility-batch-request] [string list]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-queue, :arglists ([create-queue-request] [string]), :type :var, :members ()} {:name delete-message, :arglists ([delete-message-request] [string-1 string-2]), :type :var, :members ()} {:name delete-message-batch, :arglists ([delete-message-batch-request] [string list]), :type :var, :members ()} {:name delete-queue, :arglists ([delete-queue-request] [string]), :type :var, :members ()} {:name find-queue, :file "amazonica/aws/sqs.clj", :line 67, :arglists ([& s]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-queue-attributes, :arglists ([get-queue-attributes-request] [string list]), :type :var, :members ()} {:name get-queue-url, :arglists ([get-queue-url-request] [string]), :type :var, :members ()} {:name list-dead-letter-source-queues, :arglists ([list-dead-letter-source-queues-request]), :type :var, :members ()} {:name list-queue-tags, :arglists ([list-queue-tags-request] [string]), :type :var, :members ()} {:name list-queues, :arglists ([] [list-queues-request] [string]), :type :var, :members ()} {:name purge-queue, :arglists ([purge-queue-request]), :type :var, :members ()} {:name receive-message, :arglists ([receive-message-request] [string]), :type :var, :members ()} {:name remove-permission, :arglists ([remove-permission-request] [string-1 string-2]), :type :var, :members ()} {:name send-message, :arglists ([send-message-request] [string-1 string-2]), :type :var, :members ()} {:name send-message-batch, :arglists ([send-message-batch-request] [string list]), :type :var, :members ()} {:name set-queue-attributes, :arglists ([set-queue-attributes-request] [string map]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name tag-queue, :arglists ([tag-queue-request] [string map]), :type :var, :members ()} {:name untag-queue, :arglists ([untag-queue-request] [string list]), :type :var, :members ()})} {:name amazonica.aws.redshift, :publics ({:name accept-reserved-node-exchange, :arglists ([accept-reserved-node-exchange-request]), :type :var, :members ()} {:name authorize-cluster-security-group-ingress, :arglists ([authorize-cluster-security-group-ingress-request]), :type :var, :members ()} {:name authorize-snapshot-access, :arglists ([authorize-snapshot-access-request]), :type :var, :members ()} {:name batch-delete-cluster-snapshots, :arglists ([batch-delete-cluster-snapshots-request]), :type :var, :members ()} {:name batch-modify-cluster-snapshots, :arglists ([batch-modify-cluster-snapshots-request]), :type :var, :members ()} {:name cancel-resize, :arglists ([cancel-resize-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name copy-cluster-snapshot, :arglists ([copy-cluster-snapshot-request]), :type :var, :members ()} {:name create-cluster, :arglists ([create-cluster-request]), :type :var, :members ()} {:name create-cluster-parameter-group, :arglists ([create-cluster-parameter-group-request]), :type :var, :members ()} {:name create-cluster-security-group, :arglists ([create-cluster-security-group-request]), :type :var, :members ()} {:name create-cluster-snapshot, :arglists ([create-cluster-snapshot-request]), :type :var, :members ()} {:name create-cluster-subnet-group, :arglists ([create-cluster-subnet-group-request]), :type :var, :members ()} {:name create-event-subscription, :arglists ([create-event-subscription-request]), :type :var, :members ()} {:name create-hsm-client-certificate, :arglists ([create-hsm-client-certificate-request]), :type :var, :members ()} {:name create-hsm-configuration, :arglists ([create-hsm-configuration-request]), :type :var, :members ()} {:name create-snapshot-copy-grant, :arglists ([create-snapshot-copy-grant-request]), :type :var, :members ()} {:name create-snapshot-schedule, :arglists ([create-snapshot-schedule-request]), :type :var, :members ()} {:name create-tags, :arglists ([create-tags-request]), :type :var, :members ()} {:name delete-cluster, :arglists ([delete-cluster-request]), :type :var, :members ()} {:name delete-cluster-parameter-group, :arglists ([delete-cluster-parameter-group-request]), :type :var, :members ()} {:name delete-cluster-security-group, :arglists ([delete-cluster-security-group-request]), :type :var, :members ()} {:name delete-cluster-snapshot, :arglists ([delete-cluster-snapshot-request]), :type :var, :members ()} {:name delete-cluster-subnet-group, :arglists ([delete-cluster-subnet-group-request]), :type :var, :members ()} {:name delete-event-subscription, :arglists ([delete-event-subscription-request]), :type :var, :members ()} {:name delete-hsm-client-certificate, :arglists ([delete-hsm-client-certificate-request]), :type :var, :members ()} {:name delete-hsm-configuration, :arglists ([delete-hsm-configuration-request]), :type :var, :members ()} {:name delete-snapshot-copy-grant, :arglists ([delete-snapshot-copy-grant-request]), :type :var, :members ()} {:name delete-snapshot-schedule, :arglists ([delete-snapshot-schedule-request]), :type :var, :members ()} {:name delete-tags, :arglists ([delete-tags-request]), :type :var, :members ()} {:name describe-account-attributes, :arglists ([describe-account-attributes-request]), :type :var, :members ()} {:name describe-cluster-db-revisions, :arglists ([describe-cluster-db-revisions-request]), :type :var, :members ()} {:name describe-cluster-parameter-groups, :arglists ([] [describe-cluster-parameter-groups-request]), :type :var, :members ()} {:name describe-cluster-parameters, :arglists ([describe-cluster-parameters-request]), :type :var, :members ()} {:name describe-cluster-security-groups, :arglists ([] [describe-cluster-security-groups-request]), :type :var, :members ()} {:name describe-cluster-snapshots, :arglists ([] [describe-cluster-snapshots-request]), :type :var, :members ()} {:name describe-cluster-subnet-groups, :arglists ([] [describe-cluster-subnet-groups-request]), :type :var, :members ()} {:name describe-cluster-tracks, :arglists ([describe-cluster-tracks-request]), :type :var, :members ()} {:name describe-cluster-versions, :arglists ([] [describe-cluster-versions-request]), :type :var, :members ()} {:name describe-clusters, :arglists ([] [describe-clusters-request]), :type :var, :members ()} {:name describe-default-cluster-parameters, :arglists ([describe-default-cluster-parameters-request]), :type :var, :members ()} {:name describe-event-categories, :arglists ([] [describe-event-categories-request]), :type :var, :members ()} {:name describe-event-subscriptions, :arglists ([] [describe-event-subscriptions-request]), :type :var, :members ()} {:name describe-events, :arglists ([] [describe-events-request]), :type :var, :members ()} {:name describe-hsm-client-certificates, :arglists ([] [describe-hsm-client-certificates-request]), :type :var, :members ()} {:name describe-hsm-configurations, :arglists ([] [describe-hsm-configurations-request]), :type :var, :members ()} {:name describe-logging-status, :arglists ([describe-logging-status-request]), :type :var, :members ()} {:name describe-orderable-cluster-options, :arglists ([] [describe-orderable-cluster-options-request]), :type :var, :members ()} {:name describe-reserved-node-offerings, :arglists ([] [describe-reserved-node-offerings-request]), :type :var, :members ()} {:name describe-reserved-nodes, :arglists ([] [describe-reserved-nodes-request]), :type :var, :members ()} {:name describe-resize, :arglists ([describe-resize-request]), :type :var, :members ()} {:name describe-snapshot-copy-grants, :arglists ([] [describe-snapshot-copy-grants-request]), :type :var, :members ()} {:name describe-snapshot-schedules, :arglists ([describe-snapshot-schedules-request]), :type :var, :members ()} {:name describe-storage, :arglists ([describe-storage-request]), :type :var, :members ()} {:name describe-table-restore-status, :arglists ([] [describe-table-restore-status-request]), :type :var, :members ()} {:name describe-tags, :arglists ([] [describe-tags-request]), :type :var, :members ()} {:name disable-logging, :arglists ([disable-logging-request]), :type :var, :members ()} {:name disable-snapshot-copy, :arglists ([disable-snapshot-copy-request]), :type :var, :members ()} {:name enable-logging, :arglists ([enable-logging-request]), :type :var, :members ()} {:name enable-snapshot-copy, :arglists ([enable-snapshot-copy-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-cluster-credentials, :arglists ([get-cluster-credentials-request]), :type :var, :members ()} {:name get-reserved-node-exchange-offerings, :arglists ([get-reserved-node-exchange-offerings-request]), :type :var, :members ()} {:name modify-cluster, :arglists ([modify-cluster-request]), :type :var, :members ()} {:name modify-cluster-db-revision, :arglists ([modify-cluster-db-revision-request]), :type :var, :members ()} {:name modify-cluster-iam-roles, :arglists ([modify-cluster-iam-roles-request]), :type :var, :members ()} {:name modify-cluster-maintenance, :arglists ([modify-cluster-maintenance-request]), :type :var, :members ()} {:name modify-cluster-parameter-group, :arglists ([modify-cluster-parameter-group-request]), :type :var, :members ()} {:name modify-cluster-snapshot, :arglists ([modify-cluster-snapshot-request]), :type :var, :members ()} {:name modify-cluster-snapshot-schedule, :arglists ([modify-cluster-snapshot-schedule-request]), :type :var, :members ()} {:name modify-cluster-subnet-group, :arglists ([modify-cluster-subnet-group-request]), :type :var, :members ()} {:name modify-event-subscription, :arglists ([modify-event-subscription-request]), :type :var, :members ()} {:name modify-snapshot-copy-retention-period, :arglists ([modify-snapshot-copy-retention-period-request]), :type :var, :members ()} {:name modify-snapshot-schedule, :arglists ([modify-snapshot-schedule-request]), :type :var, :members ()} {:name purchase-reserved-node-offering, :arglists ([purchase-reserved-node-offering-request]), :type :var, :members ()} {:name reboot-cluster, :arglists ([reboot-cluster-request]), :type :var, :members ()} {:name reset-cluster-parameter-group, :arglists ([reset-cluster-parameter-group-request]), :type :var, :members ()} {:name resize-cluster, :arglists ([resize-cluster-request]), :type :var, :members ()} {:name restore-from-cluster-snapshot, :arglists ([restore-from-cluster-snapshot-request]), :type :var, :members ()} {:name restore-table-from-cluster-snapshot, :arglists ([restore-table-from-cluster-snapshot-request]), :type :var, :members ()} {:name revoke-cluster-security-group-ingress, :arglists ([revoke-cluster-security-group-ingress-request]), :type :var, :members ()} {:name revoke-snapshot-access, :arglists ([revoke-snapshot-access-request]), :type :var, :members ()} {:name rotate-encryption-key, :arglists ([rotate-encryption-key-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name shutdown, :arglists ([]), :type :var, :members ()} {:name waiters, :arglists ([]), :type :var, :members ()})} {:name amazonica.aws.codedeploy, :publics ({:name add-tags-to-on-premises-instances, :arglists ([add-tags-to-on-premises-instances-request]), :type :var, :members ()} {:name batch-get-application-revisions, :arglists ([batch-get-application-revisions-request]), :type :var, :members ()} {:name batch-get-applications, :arglists ([] [batch-get-applications-request]), :type :var, :members ()} {:name batch-get-deployment-groups, :arglists ([batch-get-deployment-groups-request]), :type :var, :members ()} {:name batch-get-deployment-instances, :arglists ([batch-get-deployment-instances-request]), :type :var, :members ()} {:name batch-get-deployment-targets, :arglists ([batch-get-deployment-targets-request]), :type :var, :members ()} {:name batch-get-deployments, :arglists ([] [batch-get-deployments-request]), :type :var, :members ()} {:name batch-get-on-premises-instances, :arglists ([] [batch-get-on-premises-instances-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name continue-deployment, :arglists ([continue-deployment-request]), :type :var, :members ()} {:name create-application, :arglists ([create-application-request]), :type :var, :members ()} {:name create-deployment, :arglists ([create-deployment-request]), :type :var, :members ()} {:name create-deployment-config, :arglists ([create-deployment-config-request]), :type :var, :members ()} {:name create-deployment-group, :arglists ([create-deployment-group-request]), :type :var, :members ()} {:name delete-application, :arglists ([delete-application-request]), :type :var, :members ()} {:name delete-deployment-config, :arglists ([delete-deployment-config-request]), :type :var, :members ()} {:name delete-deployment-group, :arglists ([delete-deployment-group-request]), :type :var, :members ()} {:name delete-git-hub-account-token, :arglists ([delete-git-hub-account-token-request]), :type :var, :members ()} {:name deregister-on-premises-instance, :arglists ([deregister-on-premises-instance-request]), :type :var, :members ()} {:name get-application, :arglists ([get-application-request]), :type :var, :members ()} {:name get-application-revision, :arglists ([get-application-revision-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-deployment, :arglists ([get-deployment-request]), :type :var, :members ()} {:name get-deployment-config, :arglists ([get-deployment-config-request]), :type :var, :members ()} {:name get-deployment-group, :arglists ([get-deployment-group-request]), :type :var, :members ()} {:name get-deployment-instance, :arglists ([get-deployment-instance-request]), :type :var, :members ()} {:name get-deployment-target, :arglists ([get-deployment-target-request]), :type :var, :members ()} {:name get-on-premises-instance, :arglists ([get-on-premises-instance-request]), :type :var, :members ()} {:name list-application-revisions, :arglists ([list-application-revisions-request]), :type :var, :members ()} {:name list-applications, :arglists ([] [list-applications-request]), :type :var, :members ()} {:name list-deployment-configs, :arglists ([] [list-deployment-configs-request]), :type :var, :members ()} {:name list-deployment-groups, :arglists ([list-deployment-groups-request]), :type :var, :members ()} {:name list-deployment-instances, :arglists ([list-deployment-instances-request]), :type :var, :members ()} {:name list-deployment-targets, :arglists ([list-deployment-targets-request]), :type :var, :members ()} {:name list-deployments, :arglists ([] [list-deployments-request]), :type :var, :members ()} {:name list-git-hub-account-token-names, :arglists ([list-git-hub-account-token-names-request]), :type :var, :members ()} {:name list-on-premises-instances, :arglists ([] [list-on-premises-instances-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name put-lifecycle-event-hook-execution-status, :arglists ([put-lifecycle-event-hook-execution-status-request]), :type :var, :members ()} {:name register-application-revision, :arglists ([register-application-revision-request]), :type :var, :members ()} {:name register-on-premises-instance, :arglists ([register-on-premises-instance-request]), :type :var, :members ()} {:name remove-tags-from-on-premises-instances, :arglists ([remove-tags-from-on-premises-instances-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name shutdown, :arglists ([]), :type :var, :members ()} {:name skip-wait-time-for-instance-termination, :arglists ([skip-wait-time-for-instance-termination-request]), :type :var, :members ()} {:name stop-deployment, :arglists ([stop-deployment-request]), :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-application, :arglists ([] [update-application-request]), :type :var, :members ()} {:name update-deployment-group, :arglists ([update-deployment-group-request]), :type :var, :members ()} {:name waiters, :arglists ([]), :type :var, :members ()})} {:name amazonica.aws.storagegateway, :publics ({:name activate-gateway, :arglists ([activate-gateway-request]), :type :var, :members ()} {:name add-cache, :arglists ([add-cache-request]), :type :var, :members ()} {:name add-tags-to-resource, :arglists ([add-tags-to-resource-request]), :type :var, :members ()} {:name add-upload-buffer, :arglists ([add-upload-buffer-request]), :type :var, :members ()} {:name add-working-storage, :arglists ([add-working-storage-request]), :type :var, :members ()} {:name assign-tape-pool, :arglists ([assign-tape-pool-request]), :type :var, :members ()} {:name attach-volume, :arglists ([attach-volume-request]), :type :var, :members ()} {:name cancel-archival, :arglists ([cancel-archival-request]), :type :var, :members ()} {:name cancel-retrieval, :arglists ([cancel-retrieval-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-cached-iscsi-volume, :arglists ([create-cachedi-scsivolume-request]), :type :var, :members ()} {:name create-cachedi-scsivolume, :arglists ([create-cachedi-scsivolume-request]), :type :var, :members ()} {:name create-nfs-file-share, :arglists ([create-nfsfile-share-request]), :type :var, :members ()} {:name create-nfsfile-share, :arglists ([create-nfsfile-share-request]), :type :var, :members ()} {:name create-smb-file-share, :arglists ([create-smbfile-share-request]), :type :var, :members ()} {:name create-smbfile-share, :arglists ([create-smbfile-share-request]), :type :var, :members ()} {:name create-snapshot, :arglists ([create-snapshot-request]), :type :var, :members ()} {:name create-snapshot-from-volume-recovery-point, :arglists ([create-snapshot-from-volume-recovery-point-request]), :type :var, :members ()} {:name create-stored-iscsi-volume, :arglists ([create-storedi-scsivolume-request]), :type :var, :members ()} {:name create-storedi-scsivolume, :arglists ([create-storedi-scsivolume-request]), :type :var, :members ()} {:name create-tape-with-barcode, :arglists ([create-tape-with-barcode-request]), :type :var, :members ()} {:name create-tapes, :arglists ([create-tapes-request]), :type :var, :members ()} {:name delete-bandwidth-rate-limit, :arglists ([delete-bandwidth-rate-limit-request]), :type :var, :members ()} {:name delete-chap-credentials, :arglists ([delete-chap-credentials-request]), :type :var, :members ()} {:name delete-file-share, :arglists ([delete-file-share-request]), :type :var, :members ()} {:name delete-gateway, :arglists ([delete-gateway-request]), :type :var, :members ()} {:name delete-snapshot-schedule, :arglists ([delete-snapshot-schedule-request]), :type :var, :members ()} {:name delete-tape, :arglists ([delete-tape-request]), :type :var, :members ()} {:name delete-tape-archive, :arglists ([delete-tape-archive-request]), :type :var, :members ()} {:name delete-volume, :arglists ([delete-volume-request]), :type :var, :members ()} {:name describe-bandwidth-rate-limit, :arglists ([describe-bandwidth-rate-limit-request]), :type :var, :members ()} {:name describe-cache, :arglists ([describe-cache-request]), :type :var, :members ()} {:name describe-cached-iscsi-volumes, :arglists ([describe-cachedi-scsivolumes-request]), :type :var, :members ()} {:name describe-cachedi-scsivolumes, :arglists ([describe-cachedi-scsivolumes-request]), :type :var, :members ()} {:name describe-chap-credentials, :arglists ([describe-chap-credentials-request]), :type :var, :members ()} {:name describe-gateway-information, :arglists ([describe-gateway-information-request]), :type :var, :members ()} {:name describe-maintenance-start-time, :arglists ([describe-maintenance-start-time-request]), :type :var, :members ()} {:name describe-nfs-file-shares, :arglists ([describe-nfsfile-shares-request]), :type :var, :members ()} {:name describe-nfsfile-shares, :arglists ([describe-nfsfile-shares-request]), :type :var, :members ()} {:name describe-smb-file-shares, :arglists ([describe-smbfile-shares-request]), :type :var, :members ()} {:name describe-smb-settings, :arglists ([describe-smbsettings-request]), :type :var, :members ()} {:name describe-smbfile-shares, :arglists ([describe-smbfile-shares-request]), :type :var, :members ()} {:name describe-smbsettings, :arglists ([describe-smbsettings-request]), :type :var, :members ()} {:name describe-snapshot-schedule, :arglists ([describe-snapshot-schedule-request]), :type :var, :members ()} {:name describe-stored-iscsi-volumes, :arglists ([describe-storedi-scsivolumes-request]), :type :var, :members ()} {:name describe-storedi-scsivolumes, :arglists ([describe-storedi-scsivolumes-request]), :type :var, :members ()} {:name describe-tape-archives, :arglists ([] [describe-tape-archives-request]), :type :var, :members ()} {:name describe-tape-recovery-points, :arglists ([describe-tape-recovery-points-request]), :type :var, :members ()} {:name describe-tapes, :arglists ([describe-tapes-request]), :type :var, :members ()} {:name describe-upload-buffer, :arglists ([describe-upload-buffer-request]), :type :var, :members ()} {:name describe-vtl-devices, :arglists ([describe-vtldevices-request]), :type :var, :members ()} {:name describe-vtldevices, :arglists ([describe-vtldevices-request]), :type :var, :members ()} {:name describe-working-storage, :arglists ([describe-working-storage-request]), :type :var, :members ()} {:name detach-volume, :arglists ([detach-volume-request]), :type :var, :members ()} {:name disable-gateway, :arglists ([disable-gateway-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name join-domain, :arglists ([join-domain-request]), :type :var, :members ()} {:name list-file-shares, :arglists ([list-file-shares-request]), :type :var, :members ()} {:name list-gateways, :arglists ([] [list-gateways-request]), :type :var, :members ()} {:name list-local-disks, :arglists ([list-local-disks-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([] [list-tags-for-resource-request]), :type :var, :members ()} {:name list-tapes, :arglists ([list-tapes-request]), :type :var, :members ()} {:name list-volume-initiators, :arglists ([list-volume-initiators-request]), :type :var, :members ()} {:name list-volume-recovery-points, :arglists ([list-volume-recovery-points-request]), :type :var, :members ()} {:name list-volumes, :arglists ([list-volumes-request]), :type :var, :members ()} {:name notify-when-uploaded, :arglists ([notify-when-uploaded-request]), :type :var, :members ()} {:name refresh-cache, :arglists ([refresh-cache-request]), :type :var, :members ()} {:name remove-tags-from-resource, :arglists ([] [remove-tags-from-resource-request]), :type :var, :members ()} {:name reset-cache, :arglists ([reset-cache-request]), :type :var, :members ()} {:name retrieve-tape-archive, :arglists ([retrieve-tape-archive-request]), :type :var, :members ()} {:name retrieve-tape-recovery-point, :arglists ([retrieve-tape-recovery-point-request]), :type :var, :members ()} {:name set-local-console-password, :arglists ([set-local-console-password-request]), :type :var, :members ()} {:name set-smb-guest-password, :arglists ([set-smbguest-password-request]), :type :var, :members ()} {:name set-smbguest-password, :arglists ([set-smbguest-password-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name shutdown-gateway, :arglists ([shutdown-gateway-request]), :type :var, :members ()} {:name start-gateway, :arglists ([start-gateway-request]), :type :var, :members ()} {:name update-bandwidth-rate-limit, :arglists ([update-bandwidth-rate-limit-request]), :type :var, :members ()} {:name update-chap-credentials, :arglists ([update-chap-credentials-request]), :type :var, :members ()} {:name update-gateway-information, :arglists ([update-gateway-information-request]), :type :var, :members ()} {:name update-gateway-software-now, :arglists ([update-gateway-software-now-request]), :type :var, :members ()} {:name update-maintenance-start-time, :arglists ([update-maintenance-start-time-request]), :type :var, :members ()} {:name update-nfs-file-share, :arglists ([update-nfsfile-share-request]), :type :var, :members ()} {:name update-nfsfile-share, :arglists ([update-nfsfile-share-request]), :type :var, :members ()} {:name update-smb-file-share, :arglists ([update-smbfile-share-request]), :type :var, :members ()} {:name update-smb-security-strategy, :arglists ([update-smbsecurity-strategy-request]), :type :var, :members ()} {:name update-smbfile-share, :arglists ([update-smbfile-share-request]), :type :var, :members ()} {:name update-smbsecurity-strategy, :arglists ([update-smbsecurity-strategy-request]), :type :var, :members ()} {:name update-snapshot-schedule, :arglists ([update-snapshot-schedule-request]), :type :var, :members ()} {:name update-vtl-device-type, :arglists ([update-vtldevice-type-request]), :type :var, :members ()} {:name update-vtldevice-type, :arglists ([update-vtldevice-type-request]), :type :var, :members ()})} {:name amazonica.aws.costandusagereport, :publics ({:name client-class, :type :var, :members ()} {:name delete-report-definition, :arglists ([delete-report-definition-request]), :type :var, :members ()} {:name describe-report-definitions, :arglists ([describe-report-definitions-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name put-report-definition, :arglists ([put-report-definition-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()})} {:name amazonica.aws.iot, :publics ({:name accept-certificate-transfer, :arglists ([accept-certificate-transfer-request]), :type :var, :members ()} {:name add-thing-to-billing-group, :arglists ([add-thing-to-billing-group-request]), :type :var, :members ()} {:name add-thing-to-thing-group, :arglists ([add-thing-to-thing-group-request]), :type :var, :members ()} {:name associate-targets-with-job, :arglists ([associate-targets-with-job-request]), :type :var, :members ()} {:name attach-policy, :arglists ([attach-policy-request]), :type :var, :members ()} {:name attach-principal-policy, :arglists ([attach-principal-policy-request]), :type :var, :members ()} {:name attach-security-profile, :arglists ([attach-security-profile-request]), :type :var, :members ()} {:name attach-thing-principal, :arglists ([attach-thing-principal-request]), :type :var, :members ()} {:name cancel-audit-task, :arglists ([cancel-audit-task-request]), :type :var, :members ()} {:name cancel-certificate-transfer, :arglists ([cancel-certificate-transfer-request]), :type :var, :members ()} {:name cancel-job, :arglists ([cancel-job-request]), :type :var, :members ()} {:name cancel-job-execution, :arglists ([cancel-job-execution-request]), :type :var, :members ()} {:name clear-default-authorizer, :arglists ([clear-default-authorizer-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-authorizer, :arglists ([create-authorizer-request]), :type :var, :members ()} {:name create-billing-group, :arglists ([create-billing-group-request]), :type :var, :members ()} {:name create-certificate-from-csr, :arglists ([create-certificate-from-csr-request]), :type :var, :members ()} {:name create-dynamic-thing-group, :arglists ([create-dynamic-thing-group-request]), :type :var, :members ()} {:name create-job, :arglists ([create-job-request]), :type :var, :members ()} {:name create-keys-and-certificate, :arglists ([create-keys-and-certificate-request]), :type :var, :members ()} {:name create-ota-update, :arglists ([create-otaupdate-request]), :type :var, :members ()} {:name create-otaupdate, :arglists ([create-otaupdate-request]), :type :var, :members ()} {:name create-policy, :arglists ([create-policy-request]), :type :var, :members ()} {:name create-policy-version, :arglists ([create-policy-version-request]), :type :var, :members ()} {:name create-role-alias, :arglists ([create-role-alias-request]), :type :var, :members ()} {:name create-scheduled-audit, :arglists ([create-scheduled-audit-request]), :type :var, :members ()} {:name create-security-profile, :arglists ([create-security-profile-request]), :type :var, :members ()} {:name create-stream, :arglists ([create-stream-request]), :type :var, :members ()} {:name create-thing, :arglists ([create-thing-request]), :type :var, :members ()} {:name create-thing-group, :arglists ([create-thing-group-request]), :type :var, :members ()} {:name create-thing-type, :arglists ([create-thing-type-request]), :type :var, :members ()} {:name create-topic-rule, :arglists ([create-topic-rule-request]), :type :var, :members ()} {:name delete-account-audit-configuration, :arglists ([delete-account-audit-configuration-request]), :type :var, :members ()} {:name delete-authorizer, :arglists ([delete-authorizer-request]), :type :var, :members ()} {:name delete-billing-group, :arglists ([delete-billing-group-request]), :type :var, :members ()} {:name delete-ca-certificate, :arglists ([delete-cacertificate-request]), :type :var, :members ()} {:name delete-cacertificate, :arglists ([delete-cacertificate-request]), :type :var, :members ()} {:name delete-certificate, :arglists ([delete-certificate-request]), :type :var, :members ()} {:name delete-dynamic-thing-group, :arglists ([delete-dynamic-thing-group-request]), :type :var, :members ()} {:name delete-job, :arglists ([delete-job-request]), :type :var, :members ()} {:name delete-job-execution, :arglists ([delete-job-execution-request]), :type :var, :members ()} {:name delete-ota-update, :arglists ([delete-otaupdate-request]), :type :var, :members ()} {:name delete-otaupdate, :arglists ([delete-otaupdate-request]), :type :var, :members ()} {:name delete-policy, :arglists ([delete-policy-request]), :type :var, :members ()} {:name delete-policy-version, :arglists ([delete-policy-version-request]), :type :var, :members ()} {:name delete-registration-code, :arglists ([delete-registration-code-request]), :type :var, :members ()} {:name delete-role-alias, :arglists ([delete-role-alias-request]), :type :var, :members ()} {:name delete-scheduled-audit, :arglists ([delete-scheduled-audit-request]), :type :var, :members ()} {:name delete-security-profile, :arglists ([delete-security-profile-request]), :type :var, :members ()} {:name delete-stream, :arglists ([delete-stream-request]), :type :var, :members ()} {:name delete-thing, :arglists ([delete-thing-request]), :type :var, :members ()} {:name delete-thing-group, :arglists ([delete-thing-group-request]), :type :var, :members ()} {:name delete-thing-type, :arglists ([delete-thing-type-request]), :type :var, :members ()} {:name delete-topic-rule, :arglists ([delete-topic-rule-request]), :type :var, :members ()} {:name delete-v2-logging-level, :arglists ([delete-v2-logging-level-request]), :type :var, :members ()} {:name delete-v2logging-level, :arglists ([delete-v2-logging-level-request]), :type :var, :members ()} {:name deprecate-thing-type, :arglists ([deprecate-thing-type-request]), :type :var, :members ()} {:name describe-account-audit-configuration, :arglists ([describe-account-audit-configuration-request]), :type :var, :members ()} {:name describe-audit-task, :arglists ([describe-audit-task-request]), :type :var, :members ()} {:name describe-authorizer, :arglists ([describe-authorizer-request]), :type :var, :members ()} {:name describe-billing-group, :arglists ([describe-billing-group-request]), :type :var, :members ()} {:name describe-ca-certificate, :arglists ([describe-cacertificate-request]), :type :var, :members ()} {:name describe-cacertificate, :arglists ([describe-cacertificate-request]), :type :var, :members ()} {:name describe-certificate, :arglists ([describe-certificate-request]), :type :var, :members ()} {:name describe-default-authorizer, :arglists ([describe-default-authorizer-request]), :type :var, :members ()} {:name describe-endpoint, :arglists ([describe-endpoint-request]), :type :var, :members ()} {:name describe-event-configurations, :arglists ([describe-event-configurations-request]), :type :var, :members ()} {:name describe-index, :arglists ([describe-index-request]), :type :var, :members ()} {:name describe-job, :arglists ([describe-job-request]), :type :var, :members ()} {:name describe-job-execution, :arglists ([describe-job-execution-request]), :type :var, :members ()} {:name describe-role-alias, :arglists ([describe-role-alias-request]), :type :var, :members ()} {:name describe-scheduled-audit, :arglists ([describe-scheduled-audit-request]), :type :var, :members ()} {:name describe-security-profile, :arglists ([describe-security-profile-request]), :type :var, :members ()} {:name describe-stream, :arglists ([describe-stream-request]), :type :var, :members ()} {:name describe-thing, :arglists ([describe-thing-request]), :type :var, :members ()} {:name describe-thing-group, :arglists ([describe-thing-group-request]), :type :var, :members ()} {:name describe-thing-registration-task, :arglists ([describe-thing-registration-task-request]), :type :var, :members ()} {:name describe-thing-type, :arglists ([describe-thing-type-request]), :type :var, :members ()} {:name detach-policy, :arglists ([detach-policy-request]), :type :var, :members ()} {:name detach-principal-policy, :arglists ([detach-principal-policy-request]), :type :var, :members ()} {:name detach-security-profile, :arglists ([detach-security-profile-request]), :type :var, :members ()} {:name detach-thing-principal, :arglists ([detach-thing-principal-request]), :type :var, :members ()} {:name disable-topic-rule, :arglists ([disable-topic-rule-request]), :type :var, :members ()} {:name enable-topic-rule, :arglists ([enable-topic-rule-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-effective-policies, :arglists ([get-effective-policies-request]), :type :var, :members ()} {:name get-indexing-configuration, :arglists ([get-indexing-configuration-request]), :type :var, :members ()} {:name get-job-document, :arglists ([get-job-document-request]), :type :var, :members ()} {:name get-logging-options, :arglists ([get-logging-options-request]), :type :var, :members ()} {:name get-ota-update, :arglists ([get-otaupdate-request]), :type :var, :members ()} {:name get-otaupdate, :arglists ([get-otaupdate-request]), :type :var, :members ()} {:name get-policy, :arglists ([get-policy-request]), :type :var, :members ()} {:name get-policy-version, :arglists ([get-policy-version-request]), :type :var, :members ()} {:name get-registration-code, :arglists ([get-registration-code-request]), :type :var, :members ()} {:name get-statistics, :arglists ([get-statistics-request]), :type :var, :members ()} {:name get-topic-rule, :arglists ([get-topic-rule-request]), :type :var, :members ()} {:name get-v2-logging-options, :arglists ([get-v2-logging-options-request]), :type :var, :members ()} {:name get-v2logging-options, :arglists ([get-v2-logging-options-request]), :type :var, :members ()} {:name list-active-violations, :arglists ([list-active-violations-request]), :type :var, :members ()} {:name list-attached-policies, :arglists ([list-attached-policies-request]), :type :var, :members ()} {:name list-audit-findings, :arglists ([list-audit-findings-request]), :type :var, :members ()} {:name list-audit-tasks, :arglists ([list-audit-tasks-request]), :type :var, :members ()} {:name list-authorizers, :arglists ([list-authorizers-request]), :type :var, :members ()} {:name list-billing-groups, :arglists ([list-billing-groups-request]), :type :var, :members ()} {:name list-ca-certificates, :arglists ([list-cacertificates-request]), :type :var, :members ()} {:name list-cacertificates, :arglists ([list-cacertificates-request]), :type :var, :members ()} {:name list-certificates, :arglists ([list-certificates-request]), :type :var, :members ()} {:name list-certificates-by-ca, :arglists ([list-certificates-by-carequest]), :type :var, :members ()} {:name list-indices, :arglists ([list-indices-request]), :type :var, :members ()} {:name list-job-executions-for-job, :arglists ([list-job-executions-for-job-request]), :type :var, :members ()} {:name list-job-executions-for-thing, :arglists ([list-job-executions-for-thing-request]), :type :var, :members ()} {:name list-jobs, :arglists ([list-jobs-request]), :type :var, :members ()} {:name list-ota-updates, :arglists ([list-otaupdates-request]), :type :var, :members ()} {:name list-otaupdates, :arglists ([list-otaupdates-request]), :type :var, :members ()} {:name list-outgoing-certificates, :arglists ([list-outgoing-certificates-request]), :type :var, :members ()} {:name list-policies, :arglists ([list-policies-request]), :type :var, :members ()} {:name list-policy-principals, :arglists ([list-policy-principals-request]), :type :var, :members ()} {:name list-policy-versions, :arglists ([list-policy-versions-request]), :type :var, :members ()} {:name list-principal-policies, :arglists ([list-principal-policies-request]), :type :var, :members ()} {:name list-principal-things, :arglists ([list-principal-things-request]), :type :var, :members ()} {:name list-role-aliases, :arglists ([list-role-aliases-request]), :type :var, :members ()} {:name list-scheduled-audits, :arglists ([list-scheduled-audits-request]), :type :var, :members ()} {:name list-security-profiles, :arglists ([list-security-profiles-request]), :type :var, :members ()} {:name list-security-profiles-for-target, :arglists ([list-security-profiles-for-target-request]), :type :var, :members ()} {:name list-streams, :arglists ([list-streams-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name list-targets-for-policy, :arglists ([list-targets-for-policy-request]), :type :var, :members ()} {:name list-targets-for-security-profile, :arglists ([list-targets-for-security-profile-request]), :type :var, :members ()} {:name list-thing-groups, :arglists ([list-thing-groups-request]), :type :var, :members ()} {:name list-thing-groups-for-thing, :arglists ([list-thing-groups-for-thing-request]), :type :var, :members ()} {:name list-thing-principals, :arglists ([list-thing-principals-request]), :type :var, :members ()} {:name list-thing-registration-task-reports, :arglists ([list-thing-registration-task-reports-request]), :type :var, :members ()} {:name list-thing-registration-tasks, :arglists ([list-thing-registration-tasks-request]), :type :var, :members ()} {:name list-thing-types, :arglists ([list-thing-types-request]), :type :var, :members ()} {:name list-things, :arglists ([list-things-request]), :type :var, :members ()} {:name list-things-in-billing-group, :arglists ([list-things-in-billing-group-request]), :type :var, :members ()} {:name list-things-in-thing-group, :arglists ([list-things-in-thing-group-request]), :type :var, :members ()} {:name list-topic-rules, :arglists ([list-topic-rules-request]), :type :var, :members ()} {:name list-v2-logging-levels, :arglists ([list-v2-logging-levels-request]), :type :var, :members ()} {:name list-v2logging-levels, :arglists ([list-v2-logging-levels-request]), :type :var, :members ()} {:name list-violation-events, :arglists ([list-violation-events-request]), :type :var, :members ()} {:name register-ca-certificate, :arglists ([register-cacertificate-request]), :type :var, :members ()} {:name register-cacertificate, :arglists ([register-cacertificate-request]), :type :var, :members ()} {:name register-certificate, :arglists ([register-certificate-request]), :type :var, :members ()} {:name register-thing, :arglists ([register-thing-request]), :type :var, :members ()} {:name reject-certificate-transfer, :arglists ([reject-certificate-transfer-request]), :type :var, :members ()} {:name remove-thing-from-billing-group, :arglists ([remove-thing-from-billing-group-request]), :type :var, :members ()} {:name remove-thing-from-thing-group, :arglists ([remove-thing-from-thing-group-request]), :type :var, :members ()} {:name replace-topic-rule, :arglists ([replace-topic-rule-request]), :type :var, :members ()} {:name search-index, :arglists ([search-index-request]), :type :var, :members ()} {:name set-default-authorizer, :arglists ([set-default-authorizer-request]), :type :var, :members ()} {:name set-default-policy-version, :arglists ([set-default-policy-version-request]), :type :var, :members ()} {:name set-logging-options, :arglists ([set-logging-options-request]), :type :var, :members ()} {:name set-v2-logging-level, :arglists ([set-v2-logging-level-request]), :type :var, :members ()} {:name set-v2-logging-options, :arglists ([set-v2-logging-options-request]), :type :var, :members ()} {:name set-v2logging-level, :arglists ([set-v2-logging-level-request]), :type :var, :members ()} {:name set-v2logging-options, :arglists ([set-v2-logging-options-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name start-on-demand-audit-task, :arglists ([start-on-demand-audit-task-request]), :type :var, :members ()} {:name start-thing-registration-task, :arglists ([start-thing-registration-task-request]), :type :var, :members ()} {:name stop-thing-registration-task, :arglists ([stop-thing-registration-task-request]), :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name test-authorization, :arglists ([test-authorization-request]), :type :var, :members ()} {:name test-invoke-authorizer, :arglists ([test-invoke-authorizer-request]), :type :var, :members ()} {:name transfer-certificate, :arglists ([transfer-certificate-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-account-audit-configuration, :arglists ([update-account-audit-configuration-request]), :type :var, :members ()} {:name update-authorizer, :arglists ([update-authorizer-request]), :type :var, :members ()} {:name update-billing-group, :arglists ([update-billing-group-request]), :type :var, :members ()} {:name update-ca-certificate, :arglists ([update-cacertificate-request]), :type :var, :members ()} {:name update-cacertificate, :arglists ([update-cacertificate-request]), :type :var, :members ()} {:name update-certificate, :arglists ([update-certificate-request]), :type :var, :members ()} {:name update-dynamic-thing-group, :arglists ([update-dynamic-thing-group-request]), :type :var, :members ()} {:name update-event-configurations, :arglists ([update-event-configurations-request]), :type :var, :members ()} {:name update-indexing-configuration, :arglists ([update-indexing-configuration-request]), :type :var, :members ()} {:name update-job, :arglists ([update-job-request]), :type :var, :members ()} {:name update-role-alias, :arglists ([update-role-alias-request]), :type :var, :members ()} {:name update-scheduled-audit, :arglists ([update-scheduled-audit-request]), :type :var, :members ()} {:name update-security-profile, :arglists ([update-security-profile-request]), :type :var, :members ()} {:name update-stream, :arglists ([update-stream-request]), :type :var, :members ()} {:name update-thing, :arglists ([update-thing-request]), :type :var, :members ()} {:name update-thing-group, :arglists ([update-thing-group-request]), :type :var, :members ()} {:name update-thing-groups-for-thing, :arglists ([update-thing-groups-for-thing-request]), :type :var, :members ()} {:name validate-security-profile-behaviors, :arglists ([validate-security-profile-behaviors-request]), :type :var, :members ()})} {:name amazonica.aws.transcribe, :publics ({:name client-class, :type :var, :members ()} {:name create-vocabulary, :arglists ([create-vocabulary-request]), :type :var, :members ()} {:name delete-transcription-job, :arglists ([delete-transcription-job-request]), :type :var, :members ()} {:name delete-vocabulary, :arglists ([delete-vocabulary-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-transcription-job, :arglists ([get-transcription-job-request]), :type :var, :members ()} {:name get-vocabulary, :arglists ([get-vocabulary-request]), :type :var, :members ()} {:name list-transcription-jobs, :arglists ([list-transcription-jobs-request]), :type :var, :members ()} {:name list-vocabularies, :arglists ([list-vocabularies-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name start-transcription-job, :arglists ([start-transcription-job-request]), :type :var, :members ()} {:name update-vocabulary, :arglists ([update-vocabulary-request]), :type :var, :members ()})} {:name amazonica.aws.lexruntime, :publics ({:name client-class, :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name post-content, :arglists ([post-content-request]), :type :var, :members ()} {:name post-text, :arglists ([post-text-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()})} {:name amazonica.aws.gamelift, :publics ({:name accept-match, :arglists ([accept-match-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-alias, :arglists ([create-alias-request]), :type :var, :members ()} {:name create-build, :arglists ([create-build-request]), :type :var, :members ()} {:name create-fleet, :arglists ([create-fleet-request]), :type :var, :members ()} {:name create-game-session, :arglists ([create-game-session-request]), :type :var, :members ()} {:name create-game-session-queue, :arglists ([create-game-session-queue-request]), :type :var, :members ()} {:name create-matchmaking-configuration, :arglists ([create-matchmaking-configuration-request]), :type :var, :members ()} {:name create-matchmaking-rule-set, :arglists ([create-matchmaking-rule-set-request]), :type :var, :members ()} {:name create-player-session, :arglists ([create-player-session-request]), :type :var, :members ()} {:name create-player-sessions, :arglists ([create-player-sessions-request]), :type :var, :members ()} {:name create-script, :arglists ([create-script-request]), :type :var, :members ()} {:name create-vpc-peering-authorization, :arglists ([create-vpc-peering-authorization-request]), :type :var, :members ()} {:name create-vpc-peering-connection, :arglists ([create-vpc-peering-connection-request]), :type :var, :members ()} {:name delete-alias, :arglists ([delete-alias-request]), :type :var, :members ()} {:name delete-build, :arglists ([delete-build-request]), :type :var, :members ()} {:name delete-fleet, :arglists ([delete-fleet-request]), :type :var, :members ()} {:name delete-game-session-queue, :arglists ([delete-game-session-queue-request]), :type :var, :members ()} {:name delete-matchmaking-configuration, :arglists ([delete-matchmaking-configuration-request]), :type :var, :members ()} {:name delete-matchmaking-rule-set, :arglists ([delete-matchmaking-rule-set-request]), :type :var, :members ()} {:name delete-scaling-policy, :arglists ([delete-scaling-policy-request]), :type :var, :members ()} {:name delete-script, :arglists ([delete-script-request]), :type :var, :members ()} {:name delete-vpc-peering-authorization, :arglists ([delete-vpc-peering-authorization-request]), :type :var, :members ()} {:name delete-vpc-peering-connection, :arglists ([delete-vpc-peering-connection-request]), :type :var, :members ()} {:name describe-alias, :arglists ([describe-alias-request]), :type :var, :members ()} {:name describe-build, :arglists ([describe-build-request]), :type :var, :members ()} {:name describe-ec2-instance-limits, :arglists ([describe-ec2-instance-limits-request]), :type :var, :members ()} {:name describe-ec2instance-limits, :arglists ([describe-ec2-instance-limits-request]), :type :var, :members ()} {:name describe-fleet-attributes, :arglists ([describe-fleet-attributes-request]), :type :var, :members ()} {:name describe-fleet-capacity, :arglists ([describe-fleet-capacity-request]), :type :var, :members ()} {:name describe-fleet-events, :arglists ([describe-fleet-events-request]), :type :var, :members ()} {:name describe-fleet-port-settings, :arglists ([describe-fleet-port-settings-request]), :type :var, :members ()} {:name describe-fleet-utilization, :arglists ([describe-fleet-utilization-request]), :type :var, :members ()} {:name describe-game-session-details, :arglists ([describe-game-session-details-request]), :type :var, :members ()} {:name describe-game-session-placement, :arglists ([describe-game-session-placement-request]), :type :var, :members ()} {:name describe-game-session-queues, :arglists ([describe-game-session-queues-request]), :type :var, :members ()} {:name describe-game-sessions, :arglists ([describe-game-sessions-request]), :type :var, :members ()} {:name describe-instances, :arglists ([describe-instances-request]), :type :var, :members ()} {:name describe-matchmaking, :arglists ([describe-matchmaking-request]), :type :var, :members ()} {:name describe-matchmaking-configurations, :arglists ([describe-matchmaking-configurations-request]), :type :var, :members ()} {:name describe-matchmaking-rule-sets, :arglists ([describe-matchmaking-rule-sets-request]), :type :var, :members ()} {:name describe-player-sessions, :arglists ([describe-player-sessions-request]), :type :var, :members ()} {:name describe-runtime-configuration, :arglists ([describe-runtime-configuration-request]), :type :var, :members ()} {:name describe-scaling-policies, :arglists ([describe-scaling-policies-request]), :type :var, :members ()} {:name describe-script, :arglists ([describe-script-request]), :type :var, :members ()} {:name describe-vpc-peering-authorizations, :arglists ([describe-vpc-peering-authorizations-request]), :type :var, :members ()} {:name describe-vpc-peering-connections, :arglists ([describe-vpc-peering-connections-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-game-session-log-url, :arglists ([get-game-session-log-url-request]), :type :var, :members ()} {:name get-instance-access, :arglists ([get-instance-access-request]), :type :var, :members ()} {:name list-aliases, :arglists ([list-aliases-request]), :type :var, :members ()} {:name list-builds, :arglists ([list-builds-request]), :type :var, :members ()} {:name list-fleets, :arglists ([list-fleets-request]), :type :var, :members ()} {:name list-scripts, :arglists ([list-scripts-request]), :type :var, :members ()} {:name put-scaling-policy, :arglists ([put-scaling-policy-request]), :type :var, :members ()} {:name request-upload-credentials, :arglists ([request-upload-credentials-request]), :type :var, :members ()} {:name resolve-alias, :arglists ([resolve-alias-request]), :type :var, :members ()} {:name search-game-sessions, :arglists ([search-game-sessions-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name start-fleet-actions, :arglists ([start-fleet-actions-request]), :type :var, :members ()} {:name start-game-session-placement, :arglists ([start-game-session-placement-request]), :type :var, :members ()} {:name start-match-backfill, :arglists ([start-match-backfill-request]), :type :var, :members ()} {:name start-matchmaking, :arglists ([start-matchmaking-request]), :type :var, :members ()} {:name stop-fleet-actions, :arglists ([stop-fleet-actions-request]), :type :var, :members ()} {:name stop-game-session-placement, :arglists ([stop-game-session-placement-request]), :type :var, :members ()} {:name stop-matchmaking, :arglists ([stop-matchmaking-request]), :type :var, :members ()} {:name update-alias, :arglists ([update-alias-request]), :type :var, :members ()} {:name update-build, :arglists ([update-build-request]), :type :var, :members ()} {:name update-fleet-attributes, :arglists ([update-fleet-attributes-request]), :type :var, :members ()} {:name update-fleet-capacity, :arglists ([update-fleet-capacity-request]), :type :var, :members ()} {:name update-fleet-port-settings, :arglists ([update-fleet-port-settings-request]), :type :var, :members ()} {:name update-game-session, :arglists ([update-game-session-request]), :type :var, :members ()} {:name update-game-session-queue, :arglists ([update-game-session-queue-request]), :type :var, :members ()} {:name update-matchmaking-configuration, :arglists ([update-matchmaking-configuration-request]), :type :var, :members ()} {:name update-runtime-configuration, :arglists ([update-runtime-configuration-request]), :type :var, :members ()} {:name update-script, :arglists ([update-script-request]), :type :var, :members ()} {:name validate-matchmaking-rule-set, :arglists ([validate-matchmaking-rule-set-request]), :type :var, :members ()})} {:name amazonica.aws.cloudwatchevents, :publics ({:name activate-event-source, :arglists ([activate-event-source-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-event-bus, :arglists ([create-event-bus-request]), :type :var, :members ()} {:name create-partner-event-source, :arglists ([create-partner-event-source-request]), :type :var, :members ()} {:name deactivate-event-source, :arglists ([deactivate-event-source-request]), :type :var, :members ()} {:name delete-event-bus, :arglists ([delete-event-bus-request]), :type :var, :members ()} {:name delete-partner-event-source, :arglists ([delete-partner-event-source-request]), :type :var, :members ()} {:name delete-rule, :arglists ([delete-rule-request]), :type :var, :members ()} {:name describe-event-bus, :arglists ([describe-event-bus-request]), :type :var, :members ()} {:name describe-event-source, :arglists ([describe-event-source-request]), :type :var, :members ()} {:name describe-partner-event-source, :arglists ([describe-partner-event-source-request]), :type :var, :members ()} {:name describe-rule, :arglists ([describe-rule-request]), :type :var, :members ()} {:name disable-rule, :arglists ([disable-rule-request]), :type :var, :members ()} {:name enable-rule, :arglists ([enable-rule-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name list-event-buses, :arglists ([list-event-buses-request]), :type :var, :members ()} {:name list-event-sources, :arglists ([list-event-sources-request]), :type :var, :members ()} {:name list-partner-event-source-accounts, :arglists ([list-partner-event-source-accounts-request]), :type :var, :members ()} {:name list-partner-event-sources, :arglists ([list-partner-event-sources-request]), :type :var, :members ()} {:name list-rule-names-by-target, :arglists ([list-rule-names-by-target-request]), :type :var, :members ()} {:name list-rules, :arglists ([list-rules-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name list-targets-by-rule, :arglists ([list-targets-by-rule-request]), :type :var, :members ()} {:name put-events, :arglists ([put-events-request]), :type :var, :members ()} {:name put-partner-events, :arglists ([put-partner-events-request]), :type :var, :members ()} {:name put-permission, :arglists ([put-permission-request]), :type :var, :members ()} {:name put-rule, :arglists ([put-rule-request]), :type :var, :members ()} {:name put-targets, :arglists ([put-targets-request]), :type :var, :members ()} {:name remove-permission, :arglists ([remove-permission-request]), :type :var, :members ()} {:name remove-targets, :arglists ([remove-targets-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name test-event-pattern, :arglists ([test-event-pattern-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()})} {:name amazonica.aws.simpleemail, :publics ({:name client-class, :type :var, :members ()} {:name clone-receipt-rule-set, :arglists ([clone-receipt-rule-set-request]), :type :var, :members ()} {:name create-configuration-set, :arglists ([create-configuration-set-request]), :type :var, :members ()} {:name create-configuration-set-event-destination, :arglists ([create-configuration-set-event-destination-request]), :type :var, :members ()} {:name create-configuration-set-tracking-options, :arglists ([create-configuration-set-tracking-options-request]), :type :var, :members ()} {:name create-custom-verification-email-template, :arglists ([create-custom-verification-email-template-request]), :type :var, :members ()} {:name create-receipt-filter, :arglists ([create-receipt-filter-request]), :type :var, :members ()} {:name create-receipt-rule, :arglists ([create-receipt-rule-request]), :type :var, :members ()} {:name create-receipt-rule-set, :arglists ([create-receipt-rule-set-request]), :type :var, :members ()} {:name create-template, :arglists ([create-template-request]), :type :var, :members ()} {:name delete-configuration-set, :arglists ([delete-configuration-set-request]), :type :var, :members ()} {:name delete-configuration-set-event-destination, :arglists ([delete-configuration-set-event-destination-request]), :type :var, :members ()} {:name delete-configuration-set-tracking-options, :arglists ([delete-configuration-set-tracking-options-request]), :type :var, :members ()} {:name delete-custom-verification-email-template, :arglists ([delete-custom-verification-email-template-request]), :type :var, :members ()} {:name delete-identity, :arglists ([delete-identity-request]), :type :var, :members ()} {:name delete-identity-policy, :arglists ([delete-identity-policy-request]), :type :var, :members ()} {:name delete-receipt-filter, :arglists ([delete-receipt-filter-request]), :type :var, :members ()} {:name delete-receipt-rule, :arglists ([delete-receipt-rule-request]), :type :var, :members ()} {:name delete-receipt-rule-set, :arglists ([delete-receipt-rule-set-request]), :type :var, :members ()} {:name delete-template, :arglists ([delete-template-request]), :type :var, :members ()} {:name delete-verified-email-address, :arglists ([delete-verified-email-address-request]), :type :var, :members ()} {:name describe-active-receipt-rule-set, :arglists ([describe-active-receipt-rule-set-request]), :type :var, :members ()} {:name describe-configuration-set, :arglists ([describe-configuration-set-request]), :type :var, :members ()} {:name describe-receipt-rule, :arglists ([describe-receipt-rule-request]), :type :var, :members ()} {:name describe-receipt-rule-set, :arglists ([describe-receipt-rule-set-request]), :type :var, :members ()} {:name get-account-sending-enabled, :arglists ([get-account-sending-enabled-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-custom-verification-email-template, :arglists ([get-custom-verification-email-template-request]), :type :var, :members ()} {:name get-identity-dkim-attributes, :arglists ([get-identity-dkim-attributes-request]), :type :var, :members ()} {:name get-identity-mail-from-domain-attributes, :arglists ([get-identity-mail-from-domain-attributes-request]), :type :var, :members ()} {:name get-identity-notification-attributes, :arglists ([get-identity-notification-attributes-request]), :type :var, :members ()} {:name get-identity-policies, :arglists ([get-identity-policies-request]), :type :var, :members ()} {:name get-identity-verification-attributes, :arglists ([get-identity-verification-attributes-request]), :type :var, :members ()} {:name get-send-quota, :arglists ([] [get-send-quota-request]), :type :var, :members ()} {:name get-send-statistics, :arglists ([] [get-send-statistics-request]), :type :var, :members ()} {:name get-template, :arglists ([get-template-request]), :type :var, :members ()} {:name list-configuration-sets, :arglists ([list-configuration-sets-request]), :type :var, :members ()} {:name list-custom-verification-email-templates, :arglists ([list-custom-verification-email-templates-request]), :type :var, :members ()} {:name list-identities, :arglists ([] [list-identities-request]), :type :var, :members ()} {:name list-identity-policies, :arglists ([list-identity-policies-request]), :type :var, :members ()} {:name list-receipt-filters, :arglists ([list-receipt-filters-request]), :type :var, :members ()} {:name list-receipt-rule-sets, :arglists ([list-receipt-rule-sets-request]), :type :var, :members ()} {:name list-templates, :arglists ([list-templates-request]), :type :var, :members ()} {:name list-verified-email-addresses, :arglists ([] [list-verified-email-addresses-request]), :type :var, :members ()} {:name put-configuration-set-delivery-options, :arglists ([put-configuration-set-delivery-options-request]), :type :var, :members ()} {:name put-identity-policy, :arglists ([put-identity-policy-request]), :type :var, :members ()} {:name reorder-receipt-rule-set, :arglists ([reorder-receipt-rule-set-request]), :type :var, :members ()} {:name send-bounce, :arglists ([send-bounce-request]), :type :var, :members ()} {:name send-bulk-templated-email, :arglists ([send-bulk-templated-email-request]), :type :var, :members ()} {:name send-custom-verification-email, :arglists ([send-custom-verification-email-request]), :type :var, :members ()} {:name send-email, :arglists ([send-email-request]), :type :var, :members ()} {:name send-raw-email, :arglists ([send-raw-email-request]), :type :var, :members ()} {:name send-templated-email, :arglists ([send-templated-email-request]), :type :var, :members ()} {:name set-active-receipt-rule-set, :arglists ([set-active-receipt-rule-set-request]), :type :var, :members ()} {:name set-identity-dkim-enabled, :arglists ([set-identity-dkim-enabled-request]), :type :var, :members ()} {:name set-identity-feedback-forwarding-enabled, :arglists ([set-identity-feedback-forwarding-enabled-request]), :type :var, :members ()} {:name set-identity-headers-in-notifications-enabled, :arglists ([set-identity-headers-in-notifications-enabled-request]), :type :var, :members ()} {:name set-identity-mail-from-domain, :arglists ([set-identity-mail-from-domain-request]), :type :var, :members ()} {:name set-identity-notification-topic, :arglists ([set-identity-notification-topic-request]), :type :var, :members ()} {:name set-receipt-rule-position, :arglists ([set-receipt-rule-position-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name shutdown, :arglists ([]), :type :var, :members ()} {:name test-render-template, :arglists ([test-render-template-request]), :type :var, :members ()} {:name update-account-sending-enabled, :arglists ([update-account-sending-enabled-request]), :type :var, :members ()} {:name update-configuration-set-event-destination, :arglists ([update-configuration-set-event-destination-request]), :type :var, :members ()} {:name update-configuration-set-reputation-metrics-enabled, :arglists ([update-configuration-set-reputation-metrics-enabled-request]), :type :var, :members ()} {:name update-configuration-set-sending-enabled, :arglists ([update-configuration-set-sending-enabled-request]), :type :var, :members ()} {:name update-configuration-set-tracking-options, :arglists ([update-configuration-set-tracking-options-request]), :type :var, :members ()} {:name update-custom-verification-email-template, :arglists ([update-custom-verification-email-template-request]), :type :var, :members ()} {:name update-receipt-rule, :arglists ([update-receipt-rule-request]), :type :var, :members ()} {:name update-template, :arglists ([update-template-request]), :type :var, :members ()} {:name verify-domain-dkim, :arglists ([verify-domain-dkim-request]), :type :var, :members ()} {:name verify-domain-identity, :arglists ([verify-domain-identity-request]), :type :var, :members ()} {:name verify-email-address, :arglists ([verify-email-address-request]), :type :var, :members ()} {:name verify-email-identity, :arglists ([verify-email-identity-request]), :type :var, :members ()} {:name waiters, :arglists ([]), :type :var, :members ()})} {:name amazonica.aws.cloudsearchv2, :publics ({:name build-suggesters, :arglists ([build-suggesters-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-domain, :arglists ([create-domain-request]), :type :var, :members ()} {:name define-analysis-scheme, :arglists ([define-analysis-scheme-request]), :type :var, :members ()} {:name define-expression, :arglists ([define-expression-request]), :type :var, :members ()} {:name define-index-field, :arglists ([define-index-field-request]), :type :var, :members ()} {:name define-suggester, :arglists ([define-suggester-request]), :type :var, :members ()} {:name delete-analysis-scheme, :arglists ([delete-analysis-scheme-request]), :type :var, :members ()} {:name delete-domain, :arglists ([delete-domain-request]), :type :var, :members ()} {:name delete-expression, :arglists ([delete-expression-request]), :type :var, :members ()} {:name delete-index-field, :arglists ([delete-index-field-request]), :type :var, :members ()} {:name delete-suggester, :arglists ([delete-suggester-request]), :type :var, :members ()} {:name describe-analysis-schemes, :arglists ([describe-analysis-schemes-request]), :type :var, :members ()} {:name describe-availability-options, :arglists ([describe-availability-options-request]), :type :var, :members ()} {:name describe-domains, :arglists ([] [describe-domains-request]), :type :var, :members ()} {:name describe-expressions, :arglists ([describe-expressions-request]), :type :var, :members ()} {:name describe-index-fields, :arglists ([describe-index-fields-request]), :type :var, :members ()} {:name describe-scaling-parameters, :arglists ([describe-scaling-parameters-request]), :type :var, :members ()} {:name describe-service-access-policies, :arglists ([describe-service-access-policies-request]), :type :var, :members ()} {:name describe-suggesters, :arglists ([describe-suggesters-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name index-documents, :arglists ([index-documents-request]), :type :var, :members ()} {:name list-domain-names, :arglists ([] [list-domain-names-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name update-availability-options, :arglists ([update-availability-options-request]), :type :var, :members ()} {:name update-scaling-parameters, :arglists ([update-scaling-parameters-request]), :type :var, :members ()} {:name update-service-access-policies, :arglists ([update-service-access-policies-request]), :type :var, :members ()})} {:name amazonica.aws.migrationhub, :publics ({:name associate-created-artifact, :arglists ([associate-created-artifact-request]), :type :var, :members ()} {:name associate-discovered-resource, :arglists ([associate-discovered-resource-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-progress-update-stream, :arglists ([create-progress-update-stream-request]), :type :var, :members ()} {:name delete-progress-update-stream, :arglists ([delete-progress-update-stream-request]), :type :var, :members ()} {:name describe-application-state, :arglists ([describe-application-state-request]), :type :var, :members ()} {:name describe-migration-task, :arglists ([describe-migration-task-request]), :type :var, :members ()} {:name disassociate-created-artifact, :arglists ([disassociate-created-artifact-request]), :type :var, :members ()} {:name disassociate-discovered-resource, :arglists ([disassociate-discovered-resource-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name import-migration-task, :arglists ([import-migration-task-request]), :type :var, :members ()} {:name list-created-artifacts, :arglists ([list-created-artifacts-request]), :type :var, :members ()} {:name list-discovered-resources, :arglists ([list-discovered-resources-request]), :type :var, :members ()} {:name list-migration-tasks, :arglists ([list-migration-tasks-request]), :type :var, :members ()} {:name list-progress-update-streams, :arglists ([list-progress-update-streams-request]), :type :var, :members ()} {:name notify-application-state, :arglists ([notify-application-state-request]), :type :var, :members ()} {:name notify-migration-task-state, :arglists ([notify-migration-task-state-request]), :type :var, :members ()} {:name put-resource-attributes, :arglists ([put-resource-attributes-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()})} {:name amazonica.aws.cloudfront, :publics ({:name client-class, :type :var, :members ()} {:name create-cloud-front-origin-access-identity, :arglists ([create-cloud-front-origin-access-identity-request]), :type :var, :members ()} {:name create-distribution, :arglists ([create-distribution-request]), :type :var, :members ()} {:name create-distribution-with-tags, :arglists ([create-distribution-with-tags-request]), :type :var, :members ()} {:name create-field-level-encryption-config, :arglists ([create-field-level-encryption-config-request]), :type :var, :members ()} {:name create-field-level-encryption-profile, :arglists ([create-field-level-encryption-profile-request]), :type :var, :members ()} {:name create-invalidation, :arglists ([create-invalidation-request]), :type :var, :members ()} {:name create-public-key, :arglists ([create-public-key-request]), :type :var, :members ()} {:name create-streaming-distribution, :arglists ([create-streaming-distribution-request]), :type :var, :members ()} {:name create-streaming-distribution-with-tags, :arglists ([create-streaming-distribution-with-tags-request]), :type :var, :members ()} {:name delete-cloud-front-origin-access-identity, :arglists ([delete-cloud-front-origin-access-identity-request]), :type :var, :members ()} {:name delete-distribution, :arglists ([delete-distribution-request]), :type :var, :members ()} {:name delete-field-level-encryption-config, :arglists ([delete-field-level-encryption-config-request]), :type :var, :members ()} {:name delete-field-level-encryption-profile, :arglists ([delete-field-level-encryption-profile-request]), :type :var, :members ()} {:name delete-public-key, :arglists ([delete-public-key-request]), :type :var, :members ()} {:name delete-streaming-distribution, :arglists ([delete-streaming-distribution-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-cloud-front-origin-access-identity, :arglists ([get-cloud-front-origin-access-identity-request]), :type :var, :members ()} {:name get-cloud-front-origin-access-identity-config, :arglists ([get-cloud-front-origin-access-identity-config-request]), :type :var, :members ()} {:name get-distribution, :arglists ([get-distribution-request]), :type :var, :members ()} {:name get-distribution-config, :arglists ([get-distribution-config-request]), :type :var, :members ()} {:name get-field-level-encryption, :arglists ([get-field-level-encryption-request]), :type :var, :members ()} {:name get-field-level-encryption-config, :arglists ([get-field-level-encryption-config-request]), :type :var, :members ()} {:name get-field-level-encryption-profile, :arglists ([get-field-level-encryption-profile-request]), :type :var, :members ()} {:name get-field-level-encryption-profile-config, :arglists ([get-field-level-encryption-profile-config-request]), :type :var, :members ()} {:name get-invalidation, :arglists ([get-invalidation-request]), :type :var, :members ()} {:name get-public-key, :arglists ([get-public-key-request]), :type :var, :members ()} {:name get-public-key-config, :arglists ([get-public-key-config-request]), :type :var, :members ()} {:name get-streaming-distribution, :arglists ([get-streaming-distribution-request]), :type :var, :members ()} {:name get-streaming-distribution-config, :arglists ([get-streaming-distribution-config-request]), :type :var, :members ()} {:name list-cloud-front-origin-access-identities, :arglists ([list-cloud-front-origin-access-identities-request]), :type :var, :members ()} {:name list-distributions, :arglists ([list-distributions-request]), :type :var, :members ()} {:name list-distributions-by-web-acl-id, :arglists ([list-distributions-by-web-aclid-request]), :type :var, :members ()} {:name list-distributions-by-web-aclid, :arglists ([list-distributions-by-web-aclid-request]), :type :var, :members ()} {:name list-field-level-encryption-configs, :arglists ([list-field-level-encryption-configs-request]), :type :var, :members ()} {:name list-field-level-encryption-profiles, :arglists ([list-field-level-encryption-profiles-request]), :type :var, :members ()} {:name list-invalidations, :arglists ([list-invalidations-request]), :type :var, :members ()} {:name list-public-keys, :arglists ([list-public-keys-request]), :type :var, :members ()} {:name list-streaming-distributions, :arglists ([list-streaming-distributions-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name shutdown, :arglists ([]), :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-cloud-front-origin-access-identity, :arglists ([update-cloud-front-origin-access-identity-request]), :type :var, :members ()} {:name update-distribution, :arglists ([update-distribution-request]), :type :var, :members ()} {:name update-field-level-encryption-config, :arglists ([update-field-level-encryption-config-request]), :type :var, :members ()} {:name update-field-level-encryption-profile, :arglists ([update-field-level-encryption-profile-request]), :type :var, :members ()} {:name update-public-key, :arglists ([update-public-key-request]), :type :var, :members ()} {:name update-streaming-distribution, :arglists ([update-streaming-distribution-request]), :type :var, :members ()} {:name waiters, :arglists ([]), :type :var, :members ()})} {:name amazonica.aws.appstream, :publics ({:name associate-fleet, :arglists ([associate-fleet-request]), :type :var, :members ()} {:name batch-associate-user-stack, :arglists ([batch-associate-user-stack-request]), :type :var, :members ()} {:name batch-disassociate-user-stack, :arglists ([batch-disassociate-user-stack-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name copy-image, :arglists ([copy-image-request]), :type :var, :members ()} {:name create-directory-config, :arglists ([create-directory-config-request]), :type :var, :members ()} {:name create-fleet, :arglists ([create-fleet-request]), :type :var, :members ()} {:name create-image-builder, :arglists ([create-image-builder-request]), :type :var, :members ()} {:name create-image-builder-streaming-url, :arglists ([create-image-builder-streaming-urlrequest]), :type :var, :members ()} {:name create-stack, :arglists ([create-stack-request]), :type :var, :members ()} {:name create-streaming-url, :arglists ([create-streaming-urlrequest]), :type :var, :members ()} {:name create-usage-report-subscription, :arglists ([create-usage-report-subscription-request]), :type :var, :members ()} {:name create-user, :arglists ([create-user-request]), :type :var, :members ()} {:name delete-directory-config, :arglists ([delete-directory-config-request]), :type :var, :members ()} {:name delete-fleet, :arglists ([delete-fleet-request]), :type :var, :members ()} {:name delete-image, :arglists ([delete-image-request]), :type :var, :members ()} {:name delete-image-builder, :arglists ([delete-image-builder-request]), :type :var, :members ()} {:name delete-image-permissions, :arglists ([delete-image-permissions-request]), :type :var, :members ()} {:name delete-stack, :arglists ([delete-stack-request]), :type :var, :members ()} {:name delete-usage-report-subscription, :arglists ([delete-usage-report-subscription-request]), :type :var, :members ()} {:name delete-user, :arglists ([delete-user-request]), :type :var, :members ()} {:name describe-directory-configs, :arglists ([describe-directory-configs-request]), :type :var, :members ()} {:name describe-fleets, :arglists ([describe-fleets-request]), :type :var, :members ()} {:name describe-image-builders, :arglists ([describe-image-builders-request]), :type :var, :members ()} {:name describe-image-permissions, :arglists ([describe-image-permissions-request]), :type :var, :members ()} {:name describe-images, :arglists ([describe-images-request]), :type :var, :members ()} {:name describe-sessions, :arglists ([describe-sessions-request]), :type :var, :members ()} {:name describe-stacks, :arglists ([describe-stacks-request]), :type :var, :members ()} {:name describe-usage-report-subscriptions, :arglists ([describe-usage-report-subscriptions-request]), :type :var, :members ()} {:name describe-user-stack-associations, :arglists ([describe-user-stack-associations-request]), :type :var, :members ()} {:name describe-users, :arglists ([describe-users-request]), :type :var, :members ()} {:name disable-user, :arglists ([disable-user-request]), :type :var, :members ()} {:name disassociate-fleet, :arglists ([disassociate-fleet-request]), :type :var, :members ()} {:name enable-user, :arglists ([enable-user-request]), :type :var, :members ()} {:name expire-session, :arglists ([expire-session-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name list-associated-fleets, :arglists ([list-associated-fleets-request]), :type :var, :members ()} {:name list-associated-stacks, :arglists ([list-associated-stacks-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name shutdown, :arglists ([]), :type :var, :members ()} {:name start-fleet, :arglists ([start-fleet-request]), :type :var, :members ()} {:name start-image-builder, :arglists ([start-image-builder-request]), :type :var, :members ()} {:name stop-fleet, :arglists ([stop-fleet-request]), :type :var, :members ()} {:name stop-image-builder, :arglists ([stop-image-builder-request]), :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-directory-config, :arglists ([update-directory-config-request]), :type :var, :members ()} {:name update-fleet, :arglists ([update-fleet-request]), :type :var, :members ()} {:name update-image-permissions, :arglists ([update-image-permissions-request]), :type :var, :members ()} {:name update-stack, :arglists ([update-stack-request]), :type :var, :members ()} {:name waiters, :arglists ([]), :type :var, :members ()})} {:name amazonica.aws.batch, :publics ({:name cancel-job, :arglists ([cancel-job-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-compute-environment, :arglists ([create-compute-environment-request]), :type :var, :members ()} {:name create-job-queue, :arglists ([create-job-queue-request]), :type :var, :members ()} {:name delete-compute-environment, :arglists ([delete-compute-environment-request]), :type :var, :members ()} {:name delete-job-queue, :arglists ([delete-job-queue-request]), :type :var, :members ()} {:name deregister-job-definition, :arglists ([deregister-job-definition-request]), :type :var, :members ()} {:name describe-compute-environments, :arglists ([describe-compute-environments-request]), :type :var, :members ()} {:name describe-job-definitions, :arglists ([describe-job-definitions-request]), :type :var, :members ()} {:name describe-job-queues, :arglists ([describe-job-queues-request]), :type :var, :members ()} {:name describe-jobs, :arglists ([describe-jobs-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name list-jobs, :arglists ([list-jobs-request]), :type :var, :members ()} {:name register-job-definition, :arglists ([register-job-definition-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name submit-job, :arglists ([submit-job-request]), :type :var, :members ()} {:name terminate-job, :arglists ([terminate-job-request]), :type :var, :members ()} {:name update-compute-environment, :arglists ([update-compute-environment-request]), :type :var, :members ()} {:name update-job-queue, :arglists ([update-job-queue-request]), :type :var, :members ()})} {:name amazonica.aws.resourcegroups, :publics ({:name client-class, :type :var, :members ()} {:name create-group, :arglists ([create-group-request]), :type :var, :members ()} {:name delete-group, :arglists ([delete-group-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-group, :arglists ([get-group-request]), :type :var, :members ()} {:name get-group-query, :arglists ([get-group-query-request]), :type :var, :members ()} {:name get-tags, :arglists ([get-tags-request]), :type :var, :members ()} {:name list-group-resources, :arglists ([list-group-resources-request]), :type :var, :members ()} {:name list-groups, :arglists ([list-groups-request]), :type :var, :members ()} {:name search-resources, :arglists ([search-resources-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name tag, :arglists ([tag-request]), :type :var, :members ()} {:name untag, :arglists ([untag-request]), :type :var, :members ()} {:name update-group, :arglists ([update-group-request]), :type :var, :members ()} {:name update-group-query, :arglists ([update-group-query-request]), :type :var, :members ()})} {:name amazonica.aws.mediastore, :publics ({:name client-class, :type :var, :members ()} {:name create-container, :arglists ([create-container-request]), :type :var, :members ()} {:name delete-container, :arglists ([delete-container-request]), :type :var, :members ()} {:name delete-container-policy, :arglists ([delete-container-policy-request]), :type :var, :members ()} {:name delete-cors-policy, :arglists ([delete-cors-policy-request]), :type :var, :members ()} {:name delete-lifecycle-policy, :arglists ([delete-lifecycle-policy-request]), :type :var, :members ()} {:name describe-container, :arglists ([describe-container-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-container-policy, :arglists ([get-container-policy-request]), :type :var, :members ()} {:name get-cors-policy, :arglists ([get-cors-policy-request]), :type :var, :members ()} {:name get-lifecycle-policy, :arglists ([get-lifecycle-policy-request]), :type :var, :members ()} {:name list-containers, :arglists ([list-containers-request]), :type :var, :members ()} {:name list-tags-for-resource, :arglists ([list-tags-for-resource-request]), :type :var, :members ()} {:name put-container-policy, :arglists ([put-container-policy-request]), :type :var, :members ()} {:name put-cors-policy, :arglists ([put-cors-policy-request]), :type :var, :members ()} {:name put-lifecycle-policy, :arglists ([put-lifecycle-policy-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name start-access-logging, :arglists ([start-access-logging-request]), :type :var, :members ()} {:name stop-access-logging, :arglists ([stop-access-logging-request]), :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()})} {:name amazonica.aws.lightsail, :publics ({:name allocate-static-ip, :arglists ([allocate-static-ip-request]), :type :var, :members ()} {:name attach-disk, :arglists ([attach-disk-request]), :type :var, :members ()} {:name attach-instances-to-load-balancer, :arglists ([attach-instances-to-load-balancer-request]), :type :var, :members ()} {:name attach-load-balancer-tls-certificate, :arglists ([attach-load-balancer-tls-certificate-request]), :type :var, :members ()} {:name attach-static-ip, :arglists ([attach-static-ip-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name close-instance-public-ports, :arglists ([close-instance-public-ports-request]), :type :var, :members ()} {:name copy-snapshot, :arglists ([copy-snapshot-request]), :type :var, :members ()} {:name create-cloud-formation-stack, :arglists ([create-cloud-formation-stack-request]), :type :var, :members ()} {:name create-disk, :arglists ([create-disk-request]), :type :var, :members ()} {:name create-disk-from-snapshot, :arglists ([create-disk-from-snapshot-request]), :type :var, :members ()} {:name create-disk-snapshot, :arglists ([create-disk-snapshot-request]), :type :var, :members ()} {:name create-domain, :arglists ([create-domain-request]), :type :var, :members ()} {:name create-domain-entry, :arglists ([create-domain-entry-request]), :type :var, :members ()} {:name create-instance-snapshot, :arglists ([create-instance-snapshot-request]), :type :var, :members ()} {:name create-instances, :arglists ([create-instances-request]), :type :var, :members ()} {:name create-instances-from-snapshot, :arglists ([create-instances-from-snapshot-request]), :type :var, :members ()} {:name create-key-pair, :arglists ([create-key-pair-request]), :type :var, :members ()} {:name create-load-balancer, :arglists ([create-load-balancer-request]), :type :var, :members ()} {:name create-load-balancer-tls-certificate, :arglists ([create-load-balancer-tls-certificate-request]), :type :var, :members ()} {:name create-relational-database, :arglists ([create-relational-database-request]), :type :var, :members ()} {:name create-relational-database-from-snapshot, :arglists ([create-relational-database-from-snapshot-request]), :type :var, :members ()} {:name create-relational-database-snapshot, :arglists ([create-relational-database-snapshot-request]), :type :var, :members ()} {:name delete-disk, :arglists ([delete-disk-request]), :type :var, :members ()} {:name delete-disk-snapshot, :arglists ([delete-disk-snapshot-request]), :type :var, :members ()} {:name delete-domain, :arglists ([delete-domain-request]), :type :var, :members ()} {:name delete-domain-entry, :arglists ([delete-domain-entry-request]), :type :var, :members ()} {:name delete-instance, :arglists ([delete-instance-request]), :type :var, :members ()} {:name delete-instance-snapshot, :arglists ([delete-instance-snapshot-request]), :type :var, :members ()} {:name delete-key-pair, :arglists ([delete-key-pair-request]), :type :var, :members ()} {:name delete-known-host-keys, :arglists ([delete-known-host-keys-request]), :type :var, :members ()} {:name delete-load-balancer, :arglists ([delete-load-balancer-request]), :type :var, :members ()} {:name delete-load-balancer-tls-certificate, :arglists ([delete-load-balancer-tls-certificate-request]), :type :var, :members ()} {:name delete-relational-database, :arglists ([delete-relational-database-request]), :type :var, :members ()} {:name delete-relational-database-snapshot, :arglists ([delete-relational-database-snapshot-request]), :type :var, :members ()} {:name detach-disk, :arglists ([detach-disk-request]), :type :var, :members ()} {:name detach-instances-from-load-balancer, :arglists ([detach-instances-from-load-balancer-request]), :type :var, :members ()} {:name detach-static-ip, :arglists ([detach-static-ip-request]), :type :var, :members ()} {:name download-default-key-pair, :arglists ([download-default-key-pair-request]), :type :var, :members ()} {:name export-snapshot, :arglists ([export-snapshot-request]), :type :var, :members ()} {:name get-active-names, :arglists ([get-active-names-request]), :type :var, :members ()} {:name get-blueprints, :arglists ([get-blueprints-request]), :type :var, :members ()} {:name get-bundles, :arglists ([get-bundles-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-cloud-formation-stack-records, :arglists ([get-cloud-formation-stack-records-request]), :type :var, :members ()} {:name get-disk, :arglists ([get-disk-request]), :type :var, :members ()} {:name get-disk-snapshot, :arglists ([get-disk-snapshot-request]), :type :var, :members ()} {:name get-disk-snapshots, :arglists ([get-disk-snapshots-request]), :type :var, :members ()} {:name get-disks, :arglists ([get-disks-request]), :type :var, :members ()} {:name get-domain, :arglists ([get-domain-request]), :type :var, :members ()} {:name get-domains, :arglists ([get-domains-request]), :type :var, :members ()} {:name get-export-snapshot-records, :arglists ([get-export-snapshot-records-request]), :type :var, :members ()} {:name get-instance, :arglists ([get-instance-request]), :type :var, :members ()} {:name get-instance-access-details, :arglists ([get-instance-access-details-request]), :type :var, :members ()} {:name get-instance-metric-data, :arglists ([get-instance-metric-data-request]), :type :var, :members ()} {:name get-instance-port-states, :arglists ([get-instance-port-states-request]), :type :var, :members ()} {:name get-instance-snapshot, :arglists ([get-instance-snapshot-request]), :type :var, :members ()} {:name get-instance-snapshots, :arglists ([get-instance-snapshots-request]), :type :var, :members ()} {:name get-instance-state, :arglists ([get-instance-state-request]), :type :var, :members ()} {:name get-instances, :arglists ([get-instances-request]), :type :var, :members ()} {:name get-key-pair, :arglists ([get-key-pair-request]), :type :var, :members ()} {:name get-key-pairs, :arglists ([get-key-pairs-request]), :type :var, :members ()} {:name get-load-balancer, :arglists ([get-load-balancer-request]), :type :var, :members ()} {:name get-load-balancer-metric-data, :arglists ([get-load-balancer-metric-data-request]), :type :var, :members ()} {:name get-load-balancer-tls-certificates, :arglists ([get-load-balancer-tls-certificates-request]), :type :var, :members ()} {:name get-load-balancers, :arglists ([get-load-balancers-request]), :type :var, :members ()} {:name get-operation, :arglists ([get-operation-request]), :type :var, :members ()} {:name get-operations, :arglists ([get-operations-request]), :type :var, :members ()} {:name get-operations-for-resource, :arglists ([get-operations-for-resource-request]), :type :var, :members ()} {:name get-regions, :arglists ([get-regions-request]), :type :var, :members ()} {:name get-relational-database, :arglists ([get-relational-database-request]), :type :var, :members ()} {:name get-relational-database-blueprints, :arglists ([get-relational-database-blueprints-request]), :type :var, :members ()} {:name get-relational-database-bundles, :arglists ([get-relational-database-bundles-request]), :type :var, :members ()} {:name get-relational-database-events, :arglists ([get-relational-database-events-request]), :type :var, :members ()} {:name get-relational-database-log-events, :arglists ([get-relational-database-log-events-request]), :type :var, :members ()} {:name get-relational-database-log-streams, :arglists ([get-relational-database-log-streams-request]), :type :var, :members ()} {:name get-relational-database-master-user-password, :arglists ([get-relational-database-master-user-password-request]), :type :var, :members ()} {:name get-relational-database-metric-data, :arglists ([get-relational-database-metric-data-request]), :type :var, :members ()} {:name get-relational-database-parameters, :arglists ([get-relational-database-parameters-request]), :type :var, :members ()} {:name get-relational-database-snapshot, :arglists ([get-relational-database-snapshot-request]), :type :var, :members ()} {:name get-relational-database-snapshots, :arglists ([get-relational-database-snapshots-request]), :type :var, :members ()} {:name get-relational-databases, :arglists ([get-relational-databases-request]), :type :var, :members ()} {:name get-static-ip, :arglists ([get-static-ip-request]), :type :var, :members ()} {:name get-static-ips, :arglists ([get-static-ips-request]), :type :var, :members ()} {:name import-key-pair, :arglists ([import-key-pair-request]), :type :var, :members ()} {:name is-vpc-peered, :arglists ([is-vpc-peered-request]), :type :var, :members ()} {:name open-instance-public-ports, :arglists ([open-instance-public-ports-request]), :type :var, :members ()} {:name peer-vpc, :arglists ([peer-vpc-request]), :type :var, :members ()} {:name put-instance-public-ports, :arglists ([put-instance-public-ports-request]), :type :var, :members ()} {:name reboot-instance, :arglists ([reboot-instance-request]), :type :var, :members ()} {:name reboot-relational-database, :arglists ([reboot-relational-database-request]), :type :var, :members ()} {:name release-static-ip, :arglists ([release-static-ip-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name start-instance, :arglists ([start-instance-request]), :type :var, :members ()} {:name start-relational-database, :arglists ([start-relational-database-request]), :type :var, :members ()} {:name stop-instance, :arglists ([stop-instance-request]), :type :var, :members ()} {:name stop-relational-database, :arglists ([stop-relational-database-request]), :type :var, :members ()} {:name tag-resource, :arglists ([tag-resource-request]), :type :var, :members ()} {:name unpeer-vpc, :arglists ([unpeer-vpc-request]), :type :var, :members ()} {:name untag-resource, :arglists ([untag-resource-request]), :type :var, :members ()} {:name update-domain-entry, :arglists ([update-domain-entry-request]), :type :var, :members ()} {:name update-load-balancer-attribute, :arglists ([update-load-balancer-attribute-request]), :type :var, :members ()} {:name update-relational-database, :arglists ([update-relational-database-request]), :type :var, :members ()} {:name update-relational-database-parameters, :arglists ([update-relational-database-parameters-request]), :type :var, :members ()})} {:name amazonica.aws.costexplorer, :publics ({:name client-class, :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name get-cost-and-usage, :arglists ([get-cost-and-usage-request]), :type :var, :members ()} {:name get-cost-forecast, :arglists ([get-cost-forecast-request]), :type :var, :members ()} {:name get-dimension-values, :arglists ([get-dimension-values-request]), :type :var, :members ()} {:name get-reservation-coverage, :arglists ([get-reservation-coverage-request]), :type :var, :members ()} {:name get-reservation-purchase-recommendation, :arglists ([get-reservation-purchase-recommendation-request]), :type :var, :members ()} {:name get-reservation-utilization, :arglists ([get-reservation-utilization-request]), :type :var, :members ()} {:name get-rightsizing-recommendation, :arglists ([get-rightsizing-recommendation-request]), :type :var, :members ()} {:name get-tags, :arglists ([get-tags-request]), :type :var, :members ()} {:name get-usage-forecast, :arglists ([get-usage-forecast-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()})} {:name amazonica.aws.workspaces, :publics ({:name associate-ip-groups, :arglists ([associate-ip-groups-request]), :type :var, :members ()} {:name authorize-ip-rules, :arglists ([authorize-ip-rules-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name copy-workspace-image, :arglists ([copy-workspace-image-request]), :type :var, :members ()} {:name create-ip-group, :arglists ([create-ip-group-request]), :type :var, :members ()} {:name create-tags, :arglists ([create-tags-request]), :type :var, :members ()} {:name create-workspaces, :arglists ([create-workspaces-request]), :type :var, :members ()} {:name delete-ip-group, :arglists ([delete-ip-group-request]), :type :var, :members ()} {:name delete-tags, :arglists ([delete-tags-request]), :type :var, :members ()} {:name delete-workspace-image, :arglists ([delete-workspace-image-request]), :type :var, :members ()} {:name describe-account, :arglists ([describe-account-request]), :type :var, :members ()} {:name describe-account-modifications, :arglists ([describe-account-modifications-request]), :type :var, :members ()} {:name describe-client-properties, :arglists ([describe-client-properties-request]), :type :var, :members ()} {:name describe-ip-groups, :arglists ([describe-ip-groups-request]), :type :var, :members ()} {:name describe-tags, :arglists ([describe-tags-request]), :type :var, :members ()} {:name describe-workspace-bundles, :arglists ([] [describe-workspace-bundles-request]), :type :var, :members ()} {:name describe-workspace-directories, :arglists ([] [describe-workspace-directories-request]), :type :var, :members ()} {:name describe-workspace-images, :arglists ([describe-workspace-images-request]), :type :var, :members ()} {:name describe-workspaces, :arglists ([] [describe-workspaces-request]), :type :var, :members ()} {:name describe-workspaces-connection-status, :arglists ([describe-workspaces-connection-status-request]), :type :var, :members ()} {:name disassociate-ip-groups, :arglists ([disassociate-ip-groups-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name import-workspace-image, :arglists ([import-workspace-image-request]), :type :var, :members ()} {:name list-available-management-cidr-ranges, :arglists ([list-available-management-cidr-ranges-request]), :type :var, :members ()} {:name modify-account, :arglists ([modify-account-request]), :type :var, :members ()} {:name modify-client-properties, :arglists ([modify-client-properties-request]), :type :var, :members ()} {:name modify-workspace-properties, :arglists ([modify-workspace-properties-request]), :type :var, :members ()} {:name modify-workspace-state, :arglists ([modify-workspace-state-request]), :type :var, :members ()} {:name reboot-workspaces, :arglists ([reboot-workspaces-request]), :type :var, :members ()} {:name rebuild-workspaces, :arglists ([rebuild-workspaces-request]), :type :var, :members ()} {:name revoke-ip-rules, :arglists ([revoke-ip-rules-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()} {:name start-workspaces, :arglists ([start-workspaces-request]), :type :var, :members ()} {:name stop-workspaces, :arglists ([stop-workspaces-request]), :type :var, :members ()} {:name terminate-workspaces, :arglists ([terminate-workspaces-request]), :type :var, :members ()} {:name update-rules-of-ip-group, :arglists ([update-rules-of-ip-group-request]), :type :var, :members ()})} {:name amazonica.aws.support, :publics ({:name add-attachments-to-set, :arglists ([add-attachments-to-set-request]), :type :var, :members ()} {:name add-communication-to-case, :arglists ([add-communication-to-case-request]), :type :var, :members ()} {:name client-class, :type :var, :members ()} {:name create-case, :arglists ([create-case-request]), :type :var, :members ()} {:name describe-attachment, :arglists ([describe-attachment-request]), :type :var, :members ()} {:name describe-cases, :arglists ([] [describe-cases-request]), :type :var, :members ()} {:name describe-communications, :arglists ([describe-communications-request]), :type :var, :members ()} {:name describe-services, :arglists ([] [describe-services-request]), :type :var, :members ()} {:name describe-severity-levels, :arglists ([] [describe-severity-levels-request]), :type :var, :members ()} {:name describe-trusted-advisor-check-refresh-statuses, :arglists ([describe-trusted-advisor-check-refresh-statuses-request]), :type :var, :members ()} {:name describe-trusted-advisor-check-result, :arglists ([describe-trusted-advisor-check-result-request]), :type :var, :members ()} {:name describe-trusted-advisor-check-summaries, :arglists ([describe-trusted-advisor-check-summaries-request]), :type :var, :members ()} {:name describe-trusted-advisor-checks, :arglists ([describe-trusted-advisor-checks-request]), :type :var, :members ()} {:name get-cached-response-metadata, :arglists ([amazon-web-service-request]), :type :var, :members ()} {:name refresh-trusted-advisor-check, :arglists ([refresh-trusted-advisor-check-request]), :type :var, :members ()} {:name resolve-case, :arglists ([] [resolve-case-request]), :type :var, :members ()} {:name show-functions, :type :var, :members ()})}]}, :pom-str "<?xml version=\"1.0\" encoding=\"UTF-8\"?><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>amazonica</groupId>\n  <artifactId>amazonica</artifactId>\n  <packaging>jar</packaging>\n  <version>0.3.146</version>\n  <name>amazonica</name>\n  <description>A comprehensive Clojure client for the entire Amazon AWS api.</description>\n  <url>https://github.com/mcohen01/amazonica</url>\n  <licenses>\n    <license>\n      <name>Eclipse Public License</name>\n      <url>http://www.eclipse.org/legal/epl-v10.html</url>\n    </license>\n  </licenses>\n  <scm>\n    <connection>scm:git:git://github.com/mcohen01/amazonica.git</connection>\n    <developerConnection>scm:git:ssh://git@github.com/mcohen01/amazonica.git</developerConnection>\n    <tag>a73deea4a5cc720d8326f1641ccfe36a642f9f4c\n</tag>\n    <url>https://github.com/mcohen01/amazonica</url>\n  </scm>\n  <build>\n    <sourceDirectory>src</sourceDirectory>\n    <testSourceDirectory>test</testSourceDirectory>\n    <resources>\n      <resource>\n        <directory>resources</directory>\n      </resource>\n    </resources>\n    <testResources>\n      <testResource>\n        <directory>resources</directory>\n      </testResource>\n    </testResources>\n    <directory>target</directory>\n    <outputDirectory>target/classes</outputDirectory>\n    <plugins>\n      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>build-helper-maven-plugin</artifactId>\n        <version>1.7</version>\n        <executions>\n          <execution>\n            <id>add-source</id>\n            <phase>generate-sources</phase>\n            <goals>\n              <goal>add-source</goal>\n            </goals>\n            <configuration>\n              <sources>\n                <source>src/main/java</source>\n              </sources>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n  <repositories>\n    <repository>\n      <id>central</id>\n      <url>https://repo1.maven.org/maven2/</url>\n      <snapshots>\n        <enabled>false</enabled>\n      </snapshots>\n      <releases>\n        <enabled>true</enabled>\n      </releases>\n    </repository>\n    <repository>\n      <id>clojars</id>\n      <url>https://clojars.org/repo/</url>\n      <snapshots>\n        <enabled>true</enabled>\n      </snapshots>\n      <releases>\n        <enabled>true</enabled>\n      </releases>\n    </repository>\n  </repositories>\n  <dependencies>\n    <dependency>\n      <groupId>org.clojure</groupId>\n      <artifactId>clojure</artifactId>\n      <version>1.8.0</version>\n    </dependency>\n    <dependency>\n      <groupId>org.clojure</groupId>\n      <artifactId>algo.generic</artifactId>\n      <version>0.1.2</version>\n    </dependency>\n    <dependency>\n      <groupId>com.amazonaws</groupId>\n      <artifactId>aws-java-sdk</artifactId>\n      <version>1.11.602</version>\n      <exclusions>\n        <exclusion>\n          <groupId>joda-time</groupId>\n          <artifactId>joda-time</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n    <dependency>\n      <groupId>com.amazonaws</groupId>\n      <artifactId>amazon-kinesis-client</artifactId>\n      <version>1.9.3</version>\n      <exclusions>\n        <exclusion>\n          <groupId>joda-time</groupId>\n          <artifactId>joda-time</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n    <dependency>\n      <groupId>com.amazonaws</groupId>\n      <artifactId>dynamodb-streams-kinesis-adapter</artifactId>\n      <version>1.2.1</version>\n      <exclusions>\n        <exclusion>\n          <groupId>com.amazonaws</groupId>\n          <artifactId>amazon-kinesis-client</artifactId>\n        </exclusion>\n        <exclusion>\n          <groupId>com.amazonaws</groupId>\n          <artifactId>aws-java-sdk-cloudwatch</artifactId>\n        </exclusion>\n        <exclusion>\n          <groupId>com.amazonaws</groupId>\n          <artifactId>aws-java-sdk-dynamodb</artifactId>\n        </exclusion>\n        <exclusion>\n          <groupId>com.amazonaws</groupId>\n          <artifactId>aws-java-sdk-kinesis</artifactId>\n        </exclusion>\n        <exclusion>\n          <groupId>joda-time</groupId>\n          <artifactId>joda-time</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n    <dependency>\n      <groupId>joda-time</groupId>\n      <artifactId>joda-time</artifactId>\n      <version>2.9.6</version>\n    </dependency>\n    <dependency>\n      <groupId>robert</groupId>\n      <artifactId>hooke</artifactId>\n      <version>1.3.0</version>\n    </dependency>\n    <dependency>\n      <groupId>com.taoensso</groupId>\n      <artifactId>nippy</artifactId>\n      <version>2.12.2</version>\n    </dependency>\n  </dependencies>\n</project>\n\n<!-- This file was autogenerated by Leiningen.\n  Please do not edit it directly; instead edit project.clj and regenerate it.\n  It should not be considered canonical data. For more information see\n  https://github.com/technomancy/leiningen -->\n"}