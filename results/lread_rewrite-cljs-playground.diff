found results/old/analysis-out/cljdoc-edn/lread/rewrite-cljs-playground/1.0.0-alpha/cljdoc.edn
found results/new/analysis-out/cljdoc-edn/lread/rewrite-cljs-playground/1.0.0-alpha/cljdoc.edn
[1;31m{[0m[1;33m:analysis[0m [1;31m{[0m[1;35m"clj"[0m [1;31m[[0m[1;31m{[0m[1;33m:doc[0m [1;35m"APIs to navigate and update Clojure/ClojureScript/EDN source code.\n\nStart with the [[rewrite-clj.parser]] or [[rewrite-clj.zip]] to ingest your source code,\nthen use the [[rewrite-clj.zip]] to navigate and/or change it. [[rewrite-clj.node]]\nwill help you to work with nodes in the zipper tree.\n\n[[rewrite-clj.paredit]] first appeared in the ClojureScript only version of\nrewrite-clj and supports structured editing of the zipper tree."[0m,
[1;33m                    :name[0m rewrite-clj,
[1;33m                    :publics[0m [1;31m()[0m[1;31m}[0m
[1;31m                   {[0m[1;33m:doc[0m [1;35m"Create and evaluate nodes.\n\nAll nodes represent Clojure/ClojureScript/EDN."[0m,
[1;33m                    :name[0m rewrite-clj.node,
[1;33m                    :publics[0m [1;31m([0m[1;31m{[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mnode[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return all children converted to forms.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/protocols.cljc"[0m,
[1;33m                               :line[0m [36m70[0m,
[1;33m                               :name[0m child-sexprs,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mnode[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Returns child nodes for `node`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node.cljc"[0m,
[1;33m                               :line[0m [36m27[0m,
[1;33m                               :name[0m children,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mform[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Coerce `form` to node.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node.cljc"[0m,
[1;33m                               :line[0m [36m27[0m,
[1;33m                               :name[0m coerce,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0ms[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create comma node of string `s`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/whitespace.cljc"[0m,
[1;33m                               :line[0m [36m86[0m,
[1;33m                               :name[0m comma-node,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mnodes[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Interleave `nodes` with `\", \"` nodes.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/whitespace.cljc"[0m,
[1;33m                               :line[0m [36m130[0m,
[1;33m                               :name[0m comma-separated,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mnode[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Returns true if `node` represents a comma.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/whitespace.cljc"[0m,
[1;33m                               :line[0m [36m165[0m,
[1;33m                               :name[0m comma?,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0ms[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create node representing a comment with text `s`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/comment.cljc"[0m,
[1;33m                               :line[0m [36m25[0m,
[1;33m                               :name[0m comment-node,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mnode[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Returns true if `node` is a comment.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/comment.cljc"[0m,
[1;33m                               :line[0m [36m31[0m,
[1;33m                               :name[0m comment?,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mchildren[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create node representing the dereferencing of a form with `children`. (`@...`)\nTakes either a seq of nodes or a single one."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/reader_macro.cljc"[0m,
[1;33m                               :line[0m [36m130[0m,
[1;33m                               :name[0m deref-node,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mchildren[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create node representing an inline evaluation with `children`. (`#=...`)\nTakes either a seq of nodes or a single one."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/reader_macro.cljc"[0m,
[1;33m                               :line[0m [36m112[0m,
[1;33m                               :name[0m eval-node,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mchildren[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create node representing an anonymous function with `children`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/fn.cljc"[0m,
[1;33m                               :line[0m [36m94[0m,
[1;33m                               :name[0m fn-node,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mchildren[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create top-level node wrapping multiple `children`\n(equivalent to an implicit `do` on the top-level)."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/forms.cljc"[0m,
[1;33m                               :line[0m [36m40[0m,
[1;33m                               :name[0m forms-node,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mnode[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Returns true if `node` can have children.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node.cljc"[0m,
[1;33m                               :line[0m [36m27[0m,
[1;33m                               :name[0m inner?,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mvalue[1;31m][0m [1;31m[[0mvalue base[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create node representing an integer `value` in `base`.\n\n`base` defaults to 10."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/integer.cljc"[0m,
[1;33m                               :line[0m [36m34[0m,
[1;33m                               :name[0m integer-node,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mk & [1;31m[[0mnamespaced?[1;31m][0m[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create node representing a keyword `k`. If `namespaced?` is `true`\na keyword Ã  la `::x` or `::ns/x` (i.e. namespaced/aliased) is generated."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/keyword.cljc"[0m,
[1;33m                               :line[0m [36m40[0m,
[1;33m                               :name[0m keyword-node,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mnode[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Returns number of characters before children for `node`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node.cljc"[0m,
[1;33m                               :line[0m [36m27[0m,
[1;33m                               :name[0m leader-length,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mnode[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return number of characters for the string version of `node`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node.cljc"[0m,
[1;33m                               :line[0m [36m27[0m,
[1;33m                               :name[0m length,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mnodes[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Interleave `nodes` with newline nodes.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/whitespace.cljc"[0m,
[1;33m                               :line[0m [36m138[0m,
[1;33m                               :name[0m line-separated,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mnode[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Returns true if `node` represents linebreak(s).\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/whitespace.cljc"[0m,
[1;33m                               :line[0m [36m160[0m,
[1;33m                               :name[0m linebreak?,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mchildren[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create a node representing a list with `children`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/seq.cljc"[0m,
[1;33m                               :line[0m [36m42[0m,
[1;33m                               :name[0m list-node,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mchildren[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create a node representing an map with `children`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/seq.cljc"[0m,
[1;33m                               :line[0m [36m57[0m,
[1;33m                               :name[0m map-node,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mchildren[1;31m][0m [1;31m[[0mmetadata data[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create node representing a form `data` and its `metadata`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/meta.cljc"[0m,
[1;33m                               :line[0m [36m39[0m,
[1;33m                               :name[0m meta-node,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mchildren[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create a node representing a namespaced map. There are 3 types of namespaced maps:\n\n 1. prefix namespaced map\n The prefix is a keyword which specifies to a namespace.\n Example: `#:my.name.space{:a 1}`\n\n 2. auto-resolve alias namespaced map\n The prefix is an auto-resolve keyword specifies a namespace alias.\n Example: `#::ns-alias{:b 3}`\n\n 3. auto-resolve namespaced map\n The prefix is `::` which specifies the current namespace.\n Example: `#::{:c 4}`\n\nFirst child is the prefix, followed by optional whitespace then map node.\nTODO: this still seems hacky to me.\nPrefix must be a token-node with a keyword value. Use (keyword ':') for auto-resolve."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/namespaced_map.cljc"[0m,
[1;33m                               :line[0m [36m80[0m,
[1;33m                               :name[0m namespaced-map-node,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0ms[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create newline node of string `s`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/whitespace.cljc"[0m,
[1;33m                               :line[0m [36m92[0m,
[1;33m                               :name[0m newline-node,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mn[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create node representing `n` newline characters.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/whitespace.cljc"[0m,
[1;33m                               :line[0m [36m124[0m,
[1;33m                               :name[0m newlines,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mnode[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return true if `node` cannot be converted to an s-expression element.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node.cljc"[0m,
[1;33m                               :line[0m [36m27[0m,
[1;33m                               :name[0m printable-only?,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mchildren[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create node representing a quoted form with `children`.\nTakes either a seq of nodes or a single one."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/quote.cljc"[0m,
[1;33m                               :line[0m [36m39[0m,
[1;33m                               :name[0m quote-node,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mchildren[1;31m][0m [1;31m[[0mmetadata data[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create node representing a form `data` and its `metadata` using the\n`#^` prefix."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/meta.cljc"[0m,
[1;33m                               :line[0m [36m47[0m,
[1;33m                               :name[0m raw-meta-node,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mchildren[1;31m][0m [1;31m[[0mmacro-node form-node[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create node representing a reader macro with `children`. (`#... ...`)\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/reader_macro.cljc"[0m,
[1;33m                               :line[0m [36m123[0m,
[1;33m                               :name[0m reader-macro-node,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mpattern-string[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create node representing a regex with `pattern-string`\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/regex.cljc"[0m,
[1;33m                               :line[0m [36m19[0m,
[1;33m                               :name[0m regex-node,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mnode children[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Returns `node` replacing current children with `children`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node.cljc"[0m,
[1;33m                               :line[0m [36m27[0m,
[1;33m                               :name[0m replace-children,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mchildren[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create a node representing a set with `children`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/seq.cljc"[0m,
[1;33m                               :line[0m [36m52[0m,
[1;33m                               :name[0m set-node,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mnode[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return `node` converted to form.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node.cljc"[0m,
[1;33m                               :line[0m [36m27[0m,
[1;33m                               :name[0m sexpr,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mnodes[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return forms for `nodes`. Nodes that do not represent s-expression are skipped.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/protocols.cljc"[0m,
[1;33m                               :line[0m [36m30[0m,
[1;33m                               :name[0m sexprs,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mn[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create node representing `n` spaces.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/whitespace.cljc"[0m,
[1;33m                               :line[0m [36m119[0m,
[1;33m                               :name[0m spaces,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mnode[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return the string version of `node`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node.cljc"[0m,
[1;33m                               :line[0m [36m27[0m,
[1;33m                               :name[0m string,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mlines[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create node representing a string value of `lines`.\n`lines` can be a seq of strings or a single one."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/stringz.cljc"[0m,
[1;33m                               :line[0m [36m42[0m,
[1;33m                               :name[0m string-node,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mchildren[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create node representing a syntax-quoted form with `children`.\nTakes either a seq of nodes or a single one."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/quote.cljc"[0m,
[1;33m                               :line[0m [36m49[0m,
[1;33m                               :name[0m syntax-quote-node,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mnode[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Returns keyword representing type of `node`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node.cljc"[0m,
[1;33m                               :line[0m [36m27[0m,
[1;33m                               :name[0m tag,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mvalue[1;31m][0m [1;31m[[0mvalue string-value[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create node for an unspecified token of `value`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/token.cljc"[0m,
[1;33m                               :line[0m [36m22[0m,
[1;33m                               :name[0m token-node,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mchildren[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create node representing an uneval `#_` form with `children`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/uneval.cljc"[0m,
[1;33m                               :line[0m [36m34[0m,
[1;33m                               :name[0m uneval-node,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mchildren[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create node representing an unquoted form with `children`. (`~...`)\nTakes either a seq of nodes or a single one."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/quote.cljc"[0m,
[1;33m                               :line[0m [36m59[0m,
[1;33m                               :name[0m unquote-node,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mchildren[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create node representing an unquote-spliced form with `children`. (`~@...`)\nTakes either a seq of nodes or a single one."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/quote.cljc"[0m,
[1;33m                               :line[0m [36m69[0m,
[1;33m                               :name[0m unquote-splicing-node,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mnode[1;31m][0m[1;31m)[0m,
[1;33m                               :deprecated[0m [1;35m"0.4.0"[0m,
[1;33m                               :doc[0m [1;35m"DEPRECATED: Get first child as a pair of tag/sexpr (if inner node),\nor just the node's own sexpr. (use explicit analysis of `children`\n`child-sexprs` instead) "[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node.cljc"[0m,
[1;33m                               :line[0m [36m119[0m,
[1;33m                               :name[0m value,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mchildren[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create node representing a var with `children`.\nTakes either a seq of nodes or a single one."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/reader_macro.cljc"[0m,
[1;33m                               :line[0m [36m104[0m,
[1;33m                               :name[0m var-node,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mchildren[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create a node representing a vector with `children`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/seq.cljc"[0m,
[1;33m                               :line[0m [36m47[0m,
[1;33m                               :name[0m vector-node,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0ms[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create whitespace node of string `s`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/whitespace.cljc"[0m,
[1;33m                               :line[0m [36m80[0m,
[1;33m                               :name[0m whitespace-node,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0ms[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Convert string `s` of whitespace to whitespace/newline nodes.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/whitespace.cljc"[0m,
[1;33m                               :line[0m [36m104[0m,
[1;33m                               :name[0m whitespace-nodes,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mnode[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return true when `node` represents whitespace or comment.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node.cljc"[0m,
[1;33m                               :line[0m [36m111[0m,
[1;33m                               :name[0m whitespace-or-comment?,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mnode[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Returns true if `node represents whitespace.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/node/whitespace.cljc"[0m,
[1;33m                               :line[0m [36m151[0m,
[1;33m                               :name[0m whitespace?,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m[1;31m)[0m[1;31m}[0m
[1;31m                   {[0m[1;33m:doc[0m [1;35m"Paredit zipper operations for Clojure/ClojureScript/EDN.\n\nYou might find inspiration from examples here: http://pub.gajendra.net/src/paredit-refcard.pdf"[0m,
[1;33m                    :name[0m rewrite-clj.paredit,
[1;33m                    :publics[0m [1;31m([0m[1;31m{[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Push out the leftmost node of the current S-expression into outer left form\n\n- `[1 2 [3 |4] 5] => [1 2 3 [|4] 5]`"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                               :line[0m [36m339[0m,
[1;33m                               :name[0m barf-backward,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Push out the rightmost node of the current S-expression into outer right form\n\n- `[1 2 [|3 4] 5] => [1 2 [|3] 4 5]`"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                               :line[0m [36m315[0m,
[1;33m                               :name[0m barf-forward,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Join S-expression to the left and right of current loc. Also works for strings.\n\n- `[[1 2] |[3 4]] => [[1 2 3 4]]`\n- `[\"Hello \" | \"World\"] => [\"Hello World\"]"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                               :line[0m [36m499[0m,
[1;33m                               :name[0m join,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Kill all sibling nodes to the right of the current node in `zloc`.\n\n- [1 2| 3 4] => [1 2|]"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                               :line[0m [36m82[0m,
[1;33m                               :name[0m kill,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc pos[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"In string and comment aware kill\n\nPerform kill for given position `pos` Like [[kill]], but:\n\n- if inside string kills to end of string and stops there\n- If inside comment kills to end of line (not including linebreak!)\n\n`pos` should provide `{:row :col }` which are relative to the start of the given form the zipper represents\n`zloc` must be positioned at a node previous (given depth first) to the node at given pos"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                               :line[0m [36m127[0m,
[1;33m                               :name[0m kill-at-pos,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc pos[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"In string and comment aware kill for one node/word at `pos` in `zloc`.\n\n- `(+ |100 100) => (+ |100)`\n- `(for |(bar do)) => (foo)`\n- `\"|hello world\" => \"| world\"`\n- ` ; |hello world => ;  |world`"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                               :line[0m [36m196[0m,
[1;33m                               :name[0m kill-one-at-pos,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Move node at current location to the position of previous location given a depth first traversal\n\n  -  `(+ 1 (+ 2 |3) 4) => (+ 1 (+ |3 2) 4)`\n  - `(+ 1 (+ 2 3) |4) => (+ 1 (+ 2 3 |4))`\n\nreturns zloc after move or given zloc if a move isn't possible"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                               :line[0m [36m528[0m,
[1;33m                               :name[0m move-to-prev,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Delete siblings and raise node at zloc one level up\n\n- `[1 [2 |3 4]] => [1 |3]`"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                               :line[0m [36m517[0m,
[1;33m                               :name[0m raise,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Pull in prev left outer node (if none at first level, tries next etc) into\ncurrent S-expression\n\n- `[1 2 [|3] 4 5] => [1 [2 |3] 4 5]`"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                               :line[0m [36m273[0m,
[1;33m                               :name[0m slurp-backward,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Pull in all left outer-nodes into current S-expression, but only the ones at the same level\nas the the first one.\n\n- `[1 2 [|3] 4 5] => [[1 2 |3] 4 5]`"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                               :line[0m [36m300[0m,
[1;33m                               :name[0m slurp-backward-fully,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Pull in next right outer node (if none at first level, tries next etc) into\ncurrent S-expression\n\n- `[1 2 [|3] 4 5] => [1 2 [|3 4] 5]`"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                               :line[0m [36m235[0m,
[1;33m                               :name[0m slurp-forward,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Pull in all right outer-nodes into current S-expression, but only the ones at the same level\nas the the first one.\n\n- `[1 2 [|3] 4 5] => [1 2 [|3 4 5]]`"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                               :line[0m [36m258[0m,
[1;33m                               :name[0m slurp-forward-fully,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:doc[0m [1;35m"See rewrite-clj.zip/splice\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                               :line[0m [36m385[0m,
[1;33m                               :name[0m splice,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Remove left siblings of current given node in S-Expression and unwrap remaining into enclosing S-expression\n\n- `(foo (let ((x 5)) |(sqrt n)) bar) => (foo (sqrt n) bar)`"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                               :line[0m [36m400[0m,
[1;33m                               :name[0m splice-killing-backward,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Remove current given node and its right siblings in S-Expression and unwrap remaining into enclosing S-expression\n\n- `(a (b c |d e) f) => (a b |c f)`"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                               :line[0m [36m407[0m,
[1;33m                               :name[0m splice-killing-forward,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Split current s-sexpression in two at given node `zloc`\n\n-  `[1 2 |3 4 5] => [1 2 3] [4 5]`"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                               :line[0m [36m419[0m,
[1;33m                               :name[0m split,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc pos[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"In string aware split\n\nPerform split at given position `pos` Like split, but:\n\n- if inside string splits string into two strings\n\n`pos` should provide `{:row :col }` which are relative to the start of the given form the zipper represents\n`zloc` must be positioned at a node previous (given depth first) to the node at given pos"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                               :line[0m [36m459[0m,
[1;33m                               :name[0m split-at-pos,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc t[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Wrap current node with a given type `t` (:vector, :list, :set, :map :fn)\n\n- `|123 => [|123] ; given :vector`\n- `|[1 [2]] => [|[1 [2]]]`"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                               :line[0m [36m361[0m,
[1;33m                               :name[0m wrap-around,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc t[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create a new seq node of type `t` left of `zloc` then slurp fully into the new node\n\n- `[1 |2 3 4] => [1 [|2 3 4]]`"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                               :line[0m [36m375[0m,
[1;33m                               :name[0m wrap-fully-forward-slurp,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m[1;31m)[0m[1;31m}[0m
[1;31m                   {[0m[1;33m:doc[0m [1;35m"Parse Clojure/ClojureScript/EDN source code to nodes.\n\nAfter parsing, the typical next step is [[rewrite-clj.zip/edn]] to create zipper.\n\nAlternatively consider parsing and zipping in one step from [[rewrite-clj.zip/of-string]] or [[rewrite-clj.zip/of-file]]."[0m,
[1;33m                    :name[0m rewrite-clj.parser,
[1;33m                    :publics[0m [1;31m([0m[1;31m{[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mf[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Parse first form from the given file.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/parser.cljc"[0m,
[1;33m                               :line[0m [36m41[0m,
[1;33m                               :name[0m parse-file,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mf[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Parse all forms from the given file.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/parser.cljc"[0m,
[1;33m                               :line[0m [36m49[0m,
[1;33m                               :name[0m parse-file-all,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0ms[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Parse first form in the given string.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/parser.cljc"[0m,
[1;33m                               :line[0m [36m30[0m,
[1;33m                               :name[0m parse-string,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0ms[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Parse all forms in the given string.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/parser.cljc"[0m,
[1;33m                               :line[0m [36m35[0m,
[1;33m                               :name[0m parse-string-all,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m[1;31m)[0m[1;31m}[0m
[1;31m                   {[0m[1;33m:doc[0m [1;35m"A rich API for navigating and updating Clojure/ClojureScripti/EDN source code via a zipper tree.\n\nThe zipper holds a tree of nodes representing source code. It also holds your current location while navigating\nthrough the tree and any pending changes you have made. Changes are applied back into the tree\nwhen invoking root functions.\n\nAlthough they are preserved, whitespace and comment nodes are normally skipped when navigating through the tree.\nThere are times when you will want to include whitespace and comment nodes, and as you see below, provisions are\navailable to do so.\n\nIt is good to remember that while some function names convey mutation, we are never changing anything, we are\ninstead returning modified copies.\n\nSome conventions in the code and docstrings:\n- `zloc` is the used as the argument name for our zipper\n- \"current node in `zloc`\" is shorthand for: node at current location in zipper `zloc`\n\nBecause this API contains many functions, we offer the following categorized listing:\n\n**Create a zipper**\n[[edn]]\n[[edn*]]\n[[of-string]]\n[[of-file]]\n\n**Move**\n[[left]]\n[[right]]\n[[up]]\n[[down]]\n[[prev]]\n[[next]]\n[[leftmost]]\n[[rightmost]]\n\n**Move without skipping whitespace and comments**\n[[left*]]\n[[right*]]\n[[up*]]\n[[down*]]\n[[prev*]]\n[[next*]]\n[[leftmost*]]\n[[rightmost*]]\n\n**Whitespace/comment aware skip**\n[[skip]]\n[[skip-whitespace]]\n[[skip-whitespace-left]]\n\n**Test for whitespace**\n[[whitespace?]]\n[[linebreak?]]\n[[whitespace-or-comment?]]\n\n**Test location**\n[[leftmost?]]\n[[rightmost?]]\n[[end?]]\n\n**Test data type**\n[[seq?]]\n[[list?]]\n[[vector?]]\n[[set?]]\n[[map?]]\n\n**Find**\n[[find]]\n[[find-next]]\n[[find-depth-first]]\n[[find-next-depth-first]]\n[[find-tag]]\n[[find-next-tag]]\n[[find-value]]\n[[find-next-value]]\n[[find-token]]\n[[find-next-token]]\n[[find-last-by-pos]]\n[[find-tag-by-pos]]\n\n**Inspect**\n[[node]]\n[[position]]\n[[position-span]]\n[[tag]]\n[[length]]\n\n**Convert**\n[[sexpr]]\n[[child-sexpr]]\n\n**Update**\n[[replace]]\n[[edit]]\n[[splice]]\n[[prefix]]\n[[suffix]]\n[[insert-right]]\n[[insert-left]]\n[[insert-child]]\n[[insert-space-left]]\n[[insert-space-right]]\n[[insert-newline-left]]\n[[insert-newline-right]]\n[[append-child]]\n[[remove]]\n[[remove-preserve-newline]]\n[[root]]\n\n**Update without whitespace treatment**\n[[replace*]]\n[[edit*]]\n[[insert-left*]]\n[[insert-right*]]\n[[append-child*]]\n[[remove*]]\n\n**Isolated update without changing location**\n[[edit-node]]\n[[subedit-node]]\n[[subzip]]\n[[prewalk]]\n[[postwalk]]\n[[edit->]]\n[[edit->>]]\n[[subedit->]]\n[[subedit->>]]\n\n**Sequence operations**\n[[map]]\n[[map-keys]]\n[[map-vals]]\n[[get]]\n[[assoc]]\n\n**Stringify**\n[[string]]\n[[root-string]]\n\n**Output**\n[[print]]\n[[print-root]]"[0m,
[1;33m                    :name[0m rewrite-clj.zip,
[1;33m                    :publics[0m [1;31m([0m[1;31m{[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :deprecated[0m [1;35m"0.4.0"[0m,
[1;33m                               :doc[0m [1;35m"DEPRECATED. Renamed to [[root-string]].\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip.cljc"[0m,
[1;33m                               :line[0m [36m249[0m,
[1;33m                               :name[0m ->root-string,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :deprecated[0m [1;35m"0.4.0"[0m,
[1;33m                               :doc[0m [1;35m"DEPRECATED. Renamed to [[string]].\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip.cljc"[0m,
[1;33m                               :line[0m [36m244[0m,
[1;33m                               :name[0m ->string,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc item[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return zipper with `item` appended as last child of the current node in `zloc`.\nWill insert a space if necessary."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/insert.cljc"[0m,
[1;33m                               :line[0m [36m52[0m,
[1;33m                               :name[0m append-child,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc item[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Raw version of [[append-child]].\n\nReturns zipper with `item` inserted as the rightmost child of the current node in `zloc`,\n  without moving.\n\nNOTE: This function does not skip, nor provide any special handling for whitespace/comment nodes."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                               :line[0m [36m219[0m,
[1;33m                               :name[0m append-child*,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc & [1;31m[[0mn[1;31m][0m[1;31m][0m[1;31m)[0m,
[1;33m                               :deprecated[0m [1;35m"0.5.0"[0m,
[1;33m                               :doc[0m [1;35m"DEPRECATED: renamed to [[insert-newline-right]].\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/whitespace.cljc"[0m,
[1;33m                               :line[0m [36m113[0m,
[1;33m                               :name[0m append-newline,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc & [1;31m[[0mn[1;31m][0m[1;31m][0m[1;31m)[0m,
[1;33m                               :deprecated[0m [1;35m"0.5.0"[0m,
[1;33m                               :doc[0m [1;35m"DEPRECATED: renamed to [[insert-space-right]].\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/whitespace.cljc"[0m,
[1;33m                               :line[0m [36m103[0m,
[1;33m                               :name[0m append-space,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc k v[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Returns zipper with key `k` set to value `v` when current node in `zloc` is a map node.\nReturns zipper with index `k` set to value `v` when current node in `zloc` is a sequence."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/seqz.cljc"[0m,
[1;33m                               :line[0m [36m111[0m,
[1;33m                               :name[0m assoc,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:added[0m [1;35m"0.4.4"[0m,
[1;33m                               :arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return s-expression of children of current node in `zloc`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/base.cljc"[0m,
[1;33m                               :line[0m [36m51[0m,
[1;33m                               :name[0m child-sexprs,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return zipper with location moved down to next non-whitespace/non-comment node in `zloc`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/move.cljc"[0m,
[1;33m                               :line[0m [36m16[0m,
[1;33m                               :name[0m down,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Raw version of [[down]].\n\nReturns zipper with the location at the leftmost child of current node in `zloc`, or\n  nil if no children.\n\nNOTE: This function does not skip, nor provide any special handling for whitespace/comment nodes."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                               :line[0m [36m96[0m,
[1;33m                               :name[0m down*,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc f & args[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return zipper with the current node in `zloc` replaced with the result of:\n\n(`f` (s-expression node) `args`)\n\nThe result of `f` will be coerced to a node if possible."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/editz.cljc"[0m,
[1;33m                               :line[0m [36m26[0m,
[1;33m                               :name[0m edit,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc f & args[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Raw version of [[edit]].\n\nReturns zipper with value of `(f current-node args)` replacing current node in `zloc`\n\nNOTE: This function does not skip, nor provide any special handling for whitespace/comment nodes."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                               :line[0m [36m206[0m,
[1;33m                               :name[0m edit*,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc & body[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Like `->`. Threads `zloc` through forms.\nThe resulting zipper will be located at the same path (i.e. the same\nnumber of downwards and right movements from the root) as incoming `zloc`."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/subedit.cljc"[0m,
[1;33m                               :line[0m [36m41[0m,
[1;33m                               :name[0m edit->,
[1;33m                               :type[0m [1;33m:macro[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc & body[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Like `->>`. Threads `zloc` through forms.\nThe resulting zipper will be located at the same path (i.e. the same\nnumber of downwards and right movements from the root) as incoming `zloc`."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/subedit.cljc"[0m,
[1;33m                               :line[0m [36m48[0m,
[1;33m                               :name[0m edit->>,
[1;33m                               :type[0m [1;33m:macro[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc f[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return zipper applying function `f` to `zloc`. The resulting\nzipper will be located at the same path (i.e. the same number of\ndownwards and right movements from the root) incoming `zloc`."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/subedit.cljc"[0m,
[1;33m                               :line[0m [36m32[0m,
[1;33m                               :name[0m edit-node,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mnode[1;31m][0m [1;31m[[0mnode options[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create and return zipper from Clojure/ClojureScript/EDN `node` (likely parsed by [[rewrite-clj-.parse]])\nand move to the first non-whitespace/non-comment child.\n\nSet `:track-position?` in `options` to enable ones-based row/column tracking.\nSee [[rewrite-clj.zip/position]].\n\nNOTE: when position tracking is enabled, `clojure.zip` is not interchangeable with `rewrite-clj.zip`, you must use `rewrite-clj.zip`."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/base.cljc"[0m,
[1;33m                               :line[0m [36m23[0m,
[1;33m                               :name[0m edn,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mnode[1;31m][0m [1;31m[[0mnode [1;31m{[0m[1;33m:keys[0m [1;31m[[0mtrack-position?[1;31m][0m[1;31m}[0m[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create and return zipper from Clojure/ClojureScript/EDN `node` (likely parsed by [[rewrite-clj.parse]]).\n\nSet `:track-position?` in `options` to enable ones-based row/column tracking.\nSee [[rewrite-clj.zip/position]].\n\nNOTE: when position tracking is enabled, `clojure.zip` is not interchangeable with `rewrite-clj.zip`, you must use `rewrite-clj.zip`."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/base.cljc"[0m,
[1;33m                               :line[0m [36m9[0m,
[1;33m                               :name[0m edn*,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return true if `zloc` is at end of depth-first traversal.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/move.cljc"[0m,
[1;33m                               :line[0m [36m35[0m,
[1;33m                               :name[0m end?,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc p?[1;31m][0m [1;31m[[0mzloc f p?[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return the first node satisfying predicate `p?` seaching from the current node\nin `zloc` traversing by function `f`.\n\n`f` defaults to [[rewrite-clj.zip/right]]"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/findz.cljc"[0m,
[1;33m                               :line[0m [36m29[0m,
[1;33m                               :name[0m find,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc p?[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return first node satisfying predicate `p?` searching depth-first from\nthe current node in `zloc`."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/findz.cljc"[0m,
[1;33m                               :line[0m [36m59[0m,
[1;33m                               :name[0m find-depth-first,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc pos[1;31m][0m [1;31m[[0mzloc pos p?[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return the last node spanning position `pos` that satisfies predicate `p?`\n searching depth-first from the current node in `zloc`.\n\nNOTE: Does not ignore whitespace/comment nodes."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/findz.cljc"[0m,
[1;33m                               :line[0m [36m44[0m,
[1;33m                               :name[0m find-last-by-pos,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc p?[1;31m][0m [1;31m[[0mzloc f p?[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return the first node satisfying predicate `p?` searching one movement `f` from the current\nnode in `zloc` traversing by function `f`.\n\n`f` defaults to [[rewrite-clj.zip/right]]"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/findz.cljc"[0m,
[1;33m                               :line[0m [36m65[0m,
[1;33m                               :name[0m find-next,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc p?[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return the first node satisfying predicate `p?` searching depth-first from one\nnode after the current node in `zloc`"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/findz.cljc"[0m,
[1;33m                               :line[0m [36m75[0m,
[1;33m                               :name[0m find-next-depth-first,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc t[1;31m][0m [1;31m[[0mzloc f t[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return the first node with tag `t` searching one movement `f` from the current\nnode in `zloc` traversing by function `f`.\n\n`f` defaults to [[rewrite-clj.zip/right]]"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/findz.cljc"[0m,
[1;33m                               :line[0m [36m91[0m,
[1;33m                               :name[0m find-next-tag,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc p?[1;31m][0m [1;31m[[0mzloc f p?[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return the first token node satisfying predicate `p?` searching from the current node in `zloc` traversing\nby function `f`.\n\n`f` defaults to [[rewrite-clj.zip/right]]"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/findz.cljc"[0m,
[1;33m                               :line[0m [36m118[0m,
[1;33m                               :name[0m find-next-token,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc v[1;31m][0m [1;31m[[0mzloc f v[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return the first token node with value `v` searching one movement `f` from the current node in `zloc` traversing\nby function `f`.\n\n`f` defaults to [[rewrite-clj.zip/right]]"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/findz.cljc"[0m,
[1;33m                               :line[0m [36m141[0m,
[1;33m                               :name[0m find-next-value,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc t[1;31m][0m [1;31m[[0mzloc f t[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return the first node with tag `t` searching from the current node in `zloc` traversing by\nfunction `f`.\n\n`f` defaults to [[rewrite-clj.zip/right]]"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/findz.cljc"[0m,
[1;33m                               :line[0m [36m81[0m,
[1;33m                               :name[0m find-tag,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc pos t[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return the last node spanning position `pos` with tag `t` searching depth-first from the current node in `zloc`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/findz.cljc"[0m,
[1;33m                               :line[0m [36m102[0m,
[1;33m                               :name[0m find-tag-by-pos,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc p?[1;31m][0m [1;31m[[0mzloc f p?[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return the first token node satisfying predicate `p?` searching from the current node in `zloc` traversing\nby function `f`.\n\n`f` defaults to [[rewrite-clj.zip/right]]"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/findz.cljc"[0m,
[1;33m                               :line[0m [36m107[0m,
[1;33m                               :name[0m find-token,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc v[1;31m][0m [1;31m[[0mzloc f v[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return the first token node with value `v` searching one movement `f` from the current node in `zloc` traversing\nby function `f`.\n\n`f` defaults to [[rewrite-clj.zip/right]]"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/findz.cljc"[0m,
[1;33m                               :line[0m [36m128[0m,
[1;33m                               :name[0m find-value,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc k[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Returns value node mapped to key `k` when current node in `zloc` is a map node.\nReturns nth `k` value node when current node in `zloc` is a sequence node."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/seqz.cljc"[0m,
[1;33m                               :line[0m [36m98[0m,
[1;33m                               :name[0m get,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc item[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return zipper with `item` inserted as the first child of the current node in `zloc`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/insert.cljc"[0m,
[1;33m                               :line[0m [36m43[0m,
[1;33m                               :name[0m insert-child,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc item[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return zipper with `item` inserted to the left of the current node in `zloc`.\nWill insert a space if necessary."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/insert.cljc"[0m,
[1;33m                               :line[0m [36m33[0m,
[1;33m                               :name[0m insert-left,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc item[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Raw version of [[insert-left]].\n\nReturns zipper with `item` inserted as the left sibling of current node in `zloc`,\n without moving location.\n\nNOTE: This function does not skip, nor provide any special handling for whitespace/comment nodes."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                               :line[0m [36m178[0m,
[1;33m                               :name[0m insert-left*,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:added[0m [1;35m"0.5.0"[0m,
[1;33m                               :arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m [1;31m[[0mzloc n[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return zipper with `n` newlines node inserted to the left of the current node in `zloc`.\n`n` defaults to 1."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/whitespace.cljc"[0m,
[1;33m                               :line[0m [36m82[0m,
[1;33m                               :name[0m insert-newline-left,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:added[0m [1;35m"0.5.0"[0m,
[1;33m                               :arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m [1;31m[[0mzloc n[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return zipper with `n` newlines node inserted to the right of the current node in `zloc`.\n`n` defaults to 1."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/whitespace.cljc"[0m,
[1;33m                               :line[0m [36m89[0m,
[1;33m                               :name[0m insert-newline-right,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc item[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return zipper with `item` inserted to the right of the current node in `zloc`.\nWill insert a space if necessary."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/insert.cljc"[0m,
[1;33m                               :line[0m [36m23[0m,
[1;33m                               :name[0m insert-right,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc item[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Raw version of [[insert-right]].\n\nReturns zipper with `item` inserted as the right sibling of the current node in `zloc`,\n  without moving location.\n\nNOTE: This function does not skip, nor provide any special handling for whitespace/comment nodes."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                               :line[0m [36m190[0m,
[1;33m                               :name[0m insert-right*,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:added[0m [1;35m"0.5.0"[0m,
[1;33m                               :arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m [1;31m[[0mzloc n[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return zipper with `n` space whitespace node inserted to the left of the current node in `zloc`.\n`n` defaults to 1."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/whitespace.cljc"[0m,
[1;33m                               :line[0m [36m62[0m,
[1;33m                               :name[0m insert-space-left,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:added[0m [1;35m"0.5.0"[0m,
[1;33m                               :arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m [1;31m[[0mzloc n[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return zipper with `n` space whitespace node inserted to the right of the current node in `zloc`.\n`n` defaults to 1."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/whitespace.cljc"[0m,
[1;33m                               :line[0m [36m72[0m,
[1;33m                               :name[0m insert-space-right,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return zipper with location moved left to next non-whitespace/non-comment node in `zloc`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/move.cljc"[0m,
[1;33m                               :line[0m [36m11[0m,
[1;33m                               :name[0m left,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Raw version of [[left]].\n\nReturns zipper with location at the left sibling of the current node in `zloc`, or nil.\n\nNOTE: This function does not skip, nor provide any special handling for whitespace/comment nodes."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                               :line[0m [36m153[0m,
[1;33m                               :name[0m left*,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return zipper with location moved to the leftmost non-whitespace/non-comment node in `zloc`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/move.cljc"[0m,
[1;33m                               :line[0m [36m59[0m,
[1;33m                               :name[0m leftmost,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Raw version of [[leftmost]].\n\nReturns zipper with location at the leftmost sibling of the current node in `zloc`, or self.\n\nNOTE: This function does not skip, nor provide any special handling for whitespace/comment nodes."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                               :line[0m [36m165[0m,
[1;33m                               :name[0m leftmost*,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return true if at leftmost non-whitespace/non-comment node in `zloc`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/move.cljc"[0m,
[1;33m                               :line[0m [36m47[0m,
[1;33m                               :name[0m leftmost?,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return length of printable string of current node in `zloc`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/base.cljc"[0m,
[1;33m                               :line[0m [36m56[0m,
[1;33m                               :name[0m length,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Returns true when the current node in `zloc` is a linebreak.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/whitespace.cljc"[0m,
[1;33m                               :line[0m [36m12[0m,
[1;33m                               :name[0m linebreak?,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Returns true if current node in `zloc` is a list.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/seqz.cljc"[0m,
[1;33m                               :line[0m [36m19[0m,
[1;33m                               :name[0m list?,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mf zloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Returns zipper with function `f` applied to all value nodes of current node in `zloc`.\nCurrent node must be a sequence node.\n\nIterates over:\n- value nodes of maps\n- each element of a seq"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/seqz.cljc"[0m,
[1;33m                               :line[0m [36m83[0m,
[1;33m                               :name[0m map,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mf zloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Returns zipper with function `f` applied to all key nodes of the current node in `zloc`.\nCurrent node must be map node."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/seqz.cljc"[0m,
[1;33m                               :line[0m [36m70[0m,
[1;33m                               :name[0m map-keys,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mf zloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Returns zipper with function `f` applied to all value current node in `zloc`.\nCurrent node must be map node."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/seqz.cljc"[0m,
[1;33m                               :line[0m [36m55[0m,
[1;33m                               :name[0m map-vals,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Returns true if current node in `zloc` is a map.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/seqz.cljc"[0m,
[1;33m                               :line[0m [36m34[0m,
[1;33m                               :name[0m map?,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return zipper with location moved to the next depth-first non-whitespace/non-comment node in `zloc`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/move.cljc"[0m,
[1;33m                               :line[0m [36m26[0m,
[1;33m                               :name[0m next,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0m[1;31m{[0m[1;33m:as[0m zloc, [1;33m:keys[0m [1;31m[[0mend?[1;31m][0m[1;31m}[0m[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Raw version of [[next]].\n\nReturns zipper with location at the next depth-first location in the hierarchy in `zloc`.\n  When reaching the end, returns a distinguished zipper detectable via [[end?]]. If already\n  at the end, stays there.\n\nNOTE: This function does not skip, nor provide any special handling for whitespace/comment nodes."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                               :line[0m [36m225[0m,
[1;33m                               :name[0m next*,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Returns the current node in `zloc`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                               :line[0m [36m51[0m,
[1;33m                               :name[0m node,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mf[1;31m][0m [1;31m[[0mf options[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create and return zipper from all forms in Clojure/ClojureScript/EDN File `f`.\n\nSet `:track-position?` in `options` to enable ones-based row/column tracking.\nSee [[rewrite-clj.zip/position]].\n\nNOTE: when position tracking is enabled, `clojure.zip` is not interchangeable with `rewrite-clj.zip`, you must use `rewrite-clj.zip`."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/base.cljc"[0m,
[1;33m                               :line[0m [36m80[0m,
[1;33m                               :name[0m of-file,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0ms[1;31m][0m [1;31m[[0ms options[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create and return zipper from all forms in Clojure/ClojureScript/EDN string `s`.\n\nSet `:track-position?` in `options` to enable ones-based row/column tracking.\nSee [[rewrite-clj.zip/position]].\n\nNOTE: when position tracking is enabled, `clojure.zip` is not interchangeable with `rewrite-clj.zip`, you must use `rewrite-clj.zip`."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/base.cljc"[0m,
[1;33m                               :line[0m [36m68[0m,
[1;33m                               :name[0m of-string,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Returns the ones-based `[row col]` of the start of the current node in `zloc`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                               :line[0m [36m74[0m,
[1;33m                               :name[0m position,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Returns the ones-based `[[start-row start-col] [end-row end-col]]` of the current node in `zloc`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                               :line[0m [36m84[0m,
[1;33m                               :name[0m position-span,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:added[0m [1;35m"0.4.9"[0m,
[1;33m                               :arglists[0m [1;31m([0m[1;31m[[0mzloc f[1;31m][0m [1;31m[[0mzloc p? f[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return zipper modified by an isolated depth-first post-order traversal.\nTraversal starts at the current node in `zloc` and continues to the end of the isolated sub-tree.\nFunction `f` is called on the zipper locations satisfying predicate `p?`, or all locations when `p?` is absent,\nand must return a valid zipper - modified or not.\n\nWARNING: when function `f` changes the location in the zipper, normal traversal will be affected."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/walk.cljc"[0m,
[1;33m                               :line[0m [36m38[0m,
[1;33m                               :name[0m postwalk,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc s[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return zipper with the current node in `zloc` prefixed with string `s`.\nOperates on token node or a multi-line node, else exception is thrown.\nWhen multi-line, all lines are prefixed.\n\nTODO: either multi-line handling is broken or I don't understand intent of code."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/editz.cljc"[0m,
[1;33m                               :line[0m [36m75[0m,
[1;33m                               :name[0m prefix,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc & [1;31m[[0mn[1;31m][0m[1;31m][0m[1;31m)[0m,
[1;33m                               :deprecated[0m [1;35m"0.5.0"[0m,
[1;33m                               :doc[0m [1;35m"DEPRECATED: renamed to [[insert-newline-left]].\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/whitespace.cljc"[0m,
[1;33m                               :line[0m [36m108[0m,
[1;33m                               :name[0m prepend-newline,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc & [1;31m[[0mn[1;31m][0m[1;31m][0m[1;31m)[0m,
[1;33m                               :deprecated[0m [1;35m"0.5.0"[0m,
[1;33m                               :doc[0m [1;35m"DEPRECATED: renamed to [[insert-space-left]].\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/whitespace.cljc"[0m,
[1;33m                               :line[0m [36m98[0m,
[1;33m                               :name[0m prepend-space,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return zipper with location moved to the previous depth-first non-whitespace/non-comment node in `zloc`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/move.cljc"[0m,
[1;33m                               :line[0m [36m52[0m,
[1;33m                               :name[0m prev,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Raw version of [[prev]].\n\nReturns zipper with location at the previous depth-first location in the hierarchy in `zloc`.\n  If already at the root, returns nil.\n\nNOTE: This function does not skip, nor provide any special handling for whitespace/comment nodes."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                               :line[0m [36m240[0m,
[1;33m                               :name[0m prev*,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc f[1;31m][0m [1;31m[[0mzloc p? f[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return zipper modified by an isolated depth-first pre-order traversal.\nTraversal starts at the current node in `zloc` and continues to the end of the isolated sub-tree.\nFunction `f` is called on the zipper locations satisfying predicate `p?`, or all locations when `p?` is absent,\nand must return a valid zipper - modified or not.\n\nWARNING: when function `f` changes the location in the zipper, normal traversal will be affected."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/walk.cljc"[0m,
[1;33m                               :line[0m [36m16[0m,
[1;33m                               :name[0m prewalk,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc & [1;31m[[0mwriter[1;31m][0m[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Print current node in `zloc`.\n\nNOTE: Optional `writer` is currently ignored for ClojureScript."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/base.cljc"[0m,
[1;33m                               :line[0m [36m112[0m,
[1;33m                               :name[0m print,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc & [1;31m[[0mwriter[1;31m][0m[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Zip up and print `zloc` from root node.\n\nNOTE: Optional `writer` is currently ignored for ClojureScript."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/base.cljc"[0m,
[1;33m                               :line[0m [36m121[0m,
[1;33m                               :name[0m print-root,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return zipper with current node in `zloc` removed. Returned zipper location\n is moved to the first non-whitespace node preceding removed node in a depth-first walk.\n Removes whitespace appropriately.\n\n- `[1  2  3]   => [1  3]`\n- `[1 2]       => [1]`\n- `[1 2]       => [2]`\n- `[1]         => []`\n- `[  1  ]     => []`\n- `[1 [2 3] 4] => [1 [2 3]]`\n- `[1 [2 3] 4] => [[2 3] 4]`\n\n If the removed node is at the rightmost location, both preceding and trailing spaces are removed,\n otherwise only trailing spaces are removed. This means that a following element\n (no matter whether on the same line or not) will end up in the same position\n (line/column) as the removed one, _unless_ a comment lies between the original\n node and the neighbour."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/removez.cljc"[0m,
[1;33m                               :line[0m [36m28[0m,
[1;33m                               :name[0m remove,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Raw version of [[remove]].\n\nReturns zipper with current node in `zloc` removed, with location at node that would have preceded\n  it in a depth-first walk.\n\nNOTE: This function does not skip, nor provide any special handling for whitespace/comment nodes."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                               :line[0m [36m256[0m,
[1;33m                               :name[0m remove*,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Same as [[remove]] but preserves newlines.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/removez.cljc"[0m,
[1;33m                               :line[0m [36m51[0m,
[1;33m                               :name[0m remove-preserve-newline,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc value[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return zipper with the current node in `zloc` replaced with one representing `value`.\n`value` will be coerced to a node if possible."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/editz.cljc"[0m,
[1;33m                               :line[0m [36m12[0m,
[1;33m                               :name[0m replace,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc node[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Raw version of [[replace]].\n\nReturns zipper with `node` replacing current node in `zloc`, without moving location.\n\nNOTE: This function does not skip, nor provide any special handling for whitespace/comment nodes."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                               :line[0m [36m201[0m,
[1;33m                               :name[0m replace*,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return zipper with location moved right to next non-whitespace/non-comment node in `zloc`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/move.cljc"[0m,
[1;33m                               :line[0m [36m6[0m,
[1;33m                               :name[0m right,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Raw version of [[right]].\n\nReturns zipper with location at the right sibling of the current node in `zloc`, or nil.\n\nNOTE: This function does not skip, nor provide any special handling for whitespace/comment nodes."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                               :line[0m [36m135[0m,
[1;33m                               :name[0m right*,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return zipper with location moved to the rightmost non-whitespace/non-comment node in `zloc`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/move.cljc"[0m,
[1;33m                               :line[0m [36m66[0m,
[1;33m                               :name[0m rightmost,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Raw version of [[rightmost]].\n\nReturns zipper with location at the rightmost sibling of the current node in `zloc`, or self.\n\nNOTE: This function does not skip, nor provide any special handling for whitespace/comment nodes."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                               :line[0m [36m146[0m,
[1;33m                               :name[0m rightmost*,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return true if at rightmost non-whitespace/non-comment node in `zloc`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/move.cljc"[0m,
[1;33m                               :line[0m [36m42[0m,
[1;33m                               :name[0m rightmost?,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0m[1;31m{[0m[1;33m:as[0m zloc, [1;33m:keys[0m [1;31m[[0mend?[1;31m][0m[1;31m}[0m[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Zips all the way up `zloc` and returns zipper at the root node, reflecting any changes.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                               :line[0m [36m125[0m,
[1;33m                               :name[0m root,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:added[0m [1;35m"0.4.0"[0m,
[1;33m                               :arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return string representing the zipped-up `zloc` zipper.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/base.cljc"[0m,
[1;33m                               :line[0m [36m98[0m,
[1;33m                               :name[0m root-string,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Returns true if current node in `zloc` is a sequence.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/seqz.cljc"[0m,
[1;33m                               :line[0m [36m12[0m,
[1;33m                               :name[0m seq?,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Returns true if current node in `zloc` is a set.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/seqz.cljc"[0m,
[1;33m                               :line[0m [36m29[0m,
[1;33m                               :name[0m set?,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return s-expression of current node in `zloc`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/base.cljc"[0m,
[1;33m                               :line[0m [36m46[0m,
[1;33m                               :name[0m sexpr,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mf p? zloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return zipper with location moved to first location not satisfying predicate `p?` starting from the node in\n`zloc` and traversing by function `f`."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/whitespace.cljc"[0m,
[1;33m                               :line[0m [36m37[0m,
[1;33m                               :name[0m skip,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m [1;31m[[0mf zloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return zipper with location moved to first non-whitespace/non-comment starting from current node in `zloc`\nand traversing by function `f`.\n\n`f` defaults to [[rewrite-clj.zip/right]]"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/whitespace.cljc"[0m,
[1;33m                               :line[0m [36m47[0m,
[1;33m                               :name[0m skip-whitespace,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return zipper with location moved to first non-whitespace/non-comment starting from current node in `zloc` traversing left.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/whitespace.cljc"[0m,
[1;33m                               :line[0m [36m55[0m,
[1;33m                               :name[0m skip-whitespace-left,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return zipper with the children of the current node in `zloc` merged into itself.\n(akin to Clojure's `unquote-splicing` macro: `~@...`).\n- if the node is not one that can have children, no modification will\n  be performed.\n- if the node has no or only whitespace children, it will be removed.\n- otherwise, splicing will be performed, moving the zipper to the first\n  non-whitespace child afterwards."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/editz.cljc"[0m,
[1;33m                               :line[0m [36m37[0m,
[1;33m                               :name[0m splice,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:added[0m [1;35m"0.4.0"[0m,
[1;33m                               :arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return string representing the current node in `zloc`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/base.cljc"[0m,
[1;33m                               :line[0m [36m93[0m,
[1;33m                               :name[0m string,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc & body[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Like `->`. Threads `zloc`, as an isolated sub-tree through forms, then zips\nup to, and locates at, the root of the modified sub-tree."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/subedit.cljc"[0m,
[1;33m                               :line[0m [36m72[0m,
[1;33m                               :name[0m subedit->,
[1;33m                               :type[0m [1;33m:macro[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc & body[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Like `->`. Threads `zloc`, as an isolated sub-tree through forms, then zips\nup to, and locates at, the root of the modified sub-tree."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/subedit.cljc"[0m,
[1;33m                               :line[0m [36m78[0m,
[1;33m                               :name[0m subedit->>,
[1;33m                               :type[0m [1;33m:macro[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc f[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return zipper replacing current node in `zloc` with result of `f` applied to said node as an isolated sub-tree.\nThe resulting zipper will be located on the root of the modified sub-tree."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/subedit.cljc"[0m,
[1;33m                               :line[0m [36m64[0m,
[1;33m                               :name[0m subedit-node,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Create and return a zipper whose root is the current node in `zloc`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/subedit.cljc"[0m,
[1;33m                               :line[0m [36m57[0m,
[1;33m                               :name[0m subzip,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc s[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return zipper with the current node in `zloc` suffixed with string `s`.\nOperates on token node or a multi-line node, else exception is thrown.\nWhen multi-line, all lines are suffixed.\n\nTODO: either multi-line handling is broken or I don't understand intent of code."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/editz.cljc"[0m,
[1;33m                               :line[0m [36m90[0m,
[1;33m                               :name[0m suffix,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return tag of current node in `zloc`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/base.cljc"[0m,
[1;33m                               :line[0m [36m41[0m,
[1;33m                               :name[0m tag,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Return zipper with location moved up to next non-whitespace/non-comment node in `zloc`.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/move.cljc"[0m,
[1;33m                               :line[0m [36m21[0m,
[1;33m                               :name[0m up,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Raw version of [[up]].\n\nReturns zipper with the location at the parent of current node in `zloc`, or nil if at\n  the top.\n\nNOTE: This function does not skip, nor provide any special handling for whitespace/comment nodes."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                               :line[0m [36m111[0m,
[1;33m                               :name[0m up*,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :deprecated[0m [1;35m"0.4.0"[0m,
[1;33m                               :doc[0m [1;35m"DEPRECATED. Return a tag/s-expression pair for inner nodes, or\nthe s-expression itself for leaves."[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/base.cljc"[0m,
[1;33m                               :line[0m [36m61[0m,
[1;33m                               :name[0m value,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Returns true if current node in `zloc` is a vector.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/seqz.cljc"[0m,
[1;33m                               :line[0m [36m24[0m,
[1;33m                               :name[0m vector?,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Returns true when current node in `zloc` is whitespace or a comment.\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/whitespace.cljc"[0m,
[1;33m                               :line[0m [36m29[0m,
[1;33m                               :name[0m whitespace-or-comment?,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                              {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                               :doc[0m [1;35m"Returns true when the current the node in `zloc` is a Clojure whitespace (which includes the comma).\n"[0m,
[1;33m                               :file[0m [1;35m"rewrite_clj/zip/whitespace.cljc"[0m,
[1;33m                               :line[0m [36m7[0m,
[1;33m                               :name[0m whitespace?,
[1;33m                               :type[0m [1;33m:var[0m[1;31m}[0m[1;31m)[0m[1;31m}[0m[1;31m][0m,
[1;35m            "cljs"[0m [1;31m[[0m[1;31m{[0m[1;33m:doc[0m [1;35m"APIs to navigate and update Clojure/ClojureScript/EDN source code.\n\nStart with the [[rewrite-clj.parser]] or [[rewrite-clj.zip]] to ingest your source code,\nthen use the [[rewrite-clj.zip]] to navigate and/or change it. [[rewrite-clj.node]]\nwill help you to work with nodes in the zipper tree.\n\n[[rewrite-clj.paredit]] first appeared in the ClojureScript only version of\nrewrite-clj and supports structured editing of the zipper tree."[0m,
[1;33m                     :name[0m rewrite-clj,
[1;33m                     :publics[0m [1;31m()[0m[1;31m}[0m
[1;31m                    {[0m[1;33m:doc[0m [1;35m"Create and evaluate nodes.\n\nAll nodes represent Clojure/ClojureScript/EDN."[0m,
[1;33m                     :name[0m rewrite-clj.node,
[1;33m                     :publics[0m [1;31m[[0m[30;41m-{:arglists ([node]),
                                 :doc "Return all children converted to forms.\n",
                                 :file "rewrite_clj/node.cljc",
                                 :line 70,
                                 :name child-sexprs,
                                 :type :var}[0m
[30;41m                               -{:arglists ([s]),
                                 :doc "Create comma node of string `s`.\n",
                                 :file "rewrite_clj/node.cljc",
                                 :line 86,
                                 :name comma-node,
                                 :type :var}[0m
[30;41m                               -{:arglists ([nodes]),
                                 :doc "Interleave `nodes` with `\", \"` nodes.\n",
                                 :file "rewrite_clj/node.cljc",
                                 :line 130,
                                 :name comma-separated,
                                 :type :var}[0m
[30;41m                               -{:arglists ([node]),
                                 :doc "Returns true if `node` represents a comma.\n",
                                 :file "rewrite_clj/node.cljc",
                                 :line 165,
                                 :name comma?,
                                 :type :var}[0m
[30;41m                               -{:arglists ([s]),
                                 :doc "Create node representing a comment with text `s`.\n",
                                 :file "rewrite_clj/node.cljc",
                                 :line 25,
                                 :name comment-node,
                                 :type :var}[0m
[30;41m                               -{:arglists ([node]),
                                 :doc "Returns true if `node` is a comment.\n",
                                 :file "rewrite_clj/node.cljc",
                                 :line 31,
                                 :name comment?,
                                 :type :var}[0m
[30;41m                               -{:arglists ([children]),
                                 :doc "Create node representing the dereferencing of a form with `children`. (`@...`)\nTakes either a seq of nodes or a single one.",
                                 :file "rewrite_clj/node.cljc",
                                 :line 130,
                                 :name deref-node,
                                 :type :var}[0m
[30;41m                               -{:arglists ([children]),
                                 :doc "Create node representing an inline evaluation with `children`. (`#=...`)\nTakes either a seq of nodes or a single one.",
                                 :file "rewrite_clj/node.cljc",
                                 :line 112,
                                 :name eval-node,
                                 :type :var}[0m
[30;41m                               -{:arglists ([children]),
                                 :doc "Create node representing an anonymous function with `children`.\n",
                                 :file "rewrite_clj/node.cljc",
                                 :line 94,
                                 :name fn-node,
                                 :type :var}[0m
[30;41m                               -{:arglists ([children]),
                                 :doc "Create top-level node wrapping multiple `children`\n(equivalent to an implicit `do` on the top-level).",
                                 :file "rewrite_clj/node.cljc",
                                 :line 40,
                                 :name forms-node,
                                 :type :var}[0m
[30;41m                               -{:arglists ([value] [value base]),
                                 :doc "Create node representing an integer `value` in `base`.\n\n`base` defaults to 10.",
                                 :file "rewrite_clj/node.cljc",
                                 :line 34,
                                 :name integer-node,
                                 :type :var}[0m
[30;41m                               -{:arglists ([k & [namespaced?]]),
                                 :doc "Create node representing a keyword `k`. If `namespaced?` is `true`\na keyword Ã  la `::x` or `::ns/x` (i.e. namespaced/aliased) is generated.",
                                 :file "rewrite_clj/node.cljc",
                                 :line 40,
                                 :name keyword-node,
                                 :type :var}[0m
[30;41m                               -{:arglists ([nodes]),
                                 :doc "Interleave `nodes` with newline nodes.\n",
                                 :file "rewrite_clj/node.cljc",
                                 :line 138,
                                 :name line-separated,
                                 :type :var}[0m
[30;41m                               -{:arglists ([node]),
                                 :doc "Returns true if `node` represents linebreak(s).\n",
                                 :file "rewrite_clj/node.cljc",
                                 :line 160,
                                 :name linebreak?,
                                 :type :var}[0m
[30;41m                               -{:arglists ([children]),
                                 :doc "Create a node representing a list with `children`.\n",
                                 :file "rewrite_clj/node.cljc",
                                 :line 42,
                                 :name list-node,
                                 :type :var}[0m
[30;41m                               -{:arglists ([children]),
                                 :doc "Create a node representing an map with `children`.\n",
                                 :file "rewrite_clj/node.cljc",
                                 :line 57,
                                 :name map-node,
                                 :type :var}[0m
[30;41m                               -{:arglists ([children] [metadata data]),
                                 :doc "Create node representing a form `data` and its `metadata`.\n",
                                 :file "rewrite_clj/node.cljc",
                                 :line 39,
                                 :name meta-node,
                                 :type :var}[0m
[30;41m                               -{:arglists ([children]),
                                 :doc "Create a node representing a namespaced map. There are 3 types of namespaced maps:\n\n 1. prefix namespaced map\n The prefix is a keyword which specifies to a namespace.\n Example: `#:my.name.space{:a 1}`\n\n 2. auto-resolve alias namespaced map\n The prefix is an auto-resolve keyword specifies a namespace alias.\n Example: `#::ns-alias{:b 3}`\n\n 3. auto-resolve namespaced map\n The prefix is `::` which specifies the current namespace.\n Example: `#::{:c 4}`\n\nFirst child is the prefix, followed by optional whitespace then map node.\nTODO: this still seems hacky to me.\nPrefix must be a token-node with a keyword value. Use (keyword ':') for auto-resolve.",
                                 :file "rewrite_clj/node.cljc",
                                 :line 80,
                                 :name namespaced-map-node,
                                 :type :var}[0m
[30;41m                               -{:arglists ([s]),
                                 :doc "Create newline node of string `s`.\n",
                                 :file "rewrite_clj/node.cljc",
                                 :line 92,
                                 :name newline-node,
                                 :type :var}[0m
[30;41m                               -{:arglists ([n]),
                                 :doc "Create node representing `n` newline characters.\n",
                                 :file "rewrite_clj/node.cljc",
                                 :line 124,
                                 :name newlines,
                                 :type :var}[0m
[30;41m                               -{:arglists ([children]),
                                 :doc "Create node representing a quoted form with `children`.\nTakes either a seq of nodes or a single one.",
                                 :file "rewrite_clj/node.cljc",
                                 :line 39,
                                 :name quote-node,
                                 :type :var}[0m
[30;41m                               -{:arglists ([children] [metadata data]),
                                 :doc "Create node representing a form `data` and its `metadata` using the\n`#^` prefix.",
                                 :file "rewrite_clj/node.cljc",
                                 :line 47,
                                 :name raw-meta-node,
                                 :type :var}[0m
[30;41m                               -{:arglists ([children] [macro-node form-node]),
                                 :doc "Create node representing a reader macro with `children`. (`#... ...`)\n",
                                 :file "rewrite_clj/node.cljc",
                                 :line 123,
                                 :name reader-macro-node,
                                 :type :var}[0m
[30;41m                               -{:arglists ([pattern-string]),
                                 :doc "Create node representing a regex with `pattern-string`\n",
                                 :file "rewrite_clj/node.cljc",
                                 :line 19,
                                 :name regex-node,
                                 :type :var}[0m
[30;41m                               -{:arglists ([children]),
                                 :doc "Create a node representing a set with `children`.\n",
                                 :file "rewrite_clj/node.cljc",
                                 :line 52,
                                 :name set-node,
                                 :type :var}[0m
[30;41m                               -{:arglists ([nodes]),
                                 :doc "Return forms for `nodes`. Nodes that do not represent s-expression are skipped.\n",
                                 :file "rewrite_clj/node.cljc",
                                 :line 30,
                                 :name sexprs,
                                 :type :var}[0m
[30;41m                               -{:arglists ([n]),
                                 :doc "Create node representing `n` spaces.\n",
                                 :file "rewrite_clj/node.cljc",
                                 :line 119,
                                 :name spaces,
                                 :type :var}[0m
[30;41m                               -{:arglists ([lines]),
                                 :doc "Create node representing a string value of `lines`.\n`lines` can be a seq of strings or a single one.",
                                 :file "rewrite_clj/node.cljc",
                                 :line 42,
                                 :name string-node,
                                 :type :var}[0m
[30;41m                               -{:arglists ([children]),
                                 :doc "Create node representing a syntax-quoted form with `children`.\nTakes either a seq of nodes or a single one.",
                                 :file "rewrite_clj/node.cljc",
                                 :line 49,
                                 :name syntax-quote-node,
                                 :type :var}[0m
[30;41m                               -{:arglists ([value] [value string-value]),
                                 :doc "Create node for an unspecified token of `value`.\n",
                                 :file "rewrite_clj/node.cljc",
                                 :line 22,
                                 :name token-node,
                                 :type :var}[0m
[30;41m                               -{:arglists ([children]),
                                 :doc "Create node representing an uneval `#_` form with `children`.\n",
                                 :file "rewrite_clj/node.cljc",
                                 :line 34,
                                 :name uneval-node,
                                 :type :var}[0m
[30;41m                               -{:arglists ([children]),
                                 :doc "Create node representing an unquoted form with `children`. (`~...`)\nTakes either a seq of nodes or a single one.",
                                 :file "rewrite_clj/node.cljc",
                                 :line 59,
                                 :name unquote-node,
                                 :type :var}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0m[30;41m-children[0m [30;42m+node[0m[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [30;41m-"Create node representing an unquote-spliced form with `children`. (`~@...`)\nTakes either a seq of nodes or a single one."[0m
[30;42m                                     +"Return all children converted to forms.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/node.cljc"[0m [30;42m+"rewrite_clj/node/protocols.cljc"[0m,
[1;33m                                :line[0m [30;41m-69[0m [30;42m+70[0m,
[1;33m                                :name[0m [30;41m-unquote-splicing-node[0m [30;42m+child-sexprs[0m,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[30;42m                               +{:arglists ([node]),
                                 :doc "Returns child nodes for `node`.\n",
                                 :file "rewrite_clj/node/protocols.cljc",
                                 :line 49,
                                 :name children,
                                 :type :var}[0m
[30;42m                               +{:arglists ([form]),
                                 :doc "Coerce `form` to node.\n",
                                 :file "rewrite_clj/node/protocols.cljc",
                                 :line 78,
                                 :name coerce,
                                 :type :var}[0m
[30;42m                               +{:arglists ([s]),
                                 :doc "Create comma node of string `s`.\n",
                                 :file "rewrite_clj/node/whitespace.cljc",
                                 :line 86,
                                 :name comma-node,
                                 :type :var}[0m
[30;42m                               +{:arglists ([nodes]),
                                 :doc "Interleave `nodes` with `\", \"` nodes.\n",
                                 :file "rewrite_clj/node/whitespace.cljc",
                                 :line 130,
                                 :name comma-separated,
                                 :type :var}[0m
[30;42m                               +{:arglists ([node]),
                                 :doc "Returns true if `node` represents a comma.\n",
                                 :file "rewrite_clj/node/whitespace.cljc",
                                 :line 165,
                                 :name comma?,
                                 :type :var}[0m
[30;42m                               +{:arglists ([s]),
                                 :doc "Create node representing a comment with text `s`.\n",
                                 :file "rewrite_clj/node/comment.cljc",
                                 :line 25,
                                 :name comment-node,
                                 :type :var}[0m
[30;42m                               +{:arglists ([node]),
                                 :doc "Returns true if `node` is a comment.\n",
                                 :file "rewrite_clj/node/comment.cljc",
                                 :line 31,
                                 :name comment?,
                                 :type :var}[0m
[30;42m                               +{:arglists ([children]),
                                 :doc "Create node representing the dereferencing of a form with `children`. (`@...`)\nTakes either a seq of nodes or a single one.",
                                 :file "rewrite_clj/node/reader_macro.cljc",
                                 :line 130,
                                 :name deref-node,
                                 :type :var}[0m
[30;42m                               +{:arglists ([children]),
                                 :doc "Create node representing an inline evaluation with `children`. (`#=...`)\nTakes either a seq of nodes or a single one.",
                                 :file "rewrite_clj/node/reader_macro.cljc",
                                 :line 112,
                                 :name eval-node,
                                 :type :var}[0m
[30;42m                               +{:arglists ([children]),
                                 :doc "Create node representing an anonymous function with `children`.\n",
                                 :file "rewrite_clj/node/fn.cljc",
                                 :line 94,
                                 :name fn-node,
                                 :type :var}[0m
[30;42m                               +{:arglists ([children]),
                                 :doc "Create top-level node wrapping multiple `children`\n(equivalent to an implicit `do` on the top-level).",
                                 :file "rewrite_clj/node/forms.cljc",
                                 :line 40,
                                 :name forms-node,
                                 :type :var}[0m
[30;42m                               +{:arglists ([node]),
                                 :doc "Returns true if `node` can have children.\n",
                                 :file "rewrite_clj/node/protocols.cljc",
                                 :line 49,
                                 :name inner?,
                                 :type :var}[0m
[30;42m                               +{:arglists ([value] [value base]),
                                 :doc "Create node representing an integer `value` in `base`.\n\n`base` defaults to 10.",
                                 :file "rewrite_clj/node/integer.cljc",
                                 :line 34,
                                 :name integer-node,
                                 :type :var}[0m
[30;42m                               +{:arglists ([k & [namespaced?]]),
                                 :doc "Create node representing a keyword `k`. If `namespaced?` is `true`\na keyword Ã  la `::x` or `::ns/x` (i.e. namespaced/aliased) is generated.",
                                 :file "rewrite_clj/node/keyword.cljc",
                                 :line 40,
                                 :name keyword-node,
                                 :type :var}[0m
[30;42m                               +{:arglists ([node]),
                                 :doc "Returns number of characters before children for `node`.\n",
                                 :file "rewrite_clj/node/protocols.cljc",
                                 :line 49,
                                 :name leader-length,
                                 :type :var}[0m
[30;42m                               +{:arglists ([node]),
                                 :doc "Return number of characters for the string version of `node`.\n",
                                 :file "rewrite_clj/node/protocols.cljc",
                                 :line 9,
                                 :name length,
                                 :type :var}[0m
[30;42m                               +{:arglists ([nodes]),
                                 :doc "Interleave `nodes` with newline nodes.\n",
                                 :file "rewrite_clj/node/whitespace.cljc",
                                 :line 138,
                                 :name line-separated,
                                 :type :var}[0m
[30;42m                               +{:arglists ([node]),
                                 :doc "Returns true if `node` represents linebreak(s).\n",
                                 :file "rewrite_clj/node/whitespace.cljc",
                                 :line 160,
                                 :name linebreak?,
                                 :type :var}[0m
[30;42m                               +{:arglists ([children]),
                                 :doc "Create a node representing a list with `children`.\n",
                                 :file "rewrite_clj/node/seq.cljc",
                                 :line 42,
                                 :name list-node,
                                 :type :var}[0m
[30;42m                               +{:arglists ([children]),
                                 :doc "Create a node representing an map with `children`.\n",
                                 :file "rewrite_clj/node/seq.cljc",
                                 :line 57,
                                 :name map-node,
                                 :type :var}[0m
[30;42m                               +{:arglists ([children] [metadata data]),
                                 :doc "Create node representing a form `data` and its `metadata`.\n",
                                 :file "rewrite_clj/node/meta.cljc",
                                 :line 39,
                                 :name meta-node,
                                 :type :var}[0m
[30;42m                               +{:arglists ([children]),
                                 :doc "Create a node representing a namespaced map. There are 3 types of namespaced maps:\n\n 1. prefix namespaced map\n The prefix is a keyword which specifies to a namespace.\n Example: `#:my.name.space{:a 1}`\n\n 2. auto-resolve alias namespaced map\n The prefix is an auto-resolve keyword specifies a namespace alias.\n Example: `#::ns-alias{:b 3}`\n\n 3. auto-resolve namespaced map\n The prefix is `::` which specifies the current namespace.\n Example: `#::{:c 4}`\n\nFirst child is the prefix, followed by optional whitespace then map node.\nTODO: this still seems hacky to me.\nPrefix must be a token-node with a keyword value. Use (keyword ':') for auto-resolve.",
                                 :file "rewrite_clj/node/namespaced_map.cljc",
                                 :line 80,
                                 :name namespaced-map-node,
                                 :type :var}[0m
[30;42m                               +{:arglists ([s]),
                                 :doc "Create newline node of string `s`.\n",
                                 :file "rewrite_clj/node/whitespace.cljc",
                                 :line 92,
                                 :name newline-node,
                                 :type :var}[0m
[30;42m                               +{:arglists ([n]),
                                 :doc "Create node representing `n` newline characters.\n",
                                 :file "rewrite_clj/node/whitespace.cljc",
                                 :line 124,
                                 :name newlines,
                                 :type :var}[0m
[30;42m                               +{:arglists ([node]),
                                 :doc "Return true if `node` cannot be converted to an s-expression element.\n",
                                 :file "rewrite_clj/node/protocols.cljc",
                                 :line 9,
                                 :name printable-only?,
                                 :type :var}[0m
[30;42m                               +{:arglists ([children]),
                                 :doc "Create node representing a quoted form with `children`.\nTakes either a seq of nodes or a single one.",
                                 :file "rewrite_clj/node/quote.cljc",
                                 :line 39,
                                 :name quote-node,
                                 :type :var}[0m
[30;42m                               +{:arglists ([children] [metadata data]),
                                 :doc "Create node representing a form `data` and its `metadata` using the\n`#^` prefix.",
                                 :file "rewrite_clj/node/meta.cljc",
                                 :line 47,
                                 :name raw-meta-node,
                                 :type :var}[0m
[30;42m                               +{:arglists ([children] [macro-node form-node]),
                                 :doc "Create node representing a reader macro with `children`. (`#... ...`)\n",
                                 :file "rewrite_clj/node/reader_macro.cljc",
                                 :line 123,
                                 :name reader-macro-node,
                                 :type :var}[0m
[30;42m                               +{:arglists ([pattern-string]),
                                 :doc "Create node representing a regex with `pattern-string`\n",
                                 :file "rewrite_clj/node/regex.cljc",
                                 :line 19,
                                 :name regex-node,
                                 :type :var}[0m
[30;42m                               +{:arglists ([node children]),
                                 :doc "Returns `node` replacing current children with `children`.\n",
                                 :file "rewrite_clj/node/protocols.cljc",
                                 :line 49,
                                 :name replace-children,
                                 :type :var}[0m
[30;42m                               +{:arglists ([children]),
                                 :doc "Create a node representing a set with `children`.\n",
                                 :file "rewrite_clj/node/seq.cljc",
                                 :line 52,
                                 :name set-node,
                                 :type :var}[0m
[30;42m                               +{:arglists ([node]),
                                 :doc "Return `node` converted to form.\n",
                                 :file "rewrite_clj/node/protocols.cljc",
                                 :line 9,
                                 :name sexpr,
                                 :type :var}[0m
[30;42m                               +{:arglists ([nodes]),
                                 :doc "Return forms for `nodes`. Nodes that do not represent s-expression are skipped.\n",
                                 :file "rewrite_clj/node/protocols.cljc",
                                 :line 30,
                                 :name sexprs,
                                 :type :var}[0m
[30;42m                               +{:arglists ([n]),
                                 :doc "Create node representing `n` spaces.\n",
                                 :file "rewrite_clj/node/whitespace.cljc",
                                 :line 119,
                                 :name spaces,
                                 :type :var}[0m
[30;42m                               +{:arglists ([node]),
                                 :doc "Return the string version of `node`.\n",
                                 :file "rewrite_clj/node/protocols.cljc",
                                 :line 9,
                                 :name string,
                                 :type :var}[0m
[30;42m                               +{:arglists ([lines]),
                                 :doc "Create node representing a string value of `lines`.\n`lines` can be a seq of strings or a single one.",
                                 :file "rewrite_clj/node/stringz.cljc",
                                 :line 42,
                                 :name string-node,
                                 :type :var}[0m
[30;42m                               +{:arglists ([children]),
                                 :doc "Create node representing a syntax-quoted form with `children`.\nTakes either a seq of nodes or a single one.",
                                 :file "rewrite_clj/node/quote.cljc",
                                 :line 49,
                                 :name syntax-quote-node,
                                 :type :var}[0m
[30;42m                               +{:arglists ([node]),
                                 :doc "Returns keyword representing type of `node`.\n",
                                 :file "rewrite_clj/node/protocols.cljc",
                                 :line 9,
                                 :name tag,
                                 :type :var}[0m
[30;42m                               +{:arglists ([value] [value string-value]),
                                 :doc "Create node for an unspecified token of `value`.\n",
                                 :file "rewrite_clj/node/token.cljc",
                                 :line 22,
                                 :name token-node,
                                 :type :var}[0m
[30;42m                               +{:arglists ([children]),
                                 :doc "Create node representing an uneval `#_` form with `children`.\n",
                                 :file "rewrite_clj/node/uneval.cljc",
                                 :line 34,
                                 :name uneval-node,
                                 :type :var}[0m
[30;42m                               +{:arglists ([children]),
                                 :doc "Create node representing an unquoted form with `children`. (`~...`)\nTakes either a seq of nodes or a single one.",
                                 :file "rewrite_clj/node/quote.cljc",
                                 :line 59,
                                 :name unquote-node,
                                 :type :var}[0m
[30;42m                               +{:arglists ([children]),
                                 :doc "Create node representing an unquote-spliced form with `children`. (`~@...`)\nTakes either a seq of nodes or a single one.",
                                 :file "rewrite_clj/node/quote.cljc",
                                 :line 69,
                                 :name unquote-splicing-node,
                                 :type :var}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mnode[1;31m][0m[1;31m)[0m,
[1;33m                                :deprecated[0m [1;35m"0.4.0"[0m,
[1;33m                                :doc[0m [1;35m"DEPRECATED: Get first child as a pair of tag/sexpr (if inner node),\nor just the node's own sexpr. (use explicit analysis of `children`\n`child-sexprs` instead) "[0m,
[1;33m                                :file[0m [1;35m"rewrite_clj/node.cljc"[0m,
[1;33m                                :line[0m [36m119[0m,
[1;33m                                :name[0m value,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[30;41m                               -{:arglists ([children]),
                                 :doc "Create node representing a var with `children`.\nTakes either a seq of nodes or a single one.",
                                 :file "rewrite_clj/node.cljc",
                                 :line 104,
                                 :name var-node,
                                 :type :var}[0m
[30;41m                               -{:arglists ([children]),
                                 :doc "Create a node representing a vector with `children`.\n",
                                 :file "rewrite_clj/node.cljc",
                                 :line 47,
                                 :name vector-node,
                                 :type :var}[0m
[30;41m                               -{:arglists ([s]),
                                 :doc "Create whitespace node of string `s`.\n",
                                 :file "rewrite_clj/node.cljc",
                                 :line 80,
                                 :name whitespace-node,
                                 :type :var}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0m[30;41m-s[0m [30;42m+children[0m[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [30;41m-"Convert string `s` of whitespace to whitespace/newline nodes.\n"[0m
[30;42m                                     +"Create node representing a var with `children`.\nTakes either a seq of nodes or a single one."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/node.cljc"[0m [30;42m+"rewrite_clj/node/reader_macro.cljc"[0m,
[1;33m                                :line[0m [36m104[0m,
[1;33m                                :name[0m [30;41m-whitespace-nodes[0m [30;42m+var-node[0m,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[30;42m                               +{:arglists ([children]),
                                 :doc "Create a node representing a vector with `children`.\n",
                                 :file "rewrite_clj/node/seq.cljc",
                                 :line 47,
                                 :name vector-node,
                                 :type :var}[0m
[30;42m                               +{:arglists ([s]),
                                 :doc "Create whitespace node of string `s`.\n",
                                 :file "rewrite_clj/node/whitespace.cljc",
                                 :line 80,
                                 :name whitespace-node,
                                 :type :var}[0m
[30;42m                               +{:arglists ([s]),
                                 :doc "Convert string `s` of whitespace to whitespace/newline nodes.\n",
                                 :file "rewrite_clj/node/whitespace.cljc",
                                 :line 104,
                                 :name whitespace-nodes,
                                 :type :var}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mnode[1;31m][0m[1;31m)[0m,
[1;33m                                :doc[0m [1;35m"Return true when `node` represents whitespace or comment.\n"[0m,
[1;33m                                :file[0m [1;35m"rewrite_clj/node.cljc"[0m,
[1;33m                                :line[0m [36m111[0m,
[1;33m                                :name[0m whitespace-or-comment?,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mnode[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Returns true if `node represents whitespace.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/node.cljc"[0m [30;42m+"rewrite_clj/node/whitespace.cljc"[0m,
[1;33m                                :line[0m [36m151[0m,
[1;33m                                :name[0m whitespace?,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m[1;31m][0m[1;31m}[0m
[1;31m                    {[0m[1;33m:doc[0m [1;35m"Paredit zipper operations for Clojure/ClojureScript/EDN.\n\nYou might find inspiration from examples here: http://pub.gajendra.net/src/paredit-refcard.pdf"[0m,
[1;33m                     :name[0m rewrite-clj.paredit,
[1;33m                     :publics[0m [1;31m([0m[1;31m{[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                                :doc[0m [1;35m"Push out the leftmost node of the current S-expression into outer left form\n\n- `[1 2 [3 |4] 5] => [1 2 3 [|4] 5]`"[0m,
[1;33m                                :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                                :line[0m [36m339[0m,
[1;33m                                :name[0m barf-backward,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                                :doc[0m [1;35m"Push out the rightmost node of the current S-expression into outer right form\n\n- `[1 2 [|3 4] 5] => [1 2 [|3] 4 5]`"[0m,
[1;33m                                :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                                :line[0m [36m315[0m,
[1;33m                                :name[0m barf-forward,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                                :doc[0m [1;35m"Join S-expression to the left and right of current loc. Also works for strings.\n\n- `[[1 2] |[3 4]] => [[1 2 3 4]]`\n- `[\"Hello \" | \"World\"] => [\"Hello World\"]"[0m,
[1;33m                                :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                                :line[0m [36m499[0m,
[1;33m                                :name[0m join,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                                :doc[0m [1;35m"Kill all sibling nodes to the right of the current node in `zloc`.\n\n- [1 2| 3 4] => [1 2|]"[0m,
[1;33m                                :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                                :line[0m [36m82[0m,
[1;33m                                :name[0m kill,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc pos[1;31m][0m[1;31m)[0m,
[1;33m                                :doc[0m [1;35m"In string and comment aware kill\n\nPerform kill for given position `pos` Like [[kill]], but:\n\n- if inside string kills to end of string and stops there\n- If inside comment kills to end of line (not including linebreak!)\n\n`pos` should provide `{:row :col }` which are relative to the start of the given form the zipper represents\n`zloc` must be positioned at a node previous (given depth first) to the node at given pos"[0m,
[1;33m                                :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                                :line[0m [36m127[0m,
[1;33m                                :name[0m kill-at-pos,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc pos[1;31m][0m[1;31m)[0m,
[1;33m                                :doc[0m [1;35m"In string and comment aware kill for one node/word at `pos` in `zloc`.\n\n- `(+ |100 100) => (+ |100)`\n- `(for |(bar do)) => (foo)`\n- `\"|hello world\" => \"| world\"`\n- ` ; |hello world => ;  |world`"[0m,
[1;33m                                :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                                :line[0m [36m196[0m,
[1;33m                                :name[0m kill-one-at-pos,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                                :doc[0m [1;35m"Move node at current location to the position of previous location given a depth first traversal\n\n  -  `(+ 1 (+ 2 |3) 4) => (+ 1 (+ |3 2) 4)`\n  - `(+ 1 (+ 2 3) |4) => (+ 1 (+ 2 3 |4))`\n\nreturns zloc after move or given zloc if a move isn't possible"[0m,
[1;33m                                :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                                :line[0m [36m528[0m,
[1;33m                                :name[0m move-to-prev,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                                :doc[0m [1;35m"Delete siblings and raise node at zloc one level up\n\n- `[1 [2 |3 4]] => [1 |3]`"[0m,
[1;33m                                :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                                :line[0m [36m517[0m,
[1;33m                                :name[0m raise,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                                :doc[0m [1;35m"Pull in prev left outer node (if none at first level, tries next etc) into\ncurrent S-expression\n\n- `[1 2 [|3] 4 5] => [1 [2 |3] 4 5]`"[0m,
[1;33m                                :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                                :line[0m [36m273[0m,
[1;33m                                :name[0m slurp-backward,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                                :doc[0m [1;35m"Pull in all left outer-nodes into current S-expression, but only the ones at the same level\nas the the first one.\n\n- `[1 2 [|3] 4 5] => [[1 2 |3] 4 5]`"[0m,
[1;33m                                :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                                :line[0m [36m300[0m,
[1;33m                                :name[0m slurp-backward-fully,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                                :doc[0m [1;35m"Pull in next right outer node (if none at first level, tries next etc) into\ncurrent S-expression\n\n- `[1 2 [|3] 4 5] => [1 2 [|3 4] 5]`"[0m,
[1;33m                                :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                                :line[0m [36m235[0m,
[1;33m                                :name[0m slurp-forward,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                                :doc[0m [1;35m"Pull in all right outer-nodes into current S-expression, but only the ones at the same level\nas the the first one.\n\n- `[1 2 [|3] 4 5] => [1 2 [|3 4 5]]`"[0m,
[1;33m                                :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                                :line[0m [36m258[0m,
[1;33m                                :name[0m slurp-forward-fully,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:doc[0m [1;35m"See rewrite-clj.zip/splice\n"[0m,
[1;33m                                :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                                :line[0m [36m385[0m,
[1;33m                                :name[0m splice,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                                :doc[0m [1;35m"Remove left siblings of current given node in S-Expression and unwrap remaining into enclosing S-expression\n\n- `(foo (let ((x 5)) |(sqrt n)) bar) => (foo (sqrt n) bar)`"[0m,
[1;33m                                :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                                :line[0m [36m400[0m,
[1;33m                                :name[0m splice-killing-backward,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                                :doc[0m [1;35m"Remove current given node and its right siblings in S-Expression and unwrap remaining into enclosing S-expression\n\n- `(a (b c |d e) f) => (a b |c f)`"[0m,
[1;33m                                :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                                :line[0m [36m407[0m,
[1;33m                                :name[0m splice-killing-forward,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                                :doc[0m [1;35m"Split current s-sexpression in two at given node `zloc`\n\n-  `[1 2 |3 4 5] => [1 2 3] [4 5]`"[0m,
[1;33m                                :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                                :line[0m [36m419[0m,
[1;33m                                :name[0m split,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc pos[1;31m][0m[1;31m)[0m,
[1;33m                                :doc[0m [1;35m"In string aware split\n\nPerform split at given position `pos` Like split, but:\n\n- if inside string splits string into two strings\n\n`pos` should provide `{:row :col }` which are relative to the start of the given form the zipper represents\n`zloc` must be positioned at a node previous (given depth first) to the node at given pos"[0m,
[1;33m                                :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                                :line[0m [36m459[0m,
[1;33m                                :name[0m split-at-pos,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc t[1;31m][0m[1;31m)[0m,
[1;33m                                :doc[0m [1;35m"Wrap current node with a given type `t` (:vector, :list, :set, :map :fn)\n\n- `|123 => [|123] ; given :vector`\n- `|[1 [2]] => [|[1 [2]]]`"[0m,
[1;33m                                :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                                :line[0m [36m361[0m,
[1;33m                                :name[0m wrap-around,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc t[1;31m][0m[1;31m)[0m,
[1;33m                                :doc[0m [1;35m"Create a new seq node of type `t` left of `zloc` then slurp fully into the new node\n\n- `[1 |2 3 4] => [1 [|2 3 4]]`"[0m,
[1;33m                                :file[0m [1;35m"rewrite_clj/paredit.cljc"[0m,
[1;33m                                :line[0m [36m375[0m,
[1;33m                                :name[0m wrap-fully-forward-slurp,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m[1;31m)[0m[1;31m}[0m
[1;31m                    {[0m[1;33m:doc[0m [1;35m"Parse Clojure/ClojureScript/EDN source code to nodes.\n\nAfter parsing, the typical next step is [[rewrite-clj.zip/edn]] to create zipper.\n\nAlternatively consider parsing and zipping in one step from [[rewrite-clj.zip/of-string]] or [[rewrite-clj.zip/of-file]]."[0m,
[1;33m                     :name[0m rewrite-clj.parser,
[1;33m                     :publics[0m [1;31m([0m[1;31m{[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0ms[1;31m][0m[1;31m)[0m,
[1;33m                                :doc[0m [1;35m"Parse first form in the given string.\n"[0m,
[1;33m                                :file[0m [1;35m"rewrite_clj/parser.cljc"[0m,
[1;33m                                :line[0m [36m30[0m,
[1;33m                                :name[0m parse-string,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0ms[1;31m][0m[1;31m)[0m,
[1;33m                                :doc[0m [1;35m"Parse all forms in the given string.\n"[0m,
[1;33m                                :file[0m [1;35m"rewrite_clj/parser.cljc"[0m,
[1;33m                                :line[0m [36m35[0m,
[1;33m                                :name[0m parse-string-all,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m[1;31m)[0m[1;31m}[0m
[1;31m                    {[0m[1;33m:doc[0m [1;35m"A rich API for navigating and updating Clojure/ClojureScripti/EDN source code via a zipper tree.\n\nThe zipper holds a tree of nodes representing source code. It also holds your current location while navigating\nthrough the tree and any pending changes you have made. Changes are applied back into the tree\nwhen invoking root functions.\n\nAlthough they are preserved, whitespace and comment nodes are normally skipped when navigating through the tree.\nThere are times when you will want to include whitespace and comment nodes, and as you see below, provisions are\navailable to do so.\n\nIt is good to remember that while some function names convey mutation, we are never changing anything, we are\ninstead returning modified copies.\n\nSome conventions in the code and docstrings:\n- `zloc` is the used as the argument name for our zipper\n- \"current node in `zloc`\" is shorthand for: node at current location in zipper `zloc`\n\nBecause this API contains many functions, we offer the following categorized listing:\n\n**Create a zipper**\n[[edn]]\n[[edn*]]\n[[of-string]]\n[[of-file]]\n\n**Move**\n[[left]]\n[[right]]\n[[up]]\n[[down]]\n[[prev]]\n[[next]]\n[[leftmost]]\n[[rightmost]]\n\n**Move without skipping whitespace and comments**\n[[left*]]\n[[right*]]\n[[up*]]\n[[down*]]\n[[prev*]]\n[[next*]]\n[[leftmost*]]\n[[rightmost*]]\n\n**Whitespace/comment aware skip**\n[[skip]]\n[[skip-whitespace]]\n[[skip-whitespace-left]]\n\n**Test for whitespace**\n[[whitespace?]]\n[[linebreak?]]\n[[whitespace-or-comment?]]\n\n**Test location**\n[[leftmost?]]\n[[rightmost?]]\n[[end?]]\n\n**Test data type**\n[[seq?]]\n[[list?]]\n[[vector?]]\n[[set?]]\n[[map?]]\n\n**Find**\n[[find]]\n[[find-next]]\n[[find-depth-first]]\n[[find-next-depth-first]]\n[[find-tag]]\n[[find-next-tag]]\n[[find-value]]\n[[find-next-value]]\n[[find-token]]\n[[find-next-token]]\n[[find-last-by-pos]]\n[[find-tag-by-pos]]\n\n**Inspect**\n[[node]]\n[[position]]\n[[position-span]]\n[[tag]]\n[[length]]\n\n**Convert**\n[[sexpr]]\n[[child-sexpr]]\n\n**Update**\n[[replace]]\n[[edit]]\n[[splice]]\n[[prefix]]\n[[suffix]]\n[[insert-right]]\n[[insert-left]]\n[[insert-child]]\n[[insert-space-left]]\n[[insert-space-right]]\n[[insert-newline-left]]\n[[insert-newline-right]]\n[[append-child]]\n[[remove]]\n[[remove-preserve-newline]]\n[[root]]\n\n**Update without whitespace treatment**\n[[replace*]]\n[[edit*]]\n[[insert-left*]]\n[[insert-right*]]\n[[append-child*]]\n[[remove*]]\n\n**Isolated update without changing location**\n[[edit-node]]\n[[subedit-node]]\n[[subzip]]\n[[prewalk]]\n[[postwalk]]\n[[edit->]]\n[[edit->>]]\n[[subedit->]]\n[[subedit->>]]\n\n**Sequence operations**\n[[map]]\n[[map-keys]]\n[[map-vals]]\n[[get]]\n[[assoc]]\n\n**Stringify**\n[[string]]\n[[root-string]]\n\n**Output**\n[[print]]\n[[print-root]]"[0m,
[1;33m                     :name[0m rewrite-clj.zip,
[1;33m                     :publics[0m [1;31m[[0m[1;31m{[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                                :deprecated[0m [1;35m"0.4.0"[0m,
[1;33m                                :doc[0m [1;35m"DEPRECATED. Renamed to [[root-string]].\n"[0m,
[1;33m                                :file[0m [1;35m"rewrite_clj/zip.cljc"[0m,
[1;33m                                :line[0m [36m249[0m,
[1;33m                                :name[0m ->root-string,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc[1;31m][0m[1;31m)[0m,
[1;33m                                :deprecated[0m [1;35m"0.4.0"[0m,
[1;33m                                :doc[0m [1;35m"DEPRECATED. Renamed to [[string]].\n"[0m,
[1;33m                                :file[0m [1;35m"rewrite_clj/zip.cljc"[0m,
[1;33m                                :line[0m [36m244[0m,
[1;33m                                :name[0m ->string,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc item[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return zipper with `item` appended as last child of the current node in `zloc`.\nWill insert a space if necessary."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/insert.cljc"[0m,
[1;33m                                :line[0m [36m52[0m,
[1;33m                                :name[0m append-child,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc item[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Raw version of [[append-child]].\n\nReturns zipper with `item` inserted as the rightmost child of the current node in `zloc`,\n  without moving.\n\nNOTE: This function does not skip, nor provide any special handling for whitespace/comment nodes."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                                :line[0m [36m219[0m,
[1;33m                                :name[0m append-child*,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc & [1;31m[[0mn[1;31m][0m[1;31m][0m[1;31m][0m,
[1;33m                                :deprecated[0m [1;35m"0.5.0"[0m,
[1;33m                                :doc[0m [1;35m"DEPRECATED: renamed to [[insert-newline-right]].\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/whitespace.cljc"[0m,
[1;33m                                :line[0m [36m113[0m,
[1;33m                                :name[0m append-newline,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc & [1;31m[[0mn[1;31m][0m[1;31m][0m[1;31m][0m,
[1;33m                                :deprecated[0m [1;35m"0.5.0"[0m,
[1;33m                                :doc[0m [1;35m"DEPRECATED: renamed to [[insert-space-right]].\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/whitespace.cljc"[0m,
[1;33m                                :line[0m [36m103[0m,
[1;33m                                :name[0m append-space,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc k v[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Returns zipper with key `k` set to value `v` when current node in `zloc` is a map node.\nReturns zipper with index `k` set to value `v` when current node in `zloc` is a sequence."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/seqz.cljc"[0m,
[1;33m                                :line[0m [36m111[0m,
[1;33m                                :name[0m assoc,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:added[0m [1;35m"0.4.4"[0m,
[1;33m                                :arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return s-expression of children of current node in `zloc`.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/base.cljc"[0m,
[1;33m                                :line[0m [36m51[0m,
[1;33m                                :name[0m child-sexprs,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return zipper with location moved down to next non-whitespace/non-comment node in `zloc`.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/move.cljc"[0m,
[1;33m                                :line[0m [36m16[0m,
[1;33m                                :name[0m down,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Raw version of [[down]].\n\nReturns zipper with the location at the leftmost child of current node in `zloc`, or\n  nil if no children.\n\nNOTE: This function does not skip, nor provide any special handling for whitespace/comment nodes."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                                :line[0m [36m96[0m,
[1;33m                                :name[0m down*,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc f & args[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return zipper with the current node in `zloc` replaced with the result of:\n\n(`f` (s-expression node) `args`)\n\nThe result of `f` will be coerced to a node if possible."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/editz.cljc"[0m,
[1;33m                                :line[0m [36m26[0m,
[1;33m                                :name[0m edit,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc f & args[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Raw version of [[edit]].\n\nReturns zipper with value of `(f current-node args)` replacing current node in `zloc`\n\nNOTE: This function does not skip, nor provide any special handling for whitespace/comment nodes."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                                :line[0m [36m206[0m,
[1;33m                                :name[0m edit*,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc & body[1;31m][0m[1;31m)[0m,
[1;33m                                :doc[0m [1;35m"Like `->`. Threads `zloc` through forms.\nThe resulting zipper will be located at the same path (i.e. the same\nnumber of downwards and right movements from the root) as incoming `zloc`."[0m,
[1;33m                                :file[0m [1;35m"rewrite_clj/zip/subedit.cljc"[0m,
[1;33m                                :line[0m [36m41[0m,
[1;33m                                :name[0m edit->,
[1;33m                                :type[0m [1;33m:macro[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc & body[1;31m][0m[1;31m)[0m,
[1;33m                                :doc[0m [1;35m"Like `->>`. Threads `zloc` through forms.\nThe resulting zipper will be located at the same path (i.e. the same\nnumber of downwards and right movements from the root) as incoming `zloc`."[0m,
[1;33m                                :file[0m [1;35m"rewrite_clj/zip/subedit.cljc"[0m,
[1;33m                                :line[0m [36m48[0m,
[1;33m                                :name[0m edit->>,
[1;33m                                :type[0m [1;33m:macro[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc f[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return zipper applying function `f` to `zloc`. The resulting\nzipper will be located at the same path (i.e. the same number of\ndownwards and right movements from the root) incoming `zloc`."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/subedit.cljc"[0m,
[1;33m                                :line[0m [36m32[0m,
[1;33m                                :name[0m edit-node,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mnode[1;31m][0m [1;31m[[0mnode options[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Create and return zipper from Clojure/ClojureScript/EDN `node` (likely parsed by [[rewrite-clj-.parse]])\nand move to the first non-whitespace/non-comment child.\n\nSet `:track-position?` in `options` to enable ones-based row/column tracking.\nSee [[rewrite-clj.zip/position]].\n\nNOTE: when position tracking is enabled, `clojure.zip` is not interchangeable with `rewrite-clj.zip`, you must use `rewrite-clj.zip`."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/base.cljc"[0m,
[1;33m                                :line[0m [36m23[0m,
[1;33m                                :name[0m edn,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mnode[1;31m][0m [1;31m[[0mnode [1;31m{[0m[1;33m:keys[0m [1;31m[[0mtrack-position?[1;31m][0m[1;31m}[0m[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Create and return zipper from Clojure/ClojureScript/EDN `node` (likely parsed by [[rewrite-clj.parse]]).\n\nSet `:track-position?` in `options` to enable ones-based row/column tracking.\nSee [[rewrite-clj.zip/position]].\n\nNOTE: when position tracking is enabled, `clojure.zip` is not interchangeable with `rewrite-clj.zip`, you must use `rewrite-clj.zip`."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/base.cljc"[0m,
[1;33m                                :line[0m [36m9[0m,
[1;33m                                :name[0m edn*,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return true if `zloc` is at end of depth-first traversal.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/move.cljc"[0m,
[1;33m                                :line[0m [36m35[0m,
[1;33m                                :name[0m end?,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc p?[1;31m][0m [1;31m[[0mzloc f p?[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return the first node satisfying predicate `p?` seaching from the current node\nin `zloc` traversing by function `f`.\n\n`f` defaults to [[rewrite-clj.zip/right]]"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/findz.cljc"[0m,
[1;33m                                :line[0m [36m29[0m,
[1;33m                                :name[0m find,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc p?[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return first node satisfying predicate `p?` searching depth-first from\nthe current node in `zloc`."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/findz.cljc"[0m,
[1;33m                                :line[0m [36m59[0m,
[1;33m                                :name[0m find-depth-first,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc pos[1;31m][0m [1;31m[[0mzloc pos p?[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return the last node spanning position `pos` that satisfies predicate `p?`\n searching depth-first from the current node in `zloc`.\n\nNOTE: Does not ignore whitespace/comment nodes."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/findz.cljc"[0m,
[1;33m                                :line[0m [36m44[0m,
[1;33m                                :name[0m find-last-by-pos,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc p?[1;31m][0m [1;31m[[0mzloc f p?[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return the first node satisfying predicate `p?` searching one movement `f` from the current\nnode in `zloc` traversing by function `f`.\n\n`f` defaults to [[rewrite-clj.zip/right]]"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/findz.cljc"[0m,
[1;33m                                :line[0m [36m65[0m,
[1;33m                                :name[0m find-next,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc p?[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return the first node satisfying predicate `p?` searching depth-first from one\nnode after the current node in `zloc`"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/findz.cljc"[0m,
[1;33m                                :line[0m [36m75[0m,
[1;33m                                :name[0m find-next-depth-first,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc t[1;31m][0m [1;31m[[0mzloc f t[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return the first node with tag `t` searching one movement `f` from the current\nnode in `zloc` traversing by function `f`.\n\n`f` defaults to [[rewrite-clj.zip/right]]"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/findz.cljc"[0m,
[1;33m                                :line[0m [36m91[0m,
[1;33m                                :name[0m find-next-tag,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc p?[1;31m][0m [1;31m[[0mzloc f p?[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return the first token node satisfying predicate `p?` searching from the current node in `zloc` traversing\nby function `f`.\n\n`f` defaults to [[rewrite-clj.zip/right]]"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/findz.cljc"[0m,
[1;33m                                :line[0m [36m118[0m,
[1;33m                                :name[0m find-next-token,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc v[1;31m][0m [1;31m[[0mzloc f v[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return the first token node with value `v` searching one movement `f` from the current node in `zloc` traversing\nby function `f`.\n\n`f` defaults to [[rewrite-clj.zip/right]]"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/findz.cljc"[0m,
[1;33m                                :line[0m [36m141[0m,
[1;33m                                :name[0m find-next-value,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc t[1;31m][0m [1;31m[[0mzloc f t[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return the first node with tag `t` searching from the current node in `zloc` traversing by\nfunction `f`.\n\n`f` defaults to [[rewrite-clj.zip/right]]"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/findz.cljc"[0m,
[1;33m                                :line[0m [36m81[0m,
[1;33m                                :name[0m find-tag,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc pos t[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return the last node spanning position `pos` with tag `t` searching depth-first from the current node in `zloc`.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/findz.cljc"[0m,
[1;33m                                :line[0m [36m102[0m,
[1;33m                                :name[0m find-tag-by-pos,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc p?[1;31m][0m [1;31m[[0mzloc f p?[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return the first token node satisfying predicate `p?` searching from the current node in `zloc` traversing\nby function `f`.\n\n`f` defaults to [[rewrite-clj.zip/right]]"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/findz.cljc"[0m,
[1;33m                                :line[0m [36m107[0m,
[1;33m                                :name[0m find-token,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc v[1;31m][0m [1;31m[[0mzloc f v[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return the first token node with value `v` searching one movement `f` from the current node in `zloc` traversing\nby function `f`.\n\n`f` defaults to [[rewrite-clj.zip/right]]"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/findz.cljc"[0m,
[1;33m                                :line[0m [36m128[0m,
[1;33m                                :name[0m find-value,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc k[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Returns value node mapped to key `k` when current node in `zloc` is a map node.\nReturns nth `k` value node when current node in `zloc` is a sequence node."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/seqz.cljc"[0m,
[1;33m                                :line[0m [36m98[0m,
[1;33m                                :name[0m get,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc item[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return zipper with `item` inserted as the first child of the current node in `zloc`.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/insert.cljc"[0m,
[1;33m                                :line[0m [36m43[0m,
[1;33m                                :name[0m insert-child,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc item[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return zipper with `item` inserted to the left of the current node in `zloc`.\nWill insert a space if necessary."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/insert.cljc"[0m,
[1;33m                                :line[0m [36m33[0m,
[1;33m                                :name[0m insert-left,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc item[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Raw version of [[insert-left]].\n\nReturns zipper with `item` inserted as the left sibling of current node in `zloc`,\n without moving location.\n\nNOTE: This function does not skip, nor provide any special handling for whitespace/comment nodes."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                                :line[0m [36m178[0m,
[1;33m                                :name[0m insert-left*,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:added[0m [1;35m"0.5.0"[0m,
[1;33m                                :arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m [1;31m[[0mzloc n[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return zipper with `n` newlines node inserted to the left of the current node in `zloc`.\n`n` defaults to 1."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/whitespace.cljc"[0m,
[1;33m                                :line[0m [36m82[0m,
[1;33m                                :name[0m insert-newline-left,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:added[0m [1;35m"0.5.0"[0m,
[1;33m                                :arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m [1;31m[[0mzloc n[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return zipper with `n` newlines node inserted to the right of the current node in `zloc`.\n`n` defaults to 1."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/whitespace.cljc"[0m,
[1;33m                                :line[0m [36m89[0m,
[1;33m                                :name[0m insert-newline-right,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc item[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return zipper with `item` inserted to the right of the current node in `zloc`.\nWill insert a space if necessary."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/insert.cljc"[0m,
[1;33m                                :line[0m [36m23[0m,
[1;33m                                :name[0m insert-right,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc item[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Raw version of [[insert-right]].\n\nReturns zipper with `item` inserted as the right sibling of the current node in `zloc`,\n  without moving location.\n\nNOTE: This function does not skip, nor provide any special handling for whitespace/comment nodes."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                                :line[0m [36m190[0m,
[1;33m                                :name[0m insert-right*,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:added[0m [1;35m"0.5.0"[0m,
[1;33m                                :arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m [1;31m[[0mzloc n[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return zipper with `n` space whitespace node inserted to the left of the current node in `zloc`.\n`n` defaults to 1."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/whitespace.cljc"[0m,
[1;33m                                :line[0m [36m62[0m,
[1;33m                                :name[0m insert-space-left,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:added[0m [1;35m"0.5.0"[0m,
[1;33m                                :arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m [1;31m[[0mzloc n[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return zipper with `n` space whitespace node inserted to the right of the current node in `zloc`.\n`n` defaults to 1."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/whitespace.cljc"[0m,
[1;33m                                :line[0m [36m72[0m,
[1;33m                                :name[0m insert-space-right,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return zipper with location moved left to next non-whitespace/non-comment node in `zloc`.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/move.cljc"[0m,
[1;33m                                :line[0m [36m11[0m,
[1;33m                                :name[0m left,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Raw version of [[left]].\n\nReturns zipper with location at the left sibling of the current node in `zloc`, or nil.\n\nNOTE: This function does not skip, nor provide any special handling for whitespace/comment nodes."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                                :line[0m [36m153[0m,
[1;33m                                :name[0m left*,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return zipper with location moved to the leftmost non-whitespace/non-comment node in `zloc`.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/move.cljc"[0m,
[1;33m                                :line[0m [36m59[0m,
[1;33m                                :name[0m leftmost,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Raw version of [[leftmost]].\n\nReturns zipper with location at the leftmost sibling of the current node in `zloc`, or self.\n\nNOTE: This function does not skip, nor provide any special handling for whitespace/comment nodes."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                                :line[0m [36m165[0m,
[1;33m                                :name[0m leftmost*,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return true if at leftmost non-whitespace/non-comment node in `zloc`.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/move.cljc"[0m,
[1;33m                                :line[0m [36m47[0m,
[1;33m                                :name[0m leftmost?,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return length of printable string of current node in `zloc`.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/base.cljc"[0m,
[1;33m                                :line[0m [36m56[0m,
[1;33m                                :name[0m length,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Returns true when the current node in `zloc` is a linebreak.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/whitespace.cljc"[0m,
[1;33m                                :line[0m [36m12[0m,
[1;33m                                :name[0m linebreak?,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Returns true if current node in `zloc` is a list.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/seqz.cljc"[0m,
[1;33m                                :line[0m [36m19[0m,
[1;33m                                :name[0m list?,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mf zloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Returns zipper with function `f` applied to all value nodes of current node in `zloc`.\nCurrent node must be a sequence node.\n\nIterates over:\n- value nodes of maps\n- each element of a seq"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/seqz.cljc"[0m,
[1;33m                                :line[0m [36m83[0m,
[1;33m                                :name[0m map,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mf zloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Returns zipper with function `f` applied to all key nodes of the current node in `zloc`.\nCurrent node must be map node."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/seqz.cljc"[0m,
[1;33m                                :line[0m [36m70[0m,
[1;33m                                :name[0m map-keys,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mf zloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Returns zipper with function `f` applied to all value current node in `zloc`.\nCurrent node must be map node."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/seqz.cljc"[0m,
[1;33m                                :line[0m [36m55[0m,
[1;33m                                :name[0m map-vals,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Returns true if current node in `zloc` is a map.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/seqz.cljc"[0m,
[1;33m                                :line[0m [36m34[0m,
[1;33m                                :name[0m map?,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return zipper with location moved to the next depth-first non-whitespace/non-comment node in `zloc`.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/move.cljc"[0m,
[1;33m                                :line[0m [36m26[0m,
[1;33m                                :name[0m next,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0m[1;31m{[0m[1;33m:as[0m zloc, [1;33m:keys[0m [1;31m[[0mend?[1;31m][0m[1;31m}[0m[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Raw version of [[next]].\n\nReturns zipper with location at the next depth-first location in the hierarchy in `zloc`.\n  When reaching the end, returns a distinguished zipper detectable via [[end?]]. If already\n  at the end, stays there.\n\nNOTE: This function does not skip, nor provide any special handling for whitespace/comment nodes."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                                :line[0m [36m225[0m,
[1;33m                                :name[0m next*,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Returns the current node in `zloc`.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                                :line[0m [36m51[0m,
[1;33m                                :name[0m node,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0ms[1;31m][0m [1;31m[[0ms options[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Create and return zipper from all forms in Clojure/ClojureScript/EDN string `s`.\n\nSet `:track-position?` in `options` to enable ones-based row/column tracking.\nSee [[rewrite-clj.zip/position]].\n\nNOTE: when position tracking is enabled, `clojure.zip` is not interchangeable with `rewrite-clj.zip`, you must use `rewrite-clj.zip`."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/base.cljc"[0m,
[1;33m                                :line[0m [36m68[0m,
[1;33m                                :name[0m of-string,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Returns the ones-based `[row col]` of the start of the current node in `zloc`.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                                :line[0m [36m74[0m,
[1;33m                                :name[0m position,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Returns the ones-based `[[start-row start-col] [end-row end-col]]` of the current node in `zloc`.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                                :line[0m [36m84[0m,
[1;33m                                :name[0m position-span,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:added[0m [1;35m"0.4.9"[0m,
[1;33m                                :arglists[0m [1;31m[[0m[1;31m[[0mzloc f[1;31m][0m [1;31m[[0mzloc p? f[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return zipper modified by an isolated depth-first post-order traversal.\nTraversal starts at the current node in `zloc` and continues to the end of the isolated sub-tree.\nFunction `f` is called on the zipper locations satisfying predicate `p?`, or all locations when `p?` is absent,\nand must return a valid zipper - modified or not.\n\nWARNING: when function `f` changes the location in the zipper, normal traversal will be affected."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/walk.cljc"[0m,
[1;33m                                :line[0m [36m38[0m,
[1;33m                                :name[0m postwalk,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc s[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return zipper with the current node in `zloc` prefixed with string `s`.\nOperates on token node or a multi-line node, else exception is thrown.\nWhen multi-line, all lines are prefixed.\n\nTODO: either multi-line handling is broken or I don't understand intent of code."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/editz.cljc"[0m,
[1;33m                                :line[0m [36m75[0m,
[1;33m                                :name[0m prefix,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc & [1;31m[[0mn[1;31m][0m[1;31m][0m[1;31m][0m,
[1;33m                                :deprecated[0m [1;35m"0.5.0"[0m,
[1;33m                                :doc[0m [1;35m"DEPRECATED: renamed to [[insert-newline-left]].\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/whitespace.cljc"[0m,
[1;33m                                :line[0m [36m108[0m,
[1;33m                                :name[0m prepend-newline,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc & [1;31m[[0mn[1;31m][0m[1;31m][0m[1;31m][0m,
[1;33m                                :deprecated[0m [1;35m"0.5.0"[0m,
[1;33m                                :doc[0m [1;35m"DEPRECATED: renamed to [[insert-space-left]].\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/whitespace.cljc"[0m,
[1;33m                                :line[0m [36m98[0m,
[1;33m                                :name[0m prepend-space,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return zipper with location moved to the previous depth-first non-whitespace/non-comment node in `zloc`.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/move.cljc"[0m,
[1;33m                                :line[0m [36m52[0m,
[1;33m                                :name[0m prev,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Raw version of [[prev]].\n\nReturns zipper with location at the previous depth-first location in the hierarchy in `zloc`.\n  If already at the root, returns nil.\n\nNOTE: This function does not skip, nor provide any special handling for whitespace/comment nodes."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                                :line[0m [36m240[0m,
[1;33m                                :name[0m prev*,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc f[1;31m][0m [1;31m[[0mzloc p? f[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return zipper modified by an isolated depth-first pre-order traversal.\nTraversal starts at the current node in `zloc` and continues to the end of the isolated sub-tree.\nFunction `f` is called on the zipper locations satisfying predicate `p?`, or all locations when `p?` is absent,\nand must return a valid zipper - modified or not.\n\nWARNING: when function `f` changes the location in the zipper, normal traversal will be affected."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/walk.cljc"[0m,
[1;33m                                :line[0m [36m16[0m,
[1;33m                                :name[0m prewalk,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc & [1;31m[[0mwriter[1;31m][0m[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Print current node in `zloc`.\n\nNOTE: Optional `writer` is currently ignored for ClojureScript."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/base.cljc"[0m,
[1;33m                                :line[0m [36m112[0m,
[1;33m                                :name[0m print,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc & [1;31m[[0mwriter[1;31m][0m[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Zip up and print `zloc` from root node.\n\nNOTE: Optional `writer` is currently ignored for ClojureScript."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/base.cljc"[0m,
[1;33m                                :line[0m [36m121[0m,
[1;33m                                :name[0m print-root,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return zipper with current node in `zloc` removed. Returned zipper location\n is moved to the first non-whitespace node preceding removed node in a depth-first walk.\n Removes whitespace appropriately.\n\n- `[1  2  3]   => [1  3]`\n- `[1 2]       => [1]`\n- `[1 2]       => [2]`\n- `[1]         => []`\n- `[  1  ]     => []`\n- `[1 [2 3] 4] => [1 [2 3]]`\n- `[1 [2 3] 4] => [[2 3] 4]`\n\n If the removed node is at the rightmost location, both preceding and trailing spaces are removed,\n otherwise only trailing spaces are removed. This means that a following element\n (no matter whether on the same line or not) will end up in the same position\n (line/column) as the removed one, _unless_ a comment lies between the original\n node and the neighbour."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/removez.cljc"[0m,
[1;33m                                :line[0m [36m28[0m,
[1;33m                                :name[0m remove,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Raw version of [[remove]].\n\nReturns zipper with current node in `zloc` removed, with location at node that would have preceded\n  it in a depth-first walk.\n\nNOTE: This function does not skip, nor provide any special handling for whitespace/comment nodes."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                                :line[0m [36m256[0m,
[1;33m                                :name[0m remove*,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Same as [[remove]] but preserves newlines.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/removez.cljc"[0m,
[1;33m                                :line[0m [36m51[0m,
[1;33m                                :name[0m remove-preserve-newline,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc value[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return zipper with the current node in `zloc` replaced with one representing `value`.\n`value` will be coerced to a node if possible."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/editz.cljc"[0m,
[1;33m                                :line[0m [36m12[0m,
[1;33m                                :name[0m replace,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc node[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Raw version of [[replace]].\n\nReturns zipper with `node` replacing current node in `zloc`, without moving location.\n\nNOTE: This function does not skip, nor provide any special handling for whitespace/comment nodes."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                                :line[0m [36m201[0m,
[1;33m                                :name[0m replace*,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return zipper with location moved right to next non-whitespace/non-comment node in `zloc`.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/move.cljc"[0m,
[1;33m                                :line[0m [36m6[0m,
[1;33m                                :name[0m right,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Raw version of [[right]].\n\nReturns zipper with location at the right sibling of the current node in `zloc`, or nil.\n\nNOTE: This function does not skip, nor provide any special handling for whitespace/comment nodes."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                                :line[0m [36m135[0m,
[1;33m                                :name[0m right*,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return zipper with location moved to the rightmost non-whitespace/non-comment node in `zloc`.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/move.cljc"[0m,
[1;33m                                :line[0m [36m66[0m,
[1;33m                                :name[0m rightmost,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Raw version of [[rightmost]].\n\nReturns zipper with location at the rightmost sibling of the current node in `zloc`, or self.\n\nNOTE: This function does not skip, nor provide any special handling for whitespace/comment nodes."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                                :line[0m [36m146[0m,
[1;33m                                :name[0m rightmost*,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return true if at rightmost non-whitespace/non-comment node in `zloc`.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/move.cljc"[0m,
[1;33m                                :line[0m [36m42[0m,
[1;33m                                :name[0m rightmost?,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0m[1;31m{[0m[1;33m:as[0m zloc, [1;33m:keys[0m [1;31m[[0mend?[1;31m][0m[1;31m}[0m[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Zips all the way up `zloc` and returns zipper at the root node, reflecting any changes.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                                :line[0m [36m125[0m,
[1;33m                                :name[0m root,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:added[0m [1;35m"0.4.0"[0m,
[1;33m                                :arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return string representing the zipped-up `zloc` zipper.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/base.cljc"[0m,
[1;33m                                :line[0m [36m98[0m,
[1;33m                                :name[0m root-string,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Returns true if current node in `zloc` is a sequence.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/seqz.cljc"[0m,
[1;33m                                :line[0m [36m12[0m,
[1;33m                                :name[0m seq?,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Returns true if current node in `zloc` is a set.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/seqz.cljc"[0m,
[1;33m                                :line[0m [36m29[0m,
[1;33m                                :name[0m set?,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return s-expression of current node in `zloc`.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/base.cljc"[0m,
[1;33m                                :line[0m [36m46[0m,
[1;33m                                :name[0m sexpr,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mf p? zloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return zipper with location moved to first location not satisfying predicate `p?` starting from the node in\n`zloc` and traversing by function `f`."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/whitespace.cljc"[0m,
[1;33m                                :line[0m [36m37[0m,
[1;33m                                :name[0m skip,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m [1;31m[[0mf zloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return zipper with location moved to first non-whitespace/non-comment starting from current node in `zloc`\nand traversing by function `f`.\n\n`f` defaults to [[rewrite-clj.zip/right]]"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/whitespace.cljc"[0m,
[1;33m                                :line[0m [36m47[0m,
[1;33m                                :name[0m skip-whitespace,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return zipper with location moved to first non-whitespace/non-comment starting from current node in `zloc` traversing left.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/whitespace.cljc"[0m,
[1;33m                                :line[0m [36m55[0m,
[1;33m                                :name[0m skip-whitespace-left,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return zipper with the children of the current node in `zloc` merged into itself.\n(akin to Clojure's `unquote-splicing` macro: `~@...`).\n- if the node is not one that can have children, no modification will\n  be performed.\n- if the node has no or only whitespace children, it will be removed.\n- otherwise, splicing will be performed, moving the zipper to the first\n  non-whitespace child afterwards."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/editz.cljc"[0m,
[1;33m                                :line[0m [36m37[0m,
[1;33m                                :name[0m splice,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:added[0m [1;35m"0.4.0"[0m,
[1;33m                                :arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return string representing the current node in `zloc`.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/base.cljc"[0m,
[1;33m                                :line[0m [36m93[0m,
[1;33m                                :name[0m string,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc & body[1;31m][0m[1;31m)[0m,
[1;33m                                :doc[0m [1;35m"Like `->`. Threads `zloc`, as an isolated sub-tree through forms, then zips\nup to, and locates at, the root of the modified sub-tree."[0m,
[1;33m                                :file[0m [1;35m"rewrite_clj/zip/subedit.cljc"[0m,
[1;33m                                :line[0m [36m72[0m,
[1;33m                                :name[0m subedit->,
[1;33m                                :type[0m [1;33m:macro[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m([0m[1;31m[[0mzloc & body[1;31m][0m[1;31m)[0m,
[1;33m                                :doc[0m [1;35m"Like `->`. Threads `zloc`, as an isolated sub-tree through forms, then zips\nup to, and locates at, the root of the modified sub-tree."[0m,
[1;33m                                :file[0m [1;35m"rewrite_clj/zip/subedit.cljc"[0m,
[1;33m                                :line[0m [36m78[0m,
[1;33m                                :name[0m subedit->>,
[1;33m                                :type[0m [1;33m:macro[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc f[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return zipper replacing current node in `zloc` with result of `f` applied to said node as an isolated sub-tree.\nThe resulting zipper will be located on the root of the modified sub-tree."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/subedit.cljc"[0m,
[1;33m                                :line[0m [36m64[0m,
[1;33m                                :name[0m subedit-node,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Create and return a zipper whose root is the current node in `zloc`.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/subedit.cljc"[0m,
[1;33m                                :line[0m [36m57[0m,
[1;33m                                :name[0m subzip,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc s[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return zipper with the current node in `zloc` suffixed with string `s`.\nOperates on token node or a multi-line node, else exception is thrown.\nWhen multi-line, all lines are suffixed.\n\nTODO: either multi-line handling is broken or I don't understand intent of code."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/editz.cljc"[0m,
[1;33m                                :line[0m [36m90[0m,
[1;33m                                :name[0m suffix,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return tag of current node in `zloc`.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/base.cljc"[0m,
[1;33m                                :line[0m [36m41[0m,
[1;33m                                :name[0m tag,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Return zipper with location moved up to next non-whitespace/non-comment node in `zloc`.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/move.cljc"[0m,
[1;33m                                :line[0m [36m21[0m,
[1;33m                                :name[0m up,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Raw version of [[up]].\n\nReturns zipper with the location at the parent of current node in `zloc`, or nil if at\n  the top.\n\nNOTE: This function does not skip, nor provide any special handling for whitespace/comment nodes."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/custom_zipper/core.cljc"[0m,
[1;33m                                :line[0m [36m111[0m,
[1;33m                                :name[0m up*,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :deprecated[0m [1;35m"0.4.0"[0m,
[1;33m                                :doc[0m [1;35m"DEPRECATED. Return a tag/s-expression pair for inner nodes, or\nthe s-expression itself for leaves."[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/base.cljc"[0m,
[1;33m                                :line[0m [36m61[0m,
[1;33m                                :name[0m value,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Returns true if current node in `zloc` is a vector.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/seqz.cljc"[0m,
[1;33m                                :line[0m [36m24[0m,
[1;33m                                :name[0m vector?,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Returns true when current node in `zloc` is whitespace or a comment.\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/whitespace.cljc"[0m,
[1;33m                                :line[0m [36m29[0m,
[1;33m                                :name[0m whitespace-or-comment?,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m
[1;31m                               {[0m[1;33m:arglists[0m [1;31m[[0m[1;31m[[0mzloc[1;31m][0m[1;31m][0m,
[1;33m                                :doc[0m [1;35m"Returns true when the current the node in `zloc` is a Clojure whitespace (which includes the comma).\n"[0m,
[1;33m                                :file[0m [30;41m-"rewrite_clj/zip.cljc"[0m [30;42m+"rewrite_clj/zip/whitespace.cljc"[0m,
[1;33m                                :line[0m [36m7[0m,
[1;33m                                :name[0m whitespace?,
[1;33m                                :type[0m [1;33m:var[0m[1;31m}[0m[1;31m][0m[1;31m}[0m[1;31m][0m[1;31m}[0m,
[1;33m :artifact-id[0m [1;35m"rewrite-cljs-playground"[0m,
[1;33m :group-id[0m [1;35m"lread"[0m,
[1;33m :pom-str[0m [1;35m"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>lread</groupId>\n  <artifactId>rewrite-cljs-playground</artifactId>\n  <version>1.0.0-alpha</version>\n  <name>rewrite-cljs-playground</name>\n  <dependencies>\n    <dependency>\n      <groupId>org.clojure</groupId>\n      <artifactId>clojure</artifactId>\n      <version>1.10.1</version>\n    </dependency>\n    <dependency>\n      <groupId>org.clojure</groupId>\n      <artifactId>clojurescript</artifactId>\n      <version>1.10.520</version>\n    </dependency>\n    <dependency>\n      <groupId>org.clojure</groupId>\n      <artifactId>tools.reader</artifactId>\n      <version>1.3.2</version>\n    </dependency>\n  </dependencies>\n  <properties>\n      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n  </properties>\n  <build>\n    <sourceDirectory>src</sourceDirectory>\n    <resources>\n        <resource>\n            <directory>src</directory>\n        </resource>\n    </resources>\n  </build>\n  <scm>\n      <connection>scm:git:git@github.com:lread/rewrite-cljs-playground.git</connection>\n      <developerConnection>scm:git:git@github.com:lread/rewrite-cljs-playground.git</developerConnection>\n      <tag>16e294ae4da565e8cb14261def2ee9af4d82c4d1</tag>\n      <url>git@github.com:lread/rewrite-cljs-playground</url>\n  </scm>\n  <repositories>\n    <repository>\n      <id>clojars</id>\n      <url>https://repo.clojars.org/</url>\n    </repository>\n  </repositories>\n  <distributionManagement>\n      <repository>\n          <id>clojars</id>\n          <name>Clojars repository</name>\n          <url>https://clojars.org/repo</url>\n      </repository>\n  </distributionManagement>\n</project>\n"[0m,
[1;33m :version[0m [1;35m"1.0.0-alpha"[0m[1;31m}[0m
